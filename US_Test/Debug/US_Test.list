
US_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08005c88  08005c88  00006c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006058  08006058  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006058  08006058  00007058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006060  08006060  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006060  08006060  00007060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006064  08006064  00007064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006068  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200001d4  0800623c  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  0800623c  000083a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8b7  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b76  00000000  00000000  00012abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00014638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090e  00000000  00000000  00015208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227bd  00000000  00000000  00015b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6b8  00000000  00000000  000382d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d16f5  00000000  00000000  0004498b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116080  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004140  00000000  00000000  001160c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0011a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c6c 	.word	0x08005c6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08005c6c 	.word	0x08005c6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bf0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000bf4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d013      	beq.n	8000c28 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c00:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c04:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000c08:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d00b      	beq.n	8000c28 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c10:	e000      	b.n	8000c14 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c12:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c14:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f9      	beq.n	8000c12 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c1e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)                                 //function for Serial Wire Viewer
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
  int i=0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ;i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	e009      	b.n	8000c60 <_write+0x2a>
	  ITM_SendChar((*ptr++));
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ffc7 	bl	8000be8 <ITM_SendChar>
  for(i=0 ; i<len ;i++)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbf1      	blt.n	8000c4c <_write+0x16>
  return len;
 8000c68:	687b      	ldr	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <delay>:
void delay (uint16_t time)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <delay+0x30>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000c86:	bf00      	nop
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <delay+0x30>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d3f9      	bcc.n	8000c88 <delay+0x14>
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	200001f0 	.word	0x200001f0

08000ca8 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOA

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	7f1b      	ldrb	r3, [r3, #28]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	f040 8089 	bne.w	8000dcc <HAL_TIM_IC_CaptureCallback+0x124>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000cba:	4b49      	ldr	r3, [pc, #292]	@ (8000de0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d11a      	bne.n	8000cf8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f002 f859 	bl	8002d7c <HAL_TIM_ReadCapturedValue>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a45      	ldr	r2, [pc, #276]	@ (8000de4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000cce:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000cd0:	4b43      	ldr	r3, [pc, #268]	@ (8000de0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6a1a      	ldr	r2, [r3, #32]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f022 020a 	bic.w	r2, r2, #10
 8000ce4:	621a      	str	r2, [r3, #32]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6a1a      	ldr	r2, [r3, #32]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f042 0202 	orr.w	r2, r2, #2
 8000cf4:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000cf6:	e069      	b.n	8000dcc <HAL_TIM_IC_CaptureCallback+0x124>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000cf8:	4b39      	ldr	r3, [pc, #228]	@ (8000de0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d165      	bne.n	8000dcc <HAL_TIM_IC_CaptureCallback+0x124>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000d00:	2100      	movs	r1, #0
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f002 f83a 	bl	8002d7c <HAL_TIM_ReadCapturedValue>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4a37      	ldr	r2, [pc, #220]	@ (8000de8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000d0c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1)
 8000d16:	4b34      	ldr	r3, [pc, #208]	@ (8000de8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4b32      	ldr	r3, [pc, #200]	@ (8000de4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d907      	bls.n	8000d32 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000d22:	4b31      	ldr	r3, [pc, #196]	@ (8000de8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b2f      	ldr	r3, [pc, #188]	@ (8000de4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8000dec <HAL_TIM_IC_CaptureCallback+0x144>)
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	e00f      	b.n	8000d52 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000d32:	4b2c      	ldr	r3, [pc, #176]	@ (8000de4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b2c      	ldr	r3, [pc, #176]	@ (8000de8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d909      	bls.n	8000d52 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000de8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000d4c:	33ff      	adds	r3, #255	@ 0xff
 8000d4e:	4a27      	ldr	r2, [pc, #156]	@ (8000dec <HAL_TIM_IC_CaptureCallback+0x144>)
 8000d50:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000d52:	4b26      	ldr	r3, [pc, #152]	@ (8000dec <HAL_TIM_IC_CaptureCallback+0x144>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fbd4 	bl	8000504 <__aeabi_ui2d>
 8000d5c:	a31e      	add	r3, pc, #120	@ (adr r3, 8000dd8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d62:	f7ff fc49 	bl	80005f8 <__aeabi_dmul>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f04f 0200 	mov.w	r2, #0
 8000d72:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d76:	f7ff fd69 	bl	800084c <__aeabi_ddiv>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4610      	mov	r0, r2
 8000d80:	4619      	mov	r1, r3
 8000d82:	f7ff ff11 	bl	8000ba8 <__aeabi_d2uiz>
 8000d86:	4603      	mov	r3, r0
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d8c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
			printf("%d\n",Distance);
 8000d94:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4816      	ldr	r0, [pc, #88]	@ (8000df4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000d9c:	f002 ff8e 	bl	8003cbc <iprintf>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6a1a      	ldr	r2, [r3, #32]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 020a 	bic.w	r2, r2, #10
 8000dae:	621a      	str	r2, [r3, #32]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6a12      	ldr	r2, [r2, #32]
 8000dba:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 0202 	bic.w	r2, r2, #2
 8000dca:	60da      	str	r2, [r3, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	f3af 8000 	nop.w
 8000dd8:	b020c49c 	.word	0xb020c49c
 8000ddc:	3fa16872 	.word	0x3fa16872
 8000de0:	20000248 	.word	0x20000248
 8000de4:	2000023c 	.word	0x2000023c
 8000de8:	20000240 	.word	0x20000240
 8000dec:	20000244 	.word	0x20000244
 8000df0:	20000249 	.word	0x20000249
 8000df4:	08005c88 	.word	0x08005c88
 8000df8:	200001f0 	.word	0x200001f0

08000dfc <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000e00:	2201      	movs	r2, #1
 8000e02:	2101      	movs	r1, #1
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e08:	f000 fe18 	bl	8001a3c <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	f7ff ff31 	bl	8000c74 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000e12:	2200      	movs	r2, #0
 8000e14:	2101      	movs	r1, #1
 8000e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1a:	f000 fe0f 	bl	8001a3c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000e1e:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <HCSR04_Read+0x38>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	4b03      	ldr	r3, [pc, #12]	@ (8000e34 <HCSR04_Read+0x38>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f042 0202 	orr.w	r2, r2, #2
 8000e2c:	60da      	str	r2, [r3, #12]
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200001f0 	.word	0x200001f0

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f000 fad8 	bl	80013f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e42:	f000 f857 	bl	8000ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e46:	f000 f901 	bl	800104c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e4a:	f000 f8a5 	bl	8000f98 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4821      	ldr	r0, [pc, #132]	@ (8000ed8 <main+0xa0>)
 8000e52:	f001 fcc7 	bl	80027e4 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Helo\n");
 8000e56:	4821      	ldr	r0, [pc, #132]	@ (8000edc <main+0xa4>)
 8000e58:	f002 ff98 	bl	8003d8c <puts>
	  HCSR04_Read();
 8000e5c:	f7ff ffce 	bl	8000dfc <HCSR04_Read>
	 int a= (Distance/100) + 48;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <main+0xa8>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee4 <main+0xac>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	095b      	lsrs	r3, r3, #5
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	3330      	adds	r3, #48	@ 0x30
 8000e70:	60fb      	str	r3, [r7, #12]
	  int b=((Distance/10)%10) +48;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee0 <main+0xa8>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee8 <main+0xb0>)
 8000e78:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7c:	08db      	lsrs	r3, r3, #3
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <main+0xb0>)
 8000e82:	fba3 1302 	umull	r1, r3, r3, r2
 8000e86:	08d9      	lsrs	r1, r3, #3
 8000e88:	460b      	mov	r3, r1
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	3330      	adds	r3, #48	@ 0x30
 8000e96:	60bb      	str	r3, [r7, #8]
	  int c= (Distance%10)+48;
 8000e98:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <main+0xa8>)
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <main+0xb0>)
 8000e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ea2:	08d9      	lsrs	r1, r3, #3
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	3330      	adds	r3, #48	@ 0x30
 8000eb2:	607b      	str	r3, [r7, #4]
	  printf("a=%d\tb=%d\tc=%d\n",a,b,c);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	68f9      	ldr	r1, [r7, #12]
 8000eba:	480c      	ldr	r0, [pc, #48]	@ (8000eec <main+0xb4>)
 8000ebc:	f002 fefe 	bl	8003cbc <iprintf>
	  printf("%d\n",Distance);
 8000ec0:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <main+0xa8>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480a      	ldr	r0, [pc, #40]	@ (8000ef0 <main+0xb8>)
 8000ec8:	f002 fef8 	bl	8003cbc <iprintf>
	  HAL_Delay(2000);
 8000ecc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ed0:	f000 fb04 	bl	80014dc <HAL_Delay>
  {
 8000ed4:	bf00      	nop
 8000ed6:	e7be      	b.n	8000e56 <main+0x1e>
 8000ed8:	200001f0 	.word	0x200001f0
 8000edc:	08005c8c 	.word	0x08005c8c
 8000ee0:	20000249 	.word	0x20000249
 8000ee4:	51eb851f 	.word	0x51eb851f
 8000ee8:	cccccccd 	.word	0xcccccccd
 8000eec:	08005c94 	.word	0x08005c94
 8000ef0:	08005c88 	.word	0x08005c88

08000ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b096      	sub	sp, #88	@ 0x58
 8000ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	2244      	movs	r2, #68	@ 0x44
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 f822 	bl	8003f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f1a:	f000 fdb5 	bl	8001a88 <HAL_PWREx_ControlVoltageScaling>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f24:	f000 f8d0 	bl	80010c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f32:	2310      	movs	r3, #16
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f36:	2302      	movs	r3, #2
 8000f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f42:	230a      	movs	r3, #10
 8000f44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f46:	2307      	movs	r3, #7
 8000f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fdec 	bl	8001b34 <HAL_RCC_OscConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f62:	f000 f8b1 	bl	80010c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f66:	230f      	movs	r3, #15
 8000f68:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 f9ec 	bl	800235c <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f8a:	f000 f89d 	bl	80010c8 <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3758      	adds	r7, #88	@ 0x58
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <MX_TIM1_Init+0xac>)
 8000fb8:	4a23      	ldr	r2, [pc, #140]	@ (8001048 <MX_TIM1_Init+0xb0>)
 8000fba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000fbc:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <MX_TIM1_Init+0xac>)
 8000fbe:	224f      	movs	r2, #79	@ 0x4f
 8000fc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <MX_TIM1_Init+0xac>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <MX_TIM1_Init+0xac>)
 8000fca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000fce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <MX_TIM1_Init+0xac>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <MX_TIM1_Init+0xac>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <MX_TIM1_Init+0xac>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000fe2:	4818      	ldr	r0, [pc, #96]	@ (8001044 <MX_TIM1_Init+0xac>)
 8000fe4:	f001 fba6 	bl	8002734 <HAL_TIM_IC_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000fee:	f000 f86b 	bl	80010c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	480f      	ldr	r0, [pc, #60]	@ (8001044 <MX_TIM1_Init+0xac>)
 8001006:	f002 f8bb 	bl	8003180 <HAL_TIMEx_MasterConfigSynchronization>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001010:	f000 f85a 	bl	80010c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001018:	2301      	movs	r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2200      	movs	r2, #0
 8001028:	4619      	mov	r1, r3
 800102a:	4806      	ldr	r0, [pc, #24]	@ (8001044 <MX_TIM1_Init+0xac>)
 800102c:	f001 fe0a 	bl	8002c44 <HAL_TIM_IC_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001036:	f000 f847 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	3720      	adds	r7, #32
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200001f0 	.word	0x200001f0
 8001048:	40012c00 	.word	0x40012c00

0800104c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <MX_GPIO_Init+0x78>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	4a17      	ldr	r2, [pc, #92]	@ (80010c4 <MX_GPIO_Init+0x78>)
 8001068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800106c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <MX_GPIO_Init+0x78>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <MX_GPIO_Init+0x78>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <MX_GPIO_Init+0x78>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_GPIO_Init+0x78>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2101      	movs	r1, #1
 8001096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109a:	f000 fccf 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800109e:	2301      	movs	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4619      	mov	r1, r3
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b8:	f000 fb46 	bl	8001748 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000

080010c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
}
 80010ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <Error_Handler+0x8>

080010d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <HAL_MspInit+0x44>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010de:	4a0e      	ldr	r2, [pc, #56]	@ (8001118 <HAL_MspInit+0x44>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <HAL_MspInit+0x44>)
 80010e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <HAL_MspInit+0x44>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f6:	4a08      	ldr	r2, [pc, #32]	@ (8001118 <HAL_MspInit+0x44>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_MspInit+0x44>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	@ 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a1c      	ldr	r2, [pc, #112]	@ (80011ac <HAL_TIM_IC_MspInit+0x90>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d131      	bne.n	80011a2 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <HAL_TIM_IC_MspInit+0x94>)
 8001140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001142:	4a1b      	ldr	r2, [pc, #108]	@ (80011b0 <HAL_TIM_IC_MspInit+0x94>)
 8001144:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001148:	6613      	str	r3, [r2, #96]	@ 0x60
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <HAL_TIM_IC_MspInit+0x94>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800114e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <HAL_TIM_IC_MspInit+0x94>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	4a15      	ldr	r2, [pc, #84]	@ (80011b0 <HAL_TIM_IC_MspInit+0x94>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001162:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <HAL_TIM_IC_MspInit+0x94>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800116e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001180:	2301      	movs	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800118e:	f000 fadb 	bl	8001748 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	201b      	movs	r0, #27
 8001198:	f000 fa9f 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800119c:	201b      	movs	r0, #27
 800119e:	f000 fab8 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	@ 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40012c00 	.word	0x40012c00
 80011b0:	40021000 	.word	0x40021000

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <NMI_Handler+0x4>

080011bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <MemManage_Handler+0x4>

080011cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <UsageFault_Handler+0x4>

080011dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120a:	f000 f947 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001218:	4802      	ldr	r0, [pc, #8]	@ (8001224 <TIM1_CC_IRQHandler+0x10>)
 800121a:	f001 fc11 	bl	8002a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200001f0 	.word	0x200001f0

08001228 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return 1;
 800122c:	2301      	movs	r3, #1
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <_kill>:

int _kill(int pid, int sig)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001242:	f002 fed5 	bl	8003ff0 <__errno>
 8001246:	4603      	mov	r3, r0
 8001248:	2216      	movs	r2, #22
 800124a:	601a      	str	r2, [r3, #0]
  return -1;
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <_exit>:

void _exit (int status)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ffe7 	bl	8001238 <_kill>
  while (1) {}    /* Make sure we hang here */
 800126a:	bf00      	nop
 800126c:	e7fd      	b.n	800126a <_exit+0x12>

0800126e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e00a      	b.n	8001296 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001280:	f3af 8000 	nop.w
 8001284:	4601      	mov	r1, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	60ba      	str	r2, [r7, #8]
 800128c:	b2ca      	uxtb	r2, r1
 800128e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	dbf0      	blt.n	8001280 <_read+0x12>
  }

  return len;
 800129e:	687b      	ldr	r3, [r7, #4]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012d0:	605a      	str	r2, [r3, #4]
  return 0;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <_isatty>:

int _isatty(int file)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012e8:	2301      	movs	r3, #1
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	@ (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f002 fe56 	bl	8003ff0 <__errno>
 8001344:	4603      	mov	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <_sbrk+0x64>)
 8001360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20010000 	.word	0x20010000
 8001370:	00000400 	.word	0x00000400
 8001374:	2000024c 	.word	0x2000024c
 8001378:	200003a0 	.word	0x200003a0

0800137c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <SystemInit+0x20>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001386:	4a05      	ldr	r2, [pc, #20]	@ (800139c <SystemInit+0x20>)
 8001388:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a4:	f7ff ffea 	bl	800137c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <LoopForever+0x6>)
  ldr r1, =_edata
 80013aa:	490d      	ldr	r1, [pc, #52]	@ (80013e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013ac:	4a0d      	ldr	r2, [pc, #52]	@ (80013e4 <LoopForever+0xe>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c0:	4c0a      	ldr	r4, [pc, #40]	@ (80013ec <LoopForever+0x16>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ce:	f002 fe15 	bl	8003ffc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013d2:	f7ff fd31 	bl	8000e38 <main>

080013d6 <LoopForever>:

LoopForever:
    b LoopForever
 80013d6:	e7fe      	b.n	80013d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80013e4:	08006068 	.word	0x08006068
  ldr r2, =_sbss
 80013e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80013ec:	200003a0 	.word	0x200003a0

080013f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC1_IRQHandler>

080013f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 f961 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001402:	200f      	movs	r0, #15
 8001404:	f000 f80e 	bl	8001424 <HAL_InitTick>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	e001      	b.n	8001418 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001414:	f7ff fe5e 	bl	80010d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001418:	79fb      	ldrb	r3, [r7, #7]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001430:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <HAL_InitTick+0x6c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d023      	beq.n	8001480 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001438:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <HAL_InitTick+0x70>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <HAL_InitTick+0x6c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001446:	fbb3 f3f1 	udiv	r3, r3, r1
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f96d 	bl	800172e <HAL_SYSTICK_Config>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10f      	bne.n	800147a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d809      	bhi.n	8001474 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001460:	2200      	movs	r2, #0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f000 f937 	bl	80016da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800146c:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <HAL_InitTick+0x74>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e007      	b.n	8001484 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e004      	b.n	8001484 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	e001      	b.n	8001484 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000008 	.word	0x20000008
 8001494:	20000000 	.word	0x20000000
 8001498:	20000004 	.word	0x20000004

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	@ (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000250 	.word	0x20000250

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	@ (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000250 	.word	0x20000250

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff ffee 	bl	80014c4 <HAL_GetTick>
 80014e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d005      	beq.n	8001502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_Delay+0x44>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001502:	bf00      	nop
 8001504:	f7ff ffde 	bl	80014c4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f7      	bhi.n	8001504 <HAL_Delay+0x28>
  {
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000008 	.word	0x20000008

08001524 <__NVIC_SetPriorityGrouping>:
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_GetPriorityGrouping>:
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4907      	ldr	r1, [pc, #28]	@ (80015c0 <__NVIC_EnableIRQ+0x38>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <__NVIC_SetPriority>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db0a      	blt.n	80015ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	490c      	ldr	r1, [pc, #48]	@ (8001610 <__NVIC_SetPriority+0x4c>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80015ec:	e00a      	b.n	8001604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4908      	ldr	r1, [pc, #32]	@ (8001614 <__NVIC_SetPriority+0x50>)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	3b04      	subs	r3, #4
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	440b      	add	r3, r1
 8001602:	761a      	strb	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <NVIC_EncodePriority>:
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	@ 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	2b04      	cmp	r3, #4
 8001634:	bf28      	it	cs
 8001636:	2304      	movcs	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3304      	adds	r3, #4
 800163e:	2b06      	cmp	r3, #6
 8001640:	d902      	bls.n	8001648 <NVIC_EncodePriority+0x30>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3b03      	subs	r3, #3
 8001646:	e000      	b.n	800164a <NVIC_EncodePriority+0x32>
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	f04f 32ff 	mov.w	r2, #4294967295
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001660:	f04f 31ff 	mov.w	r1, #4294967295
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43d9      	mvns	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	4313      	orrs	r3, r2
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	@ 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <SysTick_Config>:
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	210f      	movs	r1, #15
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f7ff ff8e 	bl	80015c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff29 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff3e 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff8e 	bl	8001618 <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5d 	bl	80015c4 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff31 	bl	8001588 <__NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa2 	bl	8001680 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001756:	e154      	b.n	8001a02 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2101      	movs	r1, #1
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	4013      	ands	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8146 	beq.w	80019fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b01      	cmp	r3, #1
 800177a:	d005      	beq.n	8001788 <HAL_GPIO_Init+0x40>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d130      	bne.n	80017ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	2203      	movs	r2, #3
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017be:	2201      	movs	r2, #1
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	f003 0201 	and.w	r2, r3, #1
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d017      	beq.n	8001826 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	2203      	movs	r2, #3
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d123      	bne.n	800187a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	08da      	lsrs	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3208      	adds	r2, #8
 800183a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	220f      	movs	r2, #15
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	691a      	ldr	r2, [r3, #16]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	08da      	lsrs	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3208      	adds	r2, #8
 8001874:	6939      	ldr	r1, [r7, #16]
 8001876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	2203      	movs	r2, #3
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0203 	and.w	r2, r3, #3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 80a0 	beq.w	80019fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018bc:	4b58      	ldr	r3, [pc, #352]	@ (8001a20 <HAL_GPIO_Init+0x2d8>)
 80018be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c0:	4a57      	ldr	r2, [pc, #348]	@ (8001a20 <HAL_GPIO_Init+0x2d8>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80018c8:	4b55      	ldr	r3, [pc, #340]	@ (8001a20 <HAL_GPIO_Init+0x2d8>)
 80018ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018d4:	4a53      	ldr	r2, [pc, #332]	@ (8001a24 <HAL_GPIO_Init+0x2dc>)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	220f      	movs	r2, #15
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018fe:	d019      	beq.n	8001934 <HAL_GPIO_Init+0x1ec>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a49      	ldr	r2, [pc, #292]	@ (8001a28 <HAL_GPIO_Init+0x2e0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d013      	beq.n	8001930 <HAL_GPIO_Init+0x1e8>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a48      	ldr	r2, [pc, #288]	@ (8001a2c <HAL_GPIO_Init+0x2e4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d00d      	beq.n	800192c <HAL_GPIO_Init+0x1e4>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a47      	ldr	r2, [pc, #284]	@ (8001a30 <HAL_GPIO_Init+0x2e8>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d007      	beq.n	8001928 <HAL_GPIO_Init+0x1e0>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a46      	ldr	r2, [pc, #280]	@ (8001a34 <HAL_GPIO_Init+0x2ec>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d101      	bne.n	8001924 <HAL_GPIO_Init+0x1dc>
 8001920:	2304      	movs	r3, #4
 8001922:	e008      	b.n	8001936 <HAL_GPIO_Init+0x1ee>
 8001924:	2307      	movs	r3, #7
 8001926:	e006      	b.n	8001936 <HAL_GPIO_Init+0x1ee>
 8001928:	2303      	movs	r3, #3
 800192a:	e004      	b.n	8001936 <HAL_GPIO_Init+0x1ee>
 800192c:	2302      	movs	r3, #2
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x1ee>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_GPIO_Init+0x1ee>
 8001934:	2300      	movs	r3, #0
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	f002 0203 	and.w	r2, r2, #3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4093      	lsls	r3, r2
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001946:	4937      	ldr	r1, [pc, #220]	@ (8001a24 <HAL_GPIO_Init+0x2dc>)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001954:	4b38      	ldr	r3, [pc, #224]	@ (8001a38 <HAL_GPIO_Init+0x2f0>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001978:	4a2f      	ldr	r2, [pc, #188]	@ (8001a38 <HAL_GPIO_Init+0x2f0>)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800197e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a38 <HAL_GPIO_Init+0x2f0>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019a2:	4a25      	ldr	r2, [pc, #148]	@ (8001a38 <HAL_GPIO_Init+0x2f0>)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019a8:	4b23      	ldr	r3, [pc, #140]	@ (8001a38 <HAL_GPIO_Init+0x2f0>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a38 <HAL_GPIO_Init+0x2f0>)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019d2:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <HAL_GPIO_Init+0x2f0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019f6:	4a10      	ldr	r2, [pc, #64]	@ (8001a38 <HAL_GPIO_Init+0x2f0>)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f47f aea3 	bne.w	8001758 <HAL_GPIO_Init+0x10>
  }
}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	48000800 	.word	0x48000800
 8001a30:	48000c00 	.word	0x48000c00
 8001a34:	48001000 	.word	0x48001000
 8001a38:	40010400 	.word	0x40010400

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a70:	4b04      	ldr	r3, [pc, #16]	@ (8001a84 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40007000 	.word	0x40007000

08001a88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a96:	d130      	bne.n	8001afa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a98:	4b23      	ldr	r3, [pc, #140]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001aa4:	d038      	beq.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa6:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001aae:	4a1e      	ldr	r2, [pc, #120]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ab4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2232      	movs	r2, #50	@ 0x32
 8001abc:	fb02 f303 	mul.w	r3, r2, r3
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	0c9b      	lsrs	r3, r3, #18
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001acc:	e002      	b.n	8001ad4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad4:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ae0:	d102      	bne.n	8001ae8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f2      	bne.n	8001ace <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001af4:	d110      	bne.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e00f      	b.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001afa:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b06:	d007      	beq.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b08:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b10:	4a05      	ldr	r2, [pc, #20]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	431bde83 	.word	0x431bde83

08001b34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	f000 bc02 	b.w	800234c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b48:	4b96      	ldr	r3, [pc, #600]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b52:	4b94      	ldr	r3, [pc, #592]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80e4 	beq.w	8001d32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <HAL_RCC_OscConfig+0x4c>
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	f040 808b 	bne.w	8001c8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	f040 8087 	bne.w	8001c8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b80:	4b88      	ldr	r3, [pc, #544]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_OscConfig+0x64>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e3d9      	b.n	800234c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1a      	ldr	r2, [r3, #32]
 8001b9c:	4b81      	ldr	r3, [pc, #516]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d004      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x7e>
 8001ba8:	4b7e      	ldr	r3, [pc, #504]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bb0:	e005      	b.n	8001bbe <HAL_RCC_OscConfig+0x8a>
 8001bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d223      	bcs.n	8001c0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fd54 	bl	8002674 <RCC_SetFlashLatencyFromMSIRange>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e3ba      	b.n	800234c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd6:	4b73      	ldr	r3, [pc, #460]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a72      	ldr	r2, [pc, #456]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	f043 0308 	orr.w	r3, r3, #8
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b70      	ldr	r3, [pc, #448]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	496d      	ldr	r1, [pc, #436]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bf4:	4b6b      	ldr	r3, [pc, #428]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	4968      	ldr	r1, [pc, #416]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
 8001c08:	e025      	b.n	8001c56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c0a:	4b66      	ldr	r3, [pc, #408]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a65      	ldr	r2, [pc, #404]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c10:	f043 0308 	orr.w	r3, r3, #8
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	4b63      	ldr	r3, [pc, #396]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4960      	ldr	r1, [pc, #384]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c28:	4b5e      	ldr	r3, [pc, #376]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	495b      	ldr	r1, [pc, #364]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 fd14 	bl	8002674 <RCC_SetFlashLatencyFromMSIRange>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e37a      	b.n	800234c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c56:	f000 fc81 	bl	800255c <HAL_RCC_GetSysClockFreq>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	4b51      	ldr	r3, [pc, #324]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	4950      	ldr	r1, [pc, #320]	@ (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001c68:	5ccb      	ldrb	r3, [r1, r3]
 8001c6a:	f003 031f 	and.w	r3, r3, #31
 8001c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c72:	4a4e      	ldr	r2, [pc, #312]	@ (8001dac <HAL_RCC_OscConfig+0x278>)
 8001c74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c76:	4b4e      	ldr	r3, [pc, #312]	@ (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fbd2 	bl	8001424 <HAL_InitTick>
 8001c80:	4603      	mov	r3, r0
 8001c82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d052      	beq.n	8001d30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	e35e      	b.n	800234c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d032      	beq.n	8001cfc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c96:	4b43      	ldr	r3, [pc, #268]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a42      	ldr	r2, [pc, #264]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fc0f 	bl	80014c4 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001caa:	f7ff fc0b 	bl	80014c4 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e347      	b.n	800234c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cbc:	4b39      	ldr	r3, [pc, #228]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc8:	4b36      	ldr	r3, [pc, #216]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a35      	ldr	r2, [pc, #212]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b33      	ldr	r3, [pc, #204]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4930      	ldr	r1, [pc, #192]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	492b      	ldr	r1, [pc, #172]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
 8001cfa:	e01a      	b.n	8001d32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cfc:	4b29      	ldr	r3, [pc, #164]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a28      	ldr	r2, [pc, #160]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fbdc 	bl	80014c4 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d10:	f7ff fbd8 	bl	80014c4 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e314      	b.n	800234c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d22:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x1dc>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d073      	beq.n	8001e26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_OscConfig+0x21c>
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b0c      	cmp	r3, #12
 8001d48:	d10e      	bne.n	8001d68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d10b      	bne.n	8001d68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d063      	beq.n	8001e24 <HAL_RCC_OscConfig+0x2f0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d15f      	bne.n	8001e24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e2f1      	b.n	800234c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d70:	d106      	bne.n	8001d80 <HAL_RCC_OscConfig+0x24c>
 8001d72:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a0b      	ldr	r2, [pc, #44]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e025      	b.n	8001dcc <HAL_RCC_OscConfig+0x298>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d88:	d114      	bne.n	8001db4 <HAL_RCC_OscConfig+0x280>
 8001d8a:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b03      	ldr	r3, [pc, #12]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a02      	ldr	r2, [pc, #8]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e013      	b.n	8001dcc <HAL_RCC_OscConfig+0x298>
 8001da4:	40021000 	.word	0x40021000
 8001da8:	08005ca4 	.word	0x08005ca4
 8001dac:	20000000 	.word	0x20000000
 8001db0:	20000004 	.word	0x20000004
 8001db4:	4ba0      	ldr	r3, [pc, #640]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a9f      	ldr	r2, [pc, #636]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b9d      	ldr	r3, [pc, #628]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a9c      	ldr	r2, [pc, #624]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fb76 	bl	80014c4 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7ff fb72 	bl	80014c4 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	@ 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e2ae      	b.n	800234c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dee:	4b92      	ldr	r3, [pc, #584]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x2a8>
 8001dfa:	e014      	b.n	8001e26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fb62 	bl	80014c4 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff fb5e 	bl	80014c4 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	@ 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e29a      	b.n	800234c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e16:	4b88      	ldr	r3, [pc, #544]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x2d0>
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d060      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_OscConfig+0x310>
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d119      	bne.n	8001e72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d116      	bne.n	8001e72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e44:	4b7c      	ldr	r3, [pc, #496]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_OscConfig+0x328>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e277      	b.n	800234c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5c:	4b76      	ldr	r3, [pc, #472]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	061b      	lsls	r3, r3, #24
 8001e6a:	4973      	ldr	r1, [pc, #460]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e70:	e040      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d023      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e7a:	4b6f      	ldr	r3, [pc, #444]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6e      	ldr	r2, [pc, #440]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7ff fb1d 	bl	80014c4 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7ff fb19 	bl	80014c4 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e255      	b.n	800234c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea0:	4b65      	ldr	r3, [pc, #404]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eac:	4b62      	ldr	r3, [pc, #392]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	061b      	lsls	r3, r3, #24
 8001eba:	495f      	ldr	r1, [pc, #380]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
 8001ec0:	e018      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec2:	4b5d      	ldr	r3, [pc, #372]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a5c      	ldr	r2, [pc, #368]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001ec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7ff faf9 	bl	80014c4 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7ff faf5 	bl	80014c4 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e231      	b.n	800234c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee8:	4b53      	ldr	r3, [pc, #332]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f0      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d03c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d01c      	beq.n	8001f42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f08:	4b4b      	ldr	r3, [pc, #300]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f0e:	4a4a      	ldr	r2, [pc, #296]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7ff fad4 	bl	80014c4 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff fad0 	bl	80014c4 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e20c      	b.n	800234c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f32:	4b41      	ldr	r3, [pc, #260]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ef      	beq.n	8001f20 <HAL_RCC_OscConfig+0x3ec>
 8001f40:	e01b      	b.n	8001f7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f42:	4b3d      	ldr	r3, [pc, #244]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f48:	4a3b      	ldr	r2, [pc, #236]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	f023 0301 	bic.w	r3, r3, #1
 8001f4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f52:	f7ff fab7 	bl	80014c4 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5a:	f7ff fab3 	bl	80014c4 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e1ef      	b.n	800234c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f6c:	4b32      	ldr	r3, [pc, #200]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1ef      	bne.n	8001f5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80a6 	beq.w	80020d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10d      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f98:	4b27      	ldr	r3, [pc, #156]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9c:	4a26      	ldr	r2, [pc, #152]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa4:	4b24      	ldr	r3, [pc, #144]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb4:	4b21      	ldr	r3, [pc, #132]	@ (800203c <HAL_RCC_OscConfig+0x508>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d118      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800203c <HAL_RCC_OscConfig+0x508>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800203c <HAL_RCC_OscConfig+0x508>)
 8001fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fcc:	f7ff fa7a 	bl	80014c4 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd4:	f7ff fa76 	bl	80014c4 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e1b2      	b.n	800234c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe6:	4b15      	ldr	r3, [pc, #84]	@ (800203c <HAL_RCC_OscConfig+0x508>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d108      	bne.n	800200c <HAL_RCC_OscConfig+0x4d8>
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002000:	4a0d      	ldr	r2, [pc, #52]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800200a:	e029      	b.n	8002060 <HAL_RCC_OscConfig+0x52c>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b05      	cmp	r3, #5
 8002012:	d115      	bne.n	8002040 <HAL_RCC_OscConfig+0x50c>
 8002014:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201a:	4a07      	ldr	r2, [pc, #28]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002024:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202a:	4a03      	ldr	r2, [pc, #12]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002034:	e014      	b.n	8002060 <HAL_RCC_OscConfig+0x52c>
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	40007000 	.word	0x40007000
 8002040:	4b9a      	ldr	r3, [pc, #616]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002046:	4a99      	ldr	r2, [pc, #612]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002050:	4b96      	ldr	r3, [pc, #600]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002056:	4a95      	ldr	r2, [pc, #596]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 8002058:	f023 0304 	bic.w	r3, r3, #4
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d016      	beq.n	8002096 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7ff fa2c 	bl	80014c4 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7ff fa28 	bl	80014c4 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e162      	b.n	800234c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002086:	4b89      	ldr	r3, [pc, #548]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ed      	beq.n	8002070 <HAL_RCC_OscConfig+0x53c>
 8002094:	e015      	b.n	80020c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002096:	f7ff fa15 	bl	80014c4 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7ff fa11 	bl	80014c4 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e14b      	b.n	800234c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020b4:	4b7d      	ldr	r3, [pc, #500]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1ed      	bne.n	800209e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c2:	7ffb      	ldrb	r3, [r7, #31]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c8:	4b78      	ldr	r3, [pc, #480]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	4a77      	ldr	r2, [pc, #476]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 80020ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d03c      	beq.n	800215a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01c      	beq.n	8002122 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020e8:	4b70      	ldr	r3, [pc, #448]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 80020ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020ee:	4a6f      	ldr	r2, [pc, #444]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff f9e4 	bl	80014c4 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002100:	f7ff f9e0 	bl	80014c4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e11c      	b.n	800234c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002112:	4b66      	ldr	r3, [pc, #408]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 8002114:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0ef      	beq.n	8002100 <HAL_RCC_OscConfig+0x5cc>
 8002120:	e01b      	b.n	800215a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002122:	4b62      	ldr	r3, [pc, #392]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 8002124:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002128:	4a60      	ldr	r2, [pc, #384]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 800212a:	f023 0301 	bic.w	r3, r3, #1
 800212e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002132:	f7ff f9c7 	bl	80014c4 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800213a:	f7ff f9c3 	bl	80014c4 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0ff      	b.n	800234c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800214c:	4b57      	ldr	r3, [pc, #348]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 800214e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1ef      	bne.n	800213a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80f3 	beq.w	800234a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002168:	2b02      	cmp	r3, #2
 800216a:	f040 80c9 	bne.w	8002300 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800216e:	4b4f      	ldr	r3, [pc, #316]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 0203 	and.w	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217e:	429a      	cmp	r2, r3
 8002180:	d12c      	bne.n	80021dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218c:	3b01      	subs	r3, #1
 800218e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d123      	bne.n	80021dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800219e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d11b      	bne.n	80021dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d113      	bne.n	80021dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	3b01      	subs	r3, #1
 80021c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d109      	bne.n	80021dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	085b      	lsrs	r3, r3, #1
 80021d4:	3b01      	subs	r3, #1
 80021d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d06b      	beq.n	80022b4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d062      	beq.n	80022a8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021e2:	4b32      	ldr	r3, [pc, #200]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0ac      	b.n	800234c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021f2:	4b2e      	ldr	r3, [pc, #184]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2d      	ldr	r2, [pc, #180]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 80021f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021fe:	f7ff f961 	bl	80014c4 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7ff f95d 	bl	80014c4 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e099      	b.n	800234c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002218:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002224:	4b21      	ldr	r3, [pc, #132]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	4b21      	ldr	r3, [pc, #132]	@ (80022b0 <HAL_RCC_OscConfig+0x77c>)
 800222a:	4013      	ands	r3, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002234:	3a01      	subs	r2, #1
 8002236:	0112      	lsls	r2, r2, #4
 8002238:	4311      	orrs	r1, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800223e:	0212      	lsls	r2, r2, #8
 8002240:	4311      	orrs	r1, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002246:	0852      	lsrs	r2, r2, #1
 8002248:	3a01      	subs	r2, #1
 800224a:	0552      	lsls	r2, r2, #21
 800224c:	4311      	orrs	r1, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002252:	0852      	lsrs	r2, r2, #1
 8002254:	3a01      	subs	r2, #1
 8002256:	0652      	lsls	r2, r2, #25
 8002258:	4311      	orrs	r1, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800225e:	06d2      	lsls	r2, r2, #27
 8002260:	430a      	orrs	r2, r1
 8002262:	4912      	ldr	r1, [pc, #72]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 8002264:	4313      	orrs	r3, r2
 8002266:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002268:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0f      	ldr	r2, [pc, #60]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 800226e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002272:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002274:	4b0d      	ldr	r3, [pc, #52]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a0c      	ldr	r2, [pc, #48]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 800227a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800227e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002280:	f7ff f920 	bl	80014c4 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002288:	f7ff f91c 	bl	80014c4 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e058      	b.n	800234c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229a:	4b04      	ldr	r3, [pc, #16]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022a6:	e050      	b.n	800234a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e04f      	b.n	800234c <HAL_RCC_OscConfig+0x818>
 80022ac:	40021000 	.word	0x40021000
 80022b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b4:	4b27      	ldr	r3, [pc, #156]	@ (8002354 <HAL_RCC_OscConfig+0x820>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d144      	bne.n	800234a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022c0:	4b24      	ldr	r3, [pc, #144]	@ (8002354 <HAL_RCC_OscConfig+0x820>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a23      	ldr	r2, [pc, #140]	@ (8002354 <HAL_RCC_OscConfig+0x820>)
 80022c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022cc:	4b21      	ldr	r3, [pc, #132]	@ (8002354 <HAL_RCC_OscConfig+0x820>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a20      	ldr	r2, [pc, #128]	@ (8002354 <HAL_RCC_OscConfig+0x820>)
 80022d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022d8:	f7ff f8f4 	bl	80014c4 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e0:	f7ff f8f0 	bl	80014c4 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e02c      	b.n	800234c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f2:	4b18      	ldr	r3, [pc, #96]	@ (8002354 <HAL_RCC_OscConfig+0x820>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x7ac>
 80022fe:	e024      	b.n	800234a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d01f      	beq.n	8002346 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <HAL_RCC_OscConfig+0x820>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a12      	ldr	r2, [pc, #72]	@ (8002354 <HAL_RCC_OscConfig+0x820>)
 800230c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002312:	f7ff f8d7 	bl	80014c4 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231a:	f7ff f8d3 	bl	80014c4 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e00f      	b.n	800234c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232c:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <HAL_RCC_OscConfig+0x820>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f0      	bne.n	800231a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_RCC_OscConfig+0x820>)
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	4905      	ldr	r1, [pc, #20]	@ (8002354 <HAL_RCC_OscConfig+0x820>)
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_RCC_OscConfig+0x824>)
 8002340:	4013      	ands	r3, r2
 8002342:	60cb      	str	r3, [r1, #12]
 8002344:	e001      	b.n	800234a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	feeefffc 	.word	0xfeeefffc

0800235c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0e7      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002370:	4b75      	ldr	r3, [pc, #468]	@ (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d910      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b72      	ldr	r3, [pc, #456]	@ (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4970      	ldr	r1, [pc, #448]	@ (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b6e      	ldr	r3, [pc, #440]	@ (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0cf      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d010      	beq.n	80023ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	4b66      	ldr	r3, [pc, #408]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d908      	bls.n	80023ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b63      	ldr	r3, [pc, #396]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4960      	ldr	r1, [pc, #384]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d04c      	beq.n	8002474 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e2:	4b5a      	ldr	r3, [pc, #360]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d121      	bne.n	8002432 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0a6      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fa:	4b54      	ldr	r3, [pc, #336]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d115      	bne.n	8002432 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e09a      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002412:	4b4e      	ldr	r3, [pc, #312]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e08e      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002422:	4b4a      	ldr	r3, [pc, #296]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e086      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002432:	4b46      	ldr	r3, [pc, #280]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f023 0203 	bic.w	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4943      	ldr	r1, [pc, #268]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002444:	f7ff f83e 	bl	80014c4 <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	e00a      	b.n	8002462 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244c:	f7ff f83a 	bl	80014c4 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e06e      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	4b3a      	ldr	r3, [pc, #232]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 020c 	and.w	r2, r3, #12
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	429a      	cmp	r2, r3
 8002472:	d1eb      	bne.n	800244c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d010      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	4b31      	ldr	r3, [pc, #196]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800248c:	429a      	cmp	r2, r3
 800248e:	d208      	bcs.n	80024a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002490:	4b2e      	ldr	r3, [pc, #184]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	492b      	ldr	r1, [pc, #172]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a2:	4b29      	ldr	r3, [pc, #164]	@ (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d210      	bcs.n	80024d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b0:	4b25      	ldr	r3, [pc, #148]	@ (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f023 0207 	bic.w	r2, r3, #7
 80024b8:	4923      	ldr	r1, [pc, #140]	@ (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c0:	4b21      	ldr	r3, [pc, #132]	@ (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e036      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d008      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024de:	4b1b      	ldr	r3, [pc, #108]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	4918      	ldr	r1, [pc, #96]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d009      	beq.n	8002510 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fc:	4b13      	ldr	r3, [pc, #76]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4910      	ldr	r1, [pc, #64]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 800250c:	4313      	orrs	r3, r2
 800250e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002510:	f000 f824 	bl	800255c <HAL_RCC_GetSysClockFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b0d      	ldr	r3, [pc, #52]	@ (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	490b      	ldr	r1, [pc, #44]	@ (8002550 <HAL_RCC_ClockConfig+0x1f4>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
 800252c:	4a09      	ldr	r2, [pc, #36]	@ (8002554 <HAL_RCC_ClockConfig+0x1f8>)
 800252e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002530:	4b09      	ldr	r3, [pc, #36]	@ (8002558 <HAL_RCC_ClockConfig+0x1fc>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe ff75 	bl	8001424 <HAL_InitTick>
 800253a:	4603      	mov	r3, r0
 800253c:	72fb      	strb	r3, [r7, #11]

  return status;
 800253e:	7afb      	ldrb	r3, [r7, #11]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40022000 	.word	0x40022000
 800254c:	40021000 	.word	0x40021000
 8002550:	08005ca4 	.word	0x08005ca4
 8002554:	20000000 	.word	0x20000000
 8002558:	20000004 	.word	0x20000004

0800255c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	@ 0x24
 8002560:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800256a:	4b3e      	ldr	r3, [pc, #248]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002574:	4b3b      	ldr	r3, [pc, #236]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x34>
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d121      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d11e      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002590:	4b34      	ldr	r3, [pc, #208]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d107      	bne.n	80025ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800259c:	4b31      	ldr	r3, [pc, #196]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 800259e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	61fb      	str	r3, [r7, #28]
 80025aa:	e005      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10d      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d102      	bne.n	80025da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025d4:	4b25      	ldr	r3, [pc, #148]	@ (800266c <HAL_RCC_GetSysClockFreq+0x110>)
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	e004      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025e0:	4b23      	ldr	r3, [pc, #140]	@ (8002670 <HAL_RCC_GetSysClockFreq+0x114>)
 80025e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2b0c      	cmp	r3, #12
 80025e8:	d134      	bne.n	8002654 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d003      	beq.n	8002602 <HAL_RCC_GetSysClockFreq+0xa6>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d003      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0xac>
 8002600:	e005      	b.n	800260e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002602:	4b1a      	ldr	r3, [pc, #104]	@ (800266c <HAL_RCC_GetSysClockFreq+0x110>)
 8002604:	617b      	str	r3, [r7, #20]
      break;
 8002606:	e005      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002608:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <HAL_RCC_GetSysClockFreq+0x114>)
 800260a:	617b      	str	r3, [r7, #20]
      break;
 800260c:	e002      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	617b      	str	r3, [r7, #20]
      break;
 8002612:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002614:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	3301      	adds	r3, #1
 8002620:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	fb03 f202 	mul.w	r2, r3, r2
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800263a:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	0e5b      	lsrs	r3, r3, #25
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	3301      	adds	r3, #1
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002652:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002654:	69bb      	ldr	r3, [r7, #24]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	@ 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	08005cb4 	.word	0x08005cb4
 800266c:	00f42400 	.word	0x00f42400
 8002670:	007a1200 	.word	0x007a1200

08002674 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800267c:	2300      	movs	r3, #0
 800267e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002680:	4b2a      	ldr	r3, [pc, #168]	@ (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800268c:	f7ff f9ee 	bl	8001a6c <HAL_PWREx_GetVoltageRange>
 8002690:	6178      	str	r0, [r7, #20]
 8002692:	e014      	b.n	80026be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002694:	4b25      	ldr	r3, [pc, #148]	@ (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002698:	4a24      	ldr	r2, [pc, #144]	@ (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800269e:	6593      	str	r3, [r2, #88]	@ 0x58
 80026a0:	4b22      	ldr	r3, [pc, #136]	@ (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026ac:	f7ff f9de 	bl	8001a6c <HAL_PWREx_GetVoltageRange>
 80026b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026b2:	4b1e      	ldr	r3, [pc, #120]	@ (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b6:	4a1d      	ldr	r2, [pc, #116]	@ (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026c4:	d10b      	bne.n	80026de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b80      	cmp	r3, #128	@ 0x80
 80026ca:	d919      	bls.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80026d0:	d902      	bls.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026d2:	2302      	movs	r3, #2
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	e013      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d8:	2301      	movs	r3, #1
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	e010      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b80      	cmp	r3, #128	@ 0x80
 80026e2:	d902      	bls.n	80026ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026e4:	2303      	movs	r3, #3
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	e00a      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b80      	cmp	r3, #128	@ 0x80
 80026ee:	d102      	bne.n	80026f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026f0:	2302      	movs	r3, #2
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	e004      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b70      	cmp	r3, #112	@ 0x70
 80026fa:	d101      	bne.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026fc:	2301      	movs	r3, #1
 80026fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002700:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 0207 	bic.w	r2, r3, #7
 8002708:	4909      	ldr	r1, [pc, #36]	@ (8002730 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002710:	4b07      	ldr	r3, [pc, #28]	@ (8002730 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	40022000 	.word	0x40022000

08002734 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e049      	b.n	80027da <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe fcde 	bl	800111c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3304      	adds	r3, #4
 8002770:	4619      	mov	r1, r3
 8002772:	4610      	mov	r0, r2
 8002774:	f000 fb6e 	bl	8002e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d104      	bne.n	8002802 <HAL_TIM_IC_Start_IT+0x1e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	e023      	b.n	800284a <HAL_TIM_IC_Start_IT+0x66>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b04      	cmp	r3, #4
 8002806:	d104      	bne.n	8002812 <HAL_TIM_IC_Start_IT+0x2e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800280e:	b2db      	uxtb	r3, r3
 8002810:	e01b      	b.n	800284a <HAL_TIM_IC_Start_IT+0x66>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b08      	cmp	r3, #8
 8002816:	d104      	bne.n	8002822 <HAL_TIM_IC_Start_IT+0x3e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800281e:	b2db      	uxtb	r3, r3
 8002820:	e013      	b.n	800284a <HAL_TIM_IC_Start_IT+0x66>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d104      	bne.n	8002832 <HAL_TIM_IC_Start_IT+0x4e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800282e:	b2db      	uxtb	r3, r3
 8002830:	e00b      	b.n	800284a <HAL_TIM_IC_Start_IT+0x66>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b10      	cmp	r3, #16
 8002836:	d104      	bne.n	8002842 <HAL_TIM_IC_Start_IT+0x5e>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800283e:	b2db      	uxtb	r3, r3
 8002840:	e003      	b.n	800284a <HAL_TIM_IC_Start_IT+0x66>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002848:	b2db      	uxtb	r3, r3
 800284a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d104      	bne.n	800285c <HAL_TIM_IC_Start_IT+0x78>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002858:	b2db      	uxtb	r3, r3
 800285a:	e013      	b.n	8002884 <HAL_TIM_IC_Start_IT+0xa0>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b04      	cmp	r3, #4
 8002860:	d104      	bne.n	800286c <HAL_TIM_IC_Start_IT+0x88>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002868:	b2db      	uxtb	r3, r3
 800286a:	e00b      	b.n	8002884 <HAL_TIM_IC_Start_IT+0xa0>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b08      	cmp	r3, #8
 8002870:	d104      	bne.n	800287c <HAL_TIM_IC_Start_IT+0x98>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002878:	b2db      	uxtb	r3, r3
 800287a:	e003      	b.n	8002884 <HAL_TIM_IC_Start_IT+0xa0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002882:	b2db      	uxtb	r3, r3
 8002884:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002886:	7bbb      	ldrb	r3, [r7, #14]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d102      	bne.n	8002892 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800288c:	7b7b      	ldrb	r3, [r7, #13]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d001      	beq.n	8002896 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0c9      	b.n	8002a2a <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d104      	bne.n	80028a6 <HAL_TIM_IC_Start_IT+0xc2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028a4:	e023      	b.n	80028ee <HAL_TIM_IC_Start_IT+0x10a>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d104      	bne.n	80028b6 <HAL_TIM_IC_Start_IT+0xd2>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028b4:	e01b      	b.n	80028ee <HAL_TIM_IC_Start_IT+0x10a>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d104      	bne.n	80028c6 <HAL_TIM_IC_Start_IT+0xe2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028c4:	e013      	b.n	80028ee <HAL_TIM_IC_Start_IT+0x10a>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	d104      	bne.n	80028d6 <HAL_TIM_IC_Start_IT+0xf2>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028d4:	e00b      	b.n	80028ee <HAL_TIM_IC_Start_IT+0x10a>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d104      	bne.n	80028e6 <HAL_TIM_IC_Start_IT+0x102>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028e4:	e003      	b.n	80028ee <HAL_TIM_IC_Start_IT+0x10a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2202      	movs	r2, #2
 80028ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d104      	bne.n	80028fe <HAL_TIM_IC_Start_IT+0x11a>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028fc:	e013      	b.n	8002926 <HAL_TIM_IC_Start_IT+0x142>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b04      	cmp	r3, #4
 8002902:	d104      	bne.n	800290e <HAL_TIM_IC_Start_IT+0x12a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800290c:	e00b      	b.n	8002926 <HAL_TIM_IC_Start_IT+0x142>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d104      	bne.n	800291e <HAL_TIM_IC_Start_IT+0x13a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800291c:	e003      	b.n	8002926 <HAL_TIM_IC_Start_IT+0x142>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2202      	movs	r2, #2
 8002922:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b0c      	cmp	r3, #12
 800292a:	d841      	bhi.n	80029b0 <HAL_TIM_IC_Start_IT+0x1cc>
 800292c:	a201      	add	r2, pc, #4	@ (adr r2, 8002934 <HAL_TIM_IC_Start_IT+0x150>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002969 	.word	0x08002969
 8002938:	080029b1 	.word	0x080029b1
 800293c:	080029b1 	.word	0x080029b1
 8002940:	080029b1 	.word	0x080029b1
 8002944:	0800297b 	.word	0x0800297b
 8002948:	080029b1 	.word	0x080029b1
 800294c:	080029b1 	.word	0x080029b1
 8002950:	080029b1 	.word	0x080029b1
 8002954:	0800298d 	.word	0x0800298d
 8002958:	080029b1 	.word	0x080029b1
 800295c:	080029b1 	.word	0x080029b1
 8002960:	080029b1 	.word	0x080029b1
 8002964:	0800299f 	.word	0x0800299f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0202 	orr.w	r2, r2, #2
 8002976:	60da      	str	r2, [r3, #12]
      break;
 8002978:	e01d      	b.n	80029b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0204 	orr.w	r2, r2, #4
 8002988:	60da      	str	r2, [r3, #12]
      break;
 800298a:	e014      	b.n	80029b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0208 	orr.w	r2, r2, #8
 800299a:	60da      	str	r2, [r3, #12]
      break;
 800299c:	e00b      	b.n	80029b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0210 	orr.w	r2, r2, #16
 80029ac:	60da      	str	r2, [r3, #12]
      break;
 80029ae:	e002      	b.n	80029b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
      break;
 80029b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d135      	bne.n	8002a28 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2201      	movs	r2, #1
 80029c2:	6839      	ldr	r1, [r7, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fbb5 	bl	8003134 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a19      	ldr	r2, [pc, #100]	@ (8002a34 <HAL_TIM_IC_Start_IT+0x250>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d009      	beq.n	80029e8 <HAL_TIM_IC_Start_IT+0x204>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029dc:	d004      	beq.n	80029e8 <HAL_TIM_IC_Start_IT+0x204>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a15      	ldr	r2, [pc, #84]	@ (8002a38 <HAL_TIM_IC_Start_IT+0x254>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d115      	bne.n	8002a14 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <HAL_TIM_IC_Start_IT+0x258>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d015      	beq.n	8002a26 <HAL_TIM_IC_Start_IT+0x242>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a00:	d011      	beq.n	8002a26 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 0201 	orr.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a12:	e008      	b.n	8002a26 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e000      	b.n	8002a28 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a26:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40012c00 	.word	0x40012c00
 8002a38:	40014000 	.word	0x40014000
 8002a3c:	00010007 	.word	0x00010007

08002a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d020      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01b      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0202 	mvn.w	r2, #2
 8002a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fe f90c 	bl	8000ca8 <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f9c0 	bl	8002e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f9c7 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d020      	beq.n	8002af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01b      	beq.n	8002af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0204 	mvn.w	r2, #4
 8002ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7fe f8e6 	bl	8000ca8 <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f99a 	bl	8002e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f9a1 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d020      	beq.n	8002b3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0208 	mvn.w	r2, #8
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2204      	movs	r2, #4
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe f8c0 	bl	8000ca8 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f974 	bl	8002e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f97b 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d020      	beq.n	8002b88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01b      	beq.n	8002b88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0210 	mvn.w	r2, #16
 8002b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fe f89a 	bl	8000ca8 <HAL_TIM_IC_CaptureCallback>
 8002b74:	e005      	b.n	8002b82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f94e 	bl	8002e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f955 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00c      	beq.n	8002bac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0201 	mvn.w	r2, #1
 8002ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f92c 	bl	8002e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fb48 	bl	8003260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fb40 	bl	8003274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00c      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d007      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f914 	bl	8002e40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00c      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0220 	mvn.w	r2, #32
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fb08 	bl	800324c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e088      	b.n	8002d74 <HAL_TIM_IC_ConfigChannel+0x130>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d11b      	bne.n	8002ca8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002c80:	f000 f94c 	bl	8002f1c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 020c 	bic.w	r2, r2, #12
 8002c92:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6999      	ldr	r1, [r3, #24]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	619a      	str	r2, [r3, #24]
 8002ca6:	e060      	b.n	8002d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d11c      	bne.n	8002ce8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002cbe:	f000 f983 	bl	8002fc8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002cd0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6999      	ldr	r1, [r3, #24]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	021a      	lsls	r2, r3, #8
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	619a      	str	r2, [r3, #24]
 8002ce6:	e040      	b.n	8002d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d11b      	bne.n	8002d26 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002cfe:	f000 f9a0 	bl	8003042 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69da      	ldr	r2, [r3, #28]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 020c 	bic.w	r2, r2, #12
 8002d10:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69d9      	ldr	r1, [r3, #28]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	61da      	str	r2, [r3, #28]
 8002d24:	e021      	b.n	8002d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	d11c      	bne.n	8002d66 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002d3c:	f000 f9bd 	bl	80030ba <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002d4e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69d9      	ldr	r1, [r3, #28]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	021a      	lsls	r2, r3, #8
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	61da      	str	r2, [r3, #28]
 8002d64:	e001      	b.n	8002d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b0c      	cmp	r3, #12
 8002d8e:	d831      	bhi.n	8002df4 <HAL_TIM_ReadCapturedValue+0x78>
 8002d90:	a201      	add	r2, pc, #4	@ (adr r2, 8002d98 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002dcd 	.word	0x08002dcd
 8002d9c:	08002df5 	.word	0x08002df5
 8002da0:	08002df5 	.word	0x08002df5
 8002da4:	08002df5 	.word	0x08002df5
 8002da8:	08002dd7 	.word	0x08002dd7
 8002dac:	08002df5 	.word	0x08002df5
 8002db0:	08002df5 	.word	0x08002df5
 8002db4:	08002df5 	.word	0x08002df5
 8002db8:	08002de1 	.word	0x08002de1
 8002dbc:	08002df5 	.word	0x08002df5
 8002dc0:	08002df5 	.word	0x08002df5
 8002dc4:	08002df5 	.word	0x08002df5
 8002dc8:	08002deb 	.word	0x08002deb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd2:	60fb      	str	r3, [r7, #12]

      break;
 8002dd4:	e00f      	b.n	8002df6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ddc:	60fb      	str	r3, [r7, #12]

      break;
 8002dde:	e00a      	b.n	8002df6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de6:	60fb      	str	r3, [r7, #12]

      break;
 8002de8:	e005      	b.n	8002df6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	60fb      	str	r3, [r7, #12]

      break;
 8002df2:	e000      	b.n	8002df6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002df4:	bf00      	nop
  }

  return tmpreg;
 8002df6:	68fb      	ldr	r3, [r7, #12]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a2a      	ldr	r2, [pc, #168]	@ (8002f10 <TIM_Base_SetConfig+0xbc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_Base_SetConfig+0x20>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e72:	d108      	bne.n	8002e86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a21      	ldr	r2, [pc, #132]	@ (8002f10 <TIM_Base_SetConfig+0xbc>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00b      	beq.n	8002ea6 <TIM_Base_SetConfig+0x52>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e94:	d007      	beq.n	8002ea6 <TIM_Base_SetConfig+0x52>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1e      	ldr	r2, [pc, #120]	@ (8002f14 <TIM_Base_SetConfig+0xc0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d003      	beq.n	8002ea6 <TIM_Base_SetConfig+0x52>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f18 <TIM_Base_SetConfig+0xc4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a0c      	ldr	r2, [pc, #48]	@ (8002f10 <TIM_Base_SetConfig+0xbc>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d007      	beq.n	8002ef4 <TIM_Base_SetConfig+0xa0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8002f14 <TIM_Base_SetConfig+0xc0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <TIM_Base_SetConfig+0xa0>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <TIM_Base_SetConfig+0xc4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d103      	bne.n	8002efc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	615a      	str	r2, [r3, #20]
}
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40014000 	.word	0x40014000
 8002f18:	40014400 	.word	0x40014400

08002f1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f023 0201 	bic.w	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc0 <TIM_TI1_SetConfig+0xa4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <TIM_TI1_SetConfig+0x3e>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f50:	d003      	beq.n	8002f5a <TIM_TI1_SetConfig+0x3e>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc4 <TIM_TI1_SetConfig+0xa8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d101      	bne.n	8002f5e <TIM_TI1_SetConfig+0x42>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <TIM_TI1_SetConfig+0x44>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f023 0303 	bic.w	r3, r3, #3
 8002f6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	e003      	b.n	8002f7e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f023 030a 	bic.w	r3, r3, #10
 8002f98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f003 030a 	and.w	r3, r3, #10
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	621a      	str	r2, [r3, #32]
}
 8002fb2:	bf00      	nop
 8002fb4:	371c      	adds	r7, #28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40012c00 	.word	0x40012c00
 8002fc4:	40014000 	.word	0x40014000

08002fc8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f023 0210 	bic.w	r2, r3, #16
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	031b      	lsls	r3, r3, #12
 800300c:	b29b      	uxth	r3, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800301a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	621a      	str	r2, [r3, #32]
}
 8003036:	bf00      	nop
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003042:	b480      	push	{r7}
 8003044:	b087      	sub	sp, #28
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f023 0303 	bic.w	r3, r3, #3
 800306e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800307e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	b2db      	uxtb	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003092:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	621a      	str	r2, [r3, #32]
}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b087      	sub	sp, #28
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	031b      	lsls	r3, r3, #12
 80030fe:	b29b      	uxth	r3, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800310c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	031b      	lsls	r3, r3, #12
 8003112:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	621a      	str	r2, [r3, #32]
}
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	2201      	movs	r2, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a1a      	ldr	r2, [r3, #32]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	43db      	mvns	r3, r3
 8003156:	401a      	ands	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	fa01 f303 	lsl.w	r3, r1, r3
 800316c:	431a      	orrs	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003194:	2302      	movs	r3, #2
 8003196:	e04f      	b.n	8003238 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a21      	ldr	r2, [pc, #132]	@ (8003244 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d108      	bne.n	80031d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80031c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a14      	ldr	r2, [pc, #80]	@ (8003244 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d009      	beq.n	800320c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003200:	d004      	beq.n	800320c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a10      	ldr	r2, [pc, #64]	@ (8003248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d10c      	bne.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003212:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	4313      	orrs	r3, r2
 800321c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	40012c00 	.word	0x40012c00
 8003248:	40014000 	.word	0x40014000

0800324c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <__cvt>:
 8003288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800328c:	ec57 6b10 	vmov	r6, r7, d0
 8003290:	2f00      	cmp	r7, #0
 8003292:	460c      	mov	r4, r1
 8003294:	4619      	mov	r1, r3
 8003296:	463b      	mov	r3, r7
 8003298:	bfbb      	ittet	lt
 800329a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800329e:	461f      	movlt	r7, r3
 80032a0:	2300      	movge	r3, #0
 80032a2:	232d      	movlt	r3, #45	@ 0x2d
 80032a4:	700b      	strb	r3, [r1, #0]
 80032a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80032a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80032ac:	4691      	mov	r9, r2
 80032ae:	f023 0820 	bic.w	r8, r3, #32
 80032b2:	bfbc      	itt	lt
 80032b4:	4632      	movlt	r2, r6
 80032b6:	4616      	movlt	r6, r2
 80032b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80032bc:	d005      	beq.n	80032ca <__cvt+0x42>
 80032be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80032c2:	d100      	bne.n	80032c6 <__cvt+0x3e>
 80032c4:	3401      	adds	r4, #1
 80032c6:	2102      	movs	r1, #2
 80032c8:	e000      	b.n	80032cc <__cvt+0x44>
 80032ca:	2103      	movs	r1, #3
 80032cc:	ab03      	add	r3, sp, #12
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	ab02      	add	r3, sp, #8
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	ec47 6b10 	vmov	d0, r6, r7
 80032d8:	4653      	mov	r3, sl
 80032da:	4622      	mov	r2, r4
 80032dc:	f000 ff40 	bl	8004160 <_dtoa_r>
 80032e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80032e4:	4605      	mov	r5, r0
 80032e6:	d119      	bne.n	800331c <__cvt+0x94>
 80032e8:	f019 0f01 	tst.w	r9, #1
 80032ec:	d00e      	beq.n	800330c <__cvt+0x84>
 80032ee:	eb00 0904 	add.w	r9, r0, r4
 80032f2:	2200      	movs	r2, #0
 80032f4:	2300      	movs	r3, #0
 80032f6:	4630      	mov	r0, r6
 80032f8:	4639      	mov	r1, r7
 80032fa:	f7fd fbe5 	bl	8000ac8 <__aeabi_dcmpeq>
 80032fe:	b108      	cbz	r0, 8003304 <__cvt+0x7c>
 8003300:	f8cd 900c 	str.w	r9, [sp, #12]
 8003304:	2230      	movs	r2, #48	@ 0x30
 8003306:	9b03      	ldr	r3, [sp, #12]
 8003308:	454b      	cmp	r3, r9
 800330a:	d31e      	bcc.n	800334a <__cvt+0xc2>
 800330c:	9b03      	ldr	r3, [sp, #12]
 800330e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003310:	1b5b      	subs	r3, r3, r5
 8003312:	4628      	mov	r0, r5
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	b004      	add	sp, #16
 8003318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800331c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003320:	eb00 0904 	add.w	r9, r0, r4
 8003324:	d1e5      	bne.n	80032f2 <__cvt+0x6a>
 8003326:	7803      	ldrb	r3, [r0, #0]
 8003328:	2b30      	cmp	r3, #48	@ 0x30
 800332a:	d10a      	bne.n	8003342 <__cvt+0xba>
 800332c:	2200      	movs	r2, #0
 800332e:	2300      	movs	r3, #0
 8003330:	4630      	mov	r0, r6
 8003332:	4639      	mov	r1, r7
 8003334:	f7fd fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8003338:	b918      	cbnz	r0, 8003342 <__cvt+0xba>
 800333a:	f1c4 0401 	rsb	r4, r4, #1
 800333e:	f8ca 4000 	str.w	r4, [sl]
 8003342:	f8da 3000 	ldr.w	r3, [sl]
 8003346:	4499      	add	r9, r3
 8003348:	e7d3      	b.n	80032f2 <__cvt+0x6a>
 800334a:	1c59      	adds	r1, r3, #1
 800334c:	9103      	str	r1, [sp, #12]
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e7d9      	b.n	8003306 <__cvt+0x7e>

08003352 <__exponent>:
 8003352:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003354:	2900      	cmp	r1, #0
 8003356:	bfba      	itte	lt
 8003358:	4249      	neglt	r1, r1
 800335a:	232d      	movlt	r3, #45	@ 0x2d
 800335c:	232b      	movge	r3, #43	@ 0x2b
 800335e:	2909      	cmp	r1, #9
 8003360:	7002      	strb	r2, [r0, #0]
 8003362:	7043      	strb	r3, [r0, #1]
 8003364:	dd29      	ble.n	80033ba <__exponent+0x68>
 8003366:	f10d 0307 	add.w	r3, sp, #7
 800336a:	461d      	mov	r5, r3
 800336c:	270a      	movs	r7, #10
 800336e:	461a      	mov	r2, r3
 8003370:	fbb1 f6f7 	udiv	r6, r1, r7
 8003374:	fb07 1416 	mls	r4, r7, r6, r1
 8003378:	3430      	adds	r4, #48	@ 0x30
 800337a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800337e:	460c      	mov	r4, r1
 8003380:	2c63      	cmp	r4, #99	@ 0x63
 8003382:	f103 33ff 	add.w	r3, r3, #4294967295
 8003386:	4631      	mov	r1, r6
 8003388:	dcf1      	bgt.n	800336e <__exponent+0x1c>
 800338a:	3130      	adds	r1, #48	@ 0x30
 800338c:	1e94      	subs	r4, r2, #2
 800338e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003392:	1c41      	adds	r1, r0, #1
 8003394:	4623      	mov	r3, r4
 8003396:	42ab      	cmp	r3, r5
 8003398:	d30a      	bcc.n	80033b0 <__exponent+0x5e>
 800339a:	f10d 0309 	add.w	r3, sp, #9
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	42ac      	cmp	r4, r5
 80033a2:	bf88      	it	hi
 80033a4:	2300      	movhi	r3, #0
 80033a6:	3302      	adds	r3, #2
 80033a8:	4403      	add	r3, r0
 80033aa:	1a18      	subs	r0, r3, r0
 80033ac:	b003      	add	sp, #12
 80033ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80033b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80033b8:	e7ed      	b.n	8003396 <__exponent+0x44>
 80033ba:	2330      	movs	r3, #48	@ 0x30
 80033bc:	3130      	adds	r1, #48	@ 0x30
 80033be:	7083      	strb	r3, [r0, #2]
 80033c0:	70c1      	strb	r1, [r0, #3]
 80033c2:	1d03      	adds	r3, r0, #4
 80033c4:	e7f1      	b.n	80033aa <__exponent+0x58>
	...

080033c8 <_printf_float>:
 80033c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033cc:	b08d      	sub	sp, #52	@ 0x34
 80033ce:	460c      	mov	r4, r1
 80033d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80033d4:	4616      	mov	r6, r2
 80033d6:	461f      	mov	r7, r3
 80033d8:	4605      	mov	r5, r0
 80033da:	f000 fdbf 	bl	8003f5c <_localeconv_r>
 80033de:	6803      	ldr	r3, [r0, #0]
 80033e0:	9304      	str	r3, [sp, #16]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fc ff44 	bl	8000270 <strlen>
 80033e8:	2300      	movs	r3, #0
 80033ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80033ec:	f8d8 3000 	ldr.w	r3, [r8]
 80033f0:	9005      	str	r0, [sp, #20]
 80033f2:	3307      	adds	r3, #7
 80033f4:	f023 0307 	bic.w	r3, r3, #7
 80033f8:	f103 0208 	add.w	r2, r3, #8
 80033fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003400:	f8d4 b000 	ldr.w	fp, [r4]
 8003404:	f8c8 2000 	str.w	r2, [r8]
 8003408:	e9d3 8900 	ldrd	r8, r9, [r3]
 800340c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003410:	9307      	str	r3, [sp, #28]
 8003412:	f8cd 8018 	str.w	r8, [sp, #24]
 8003416:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800341a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800341e:	4b9c      	ldr	r3, [pc, #624]	@ (8003690 <_printf_float+0x2c8>)
 8003420:	f04f 32ff 	mov.w	r2, #4294967295
 8003424:	f7fd fb82 	bl	8000b2c <__aeabi_dcmpun>
 8003428:	bb70      	cbnz	r0, 8003488 <_printf_float+0xc0>
 800342a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800342e:	4b98      	ldr	r3, [pc, #608]	@ (8003690 <_printf_float+0x2c8>)
 8003430:	f04f 32ff 	mov.w	r2, #4294967295
 8003434:	f7fd fb5c 	bl	8000af0 <__aeabi_dcmple>
 8003438:	bb30      	cbnz	r0, 8003488 <_printf_float+0xc0>
 800343a:	2200      	movs	r2, #0
 800343c:	2300      	movs	r3, #0
 800343e:	4640      	mov	r0, r8
 8003440:	4649      	mov	r1, r9
 8003442:	f7fd fb4b 	bl	8000adc <__aeabi_dcmplt>
 8003446:	b110      	cbz	r0, 800344e <_printf_float+0x86>
 8003448:	232d      	movs	r3, #45	@ 0x2d
 800344a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800344e:	4a91      	ldr	r2, [pc, #580]	@ (8003694 <_printf_float+0x2cc>)
 8003450:	4b91      	ldr	r3, [pc, #580]	@ (8003698 <_printf_float+0x2d0>)
 8003452:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003456:	bf94      	ite	ls
 8003458:	4690      	movls	r8, r2
 800345a:	4698      	movhi	r8, r3
 800345c:	2303      	movs	r3, #3
 800345e:	6123      	str	r3, [r4, #16]
 8003460:	f02b 0304 	bic.w	r3, fp, #4
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	f04f 0900 	mov.w	r9, #0
 800346a:	9700      	str	r7, [sp, #0]
 800346c:	4633      	mov	r3, r6
 800346e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003470:	4621      	mov	r1, r4
 8003472:	4628      	mov	r0, r5
 8003474:	f000 f9d2 	bl	800381c <_printf_common>
 8003478:	3001      	adds	r0, #1
 800347a:	f040 808d 	bne.w	8003598 <_printf_float+0x1d0>
 800347e:	f04f 30ff 	mov.w	r0, #4294967295
 8003482:	b00d      	add	sp, #52	@ 0x34
 8003484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003488:	4642      	mov	r2, r8
 800348a:	464b      	mov	r3, r9
 800348c:	4640      	mov	r0, r8
 800348e:	4649      	mov	r1, r9
 8003490:	f7fd fb4c 	bl	8000b2c <__aeabi_dcmpun>
 8003494:	b140      	cbz	r0, 80034a8 <_printf_float+0xe0>
 8003496:	464b      	mov	r3, r9
 8003498:	2b00      	cmp	r3, #0
 800349a:	bfbc      	itt	lt
 800349c:	232d      	movlt	r3, #45	@ 0x2d
 800349e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80034a2:	4a7e      	ldr	r2, [pc, #504]	@ (800369c <_printf_float+0x2d4>)
 80034a4:	4b7e      	ldr	r3, [pc, #504]	@ (80036a0 <_printf_float+0x2d8>)
 80034a6:	e7d4      	b.n	8003452 <_printf_float+0x8a>
 80034a8:	6863      	ldr	r3, [r4, #4]
 80034aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80034ae:	9206      	str	r2, [sp, #24]
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	d13b      	bne.n	800352c <_printf_float+0x164>
 80034b4:	2306      	movs	r3, #6
 80034b6:	6063      	str	r3, [r4, #4]
 80034b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80034bc:	2300      	movs	r3, #0
 80034be:	6022      	str	r2, [r4, #0]
 80034c0:	9303      	str	r3, [sp, #12]
 80034c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80034c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80034c8:	ab09      	add	r3, sp, #36	@ 0x24
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	6861      	ldr	r1, [r4, #4]
 80034ce:	ec49 8b10 	vmov	d0, r8, r9
 80034d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80034d6:	4628      	mov	r0, r5
 80034d8:	f7ff fed6 	bl	8003288 <__cvt>
 80034dc:	9b06      	ldr	r3, [sp, #24]
 80034de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80034e0:	2b47      	cmp	r3, #71	@ 0x47
 80034e2:	4680      	mov	r8, r0
 80034e4:	d129      	bne.n	800353a <_printf_float+0x172>
 80034e6:	1cc8      	adds	r0, r1, #3
 80034e8:	db02      	blt.n	80034f0 <_printf_float+0x128>
 80034ea:	6863      	ldr	r3, [r4, #4]
 80034ec:	4299      	cmp	r1, r3
 80034ee:	dd41      	ble.n	8003574 <_printf_float+0x1ac>
 80034f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80034f4:	fa5f fa8a 	uxtb.w	sl, sl
 80034f8:	3901      	subs	r1, #1
 80034fa:	4652      	mov	r2, sl
 80034fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003500:	9109      	str	r1, [sp, #36]	@ 0x24
 8003502:	f7ff ff26 	bl	8003352 <__exponent>
 8003506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003508:	1813      	adds	r3, r2, r0
 800350a:	2a01      	cmp	r2, #1
 800350c:	4681      	mov	r9, r0
 800350e:	6123      	str	r3, [r4, #16]
 8003510:	dc02      	bgt.n	8003518 <_printf_float+0x150>
 8003512:	6822      	ldr	r2, [r4, #0]
 8003514:	07d2      	lsls	r2, r2, #31
 8003516:	d501      	bpl.n	800351c <_printf_float+0x154>
 8003518:	3301      	adds	r3, #1
 800351a:	6123      	str	r3, [r4, #16]
 800351c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0a2      	beq.n	800346a <_printf_float+0xa2>
 8003524:	232d      	movs	r3, #45	@ 0x2d
 8003526:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800352a:	e79e      	b.n	800346a <_printf_float+0xa2>
 800352c:	9a06      	ldr	r2, [sp, #24]
 800352e:	2a47      	cmp	r2, #71	@ 0x47
 8003530:	d1c2      	bne.n	80034b8 <_printf_float+0xf0>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1c0      	bne.n	80034b8 <_printf_float+0xf0>
 8003536:	2301      	movs	r3, #1
 8003538:	e7bd      	b.n	80034b6 <_printf_float+0xee>
 800353a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800353e:	d9db      	bls.n	80034f8 <_printf_float+0x130>
 8003540:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003544:	d118      	bne.n	8003578 <_printf_float+0x1b0>
 8003546:	2900      	cmp	r1, #0
 8003548:	6863      	ldr	r3, [r4, #4]
 800354a:	dd0b      	ble.n	8003564 <_printf_float+0x19c>
 800354c:	6121      	str	r1, [r4, #16]
 800354e:	b913      	cbnz	r3, 8003556 <_printf_float+0x18e>
 8003550:	6822      	ldr	r2, [r4, #0]
 8003552:	07d0      	lsls	r0, r2, #31
 8003554:	d502      	bpl.n	800355c <_printf_float+0x194>
 8003556:	3301      	adds	r3, #1
 8003558:	440b      	add	r3, r1
 800355a:	6123      	str	r3, [r4, #16]
 800355c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800355e:	f04f 0900 	mov.w	r9, #0
 8003562:	e7db      	b.n	800351c <_printf_float+0x154>
 8003564:	b913      	cbnz	r3, 800356c <_printf_float+0x1a4>
 8003566:	6822      	ldr	r2, [r4, #0]
 8003568:	07d2      	lsls	r2, r2, #31
 800356a:	d501      	bpl.n	8003570 <_printf_float+0x1a8>
 800356c:	3302      	adds	r3, #2
 800356e:	e7f4      	b.n	800355a <_printf_float+0x192>
 8003570:	2301      	movs	r3, #1
 8003572:	e7f2      	b.n	800355a <_printf_float+0x192>
 8003574:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800357a:	4299      	cmp	r1, r3
 800357c:	db05      	blt.n	800358a <_printf_float+0x1c2>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	6121      	str	r1, [r4, #16]
 8003582:	07d8      	lsls	r0, r3, #31
 8003584:	d5ea      	bpl.n	800355c <_printf_float+0x194>
 8003586:	1c4b      	adds	r3, r1, #1
 8003588:	e7e7      	b.n	800355a <_printf_float+0x192>
 800358a:	2900      	cmp	r1, #0
 800358c:	bfd4      	ite	le
 800358e:	f1c1 0202 	rsble	r2, r1, #2
 8003592:	2201      	movgt	r2, #1
 8003594:	4413      	add	r3, r2
 8003596:	e7e0      	b.n	800355a <_printf_float+0x192>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	055a      	lsls	r2, r3, #21
 800359c:	d407      	bmi.n	80035ae <_printf_float+0x1e6>
 800359e:	6923      	ldr	r3, [r4, #16]
 80035a0:	4642      	mov	r2, r8
 80035a2:	4631      	mov	r1, r6
 80035a4:	4628      	mov	r0, r5
 80035a6:	47b8      	blx	r7
 80035a8:	3001      	adds	r0, #1
 80035aa:	d12b      	bne.n	8003604 <_printf_float+0x23c>
 80035ac:	e767      	b.n	800347e <_printf_float+0xb6>
 80035ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80035b2:	f240 80dd 	bls.w	8003770 <_printf_float+0x3a8>
 80035b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80035ba:	2200      	movs	r2, #0
 80035bc:	2300      	movs	r3, #0
 80035be:	f7fd fa83 	bl	8000ac8 <__aeabi_dcmpeq>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d033      	beq.n	800362e <_printf_float+0x266>
 80035c6:	4a37      	ldr	r2, [pc, #220]	@ (80036a4 <_printf_float+0x2dc>)
 80035c8:	2301      	movs	r3, #1
 80035ca:	4631      	mov	r1, r6
 80035cc:	4628      	mov	r0, r5
 80035ce:	47b8      	blx	r7
 80035d0:	3001      	adds	r0, #1
 80035d2:	f43f af54 	beq.w	800347e <_printf_float+0xb6>
 80035d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80035da:	4543      	cmp	r3, r8
 80035dc:	db02      	blt.n	80035e4 <_printf_float+0x21c>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	07d8      	lsls	r0, r3, #31
 80035e2:	d50f      	bpl.n	8003604 <_printf_float+0x23c>
 80035e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035e8:	4631      	mov	r1, r6
 80035ea:	4628      	mov	r0, r5
 80035ec:	47b8      	blx	r7
 80035ee:	3001      	adds	r0, #1
 80035f0:	f43f af45 	beq.w	800347e <_printf_float+0xb6>
 80035f4:	f04f 0900 	mov.w	r9, #0
 80035f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80035fc:	f104 0a1a 	add.w	sl, r4, #26
 8003600:	45c8      	cmp	r8, r9
 8003602:	dc09      	bgt.n	8003618 <_printf_float+0x250>
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	079b      	lsls	r3, r3, #30
 8003608:	f100 8103 	bmi.w	8003812 <_printf_float+0x44a>
 800360c:	68e0      	ldr	r0, [r4, #12]
 800360e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003610:	4298      	cmp	r0, r3
 8003612:	bfb8      	it	lt
 8003614:	4618      	movlt	r0, r3
 8003616:	e734      	b.n	8003482 <_printf_float+0xba>
 8003618:	2301      	movs	r3, #1
 800361a:	4652      	mov	r2, sl
 800361c:	4631      	mov	r1, r6
 800361e:	4628      	mov	r0, r5
 8003620:	47b8      	blx	r7
 8003622:	3001      	adds	r0, #1
 8003624:	f43f af2b 	beq.w	800347e <_printf_float+0xb6>
 8003628:	f109 0901 	add.w	r9, r9, #1
 800362c:	e7e8      	b.n	8003600 <_printf_float+0x238>
 800362e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003630:	2b00      	cmp	r3, #0
 8003632:	dc39      	bgt.n	80036a8 <_printf_float+0x2e0>
 8003634:	4a1b      	ldr	r2, [pc, #108]	@ (80036a4 <_printf_float+0x2dc>)
 8003636:	2301      	movs	r3, #1
 8003638:	4631      	mov	r1, r6
 800363a:	4628      	mov	r0, r5
 800363c:	47b8      	blx	r7
 800363e:	3001      	adds	r0, #1
 8003640:	f43f af1d 	beq.w	800347e <_printf_float+0xb6>
 8003644:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003648:	ea59 0303 	orrs.w	r3, r9, r3
 800364c:	d102      	bne.n	8003654 <_printf_float+0x28c>
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	07d9      	lsls	r1, r3, #31
 8003652:	d5d7      	bpl.n	8003604 <_printf_float+0x23c>
 8003654:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003658:	4631      	mov	r1, r6
 800365a:	4628      	mov	r0, r5
 800365c:	47b8      	blx	r7
 800365e:	3001      	adds	r0, #1
 8003660:	f43f af0d 	beq.w	800347e <_printf_float+0xb6>
 8003664:	f04f 0a00 	mov.w	sl, #0
 8003668:	f104 0b1a 	add.w	fp, r4, #26
 800366c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800366e:	425b      	negs	r3, r3
 8003670:	4553      	cmp	r3, sl
 8003672:	dc01      	bgt.n	8003678 <_printf_float+0x2b0>
 8003674:	464b      	mov	r3, r9
 8003676:	e793      	b.n	80035a0 <_printf_float+0x1d8>
 8003678:	2301      	movs	r3, #1
 800367a:	465a      	mov	r2, fp
 800367c:	4631      	mov	r1, r6
 800367e:	4628      	mov	r0, r5
 8003680:	47b8      	blx	r7
 8003682:	3001      	adds	r0, #1
 8003684:	f43f aefb 	beq.w	800347e <_printf_float+0xb6>
 8003688:	f10a 0a01 	add.w	sl, sl, #1
 800368c:	e7ee      	b.n	800366c <_printf_float+0x2a4>
 800368e:	bf00      	nop
 8003690:	7fefffff 	.word	0x7fefffff
 8003694:	08005ce4 	.word	0x08005ce4
 8003698:	08005ce8 	.word	0x08005ce8
 800369c:	08005cec 	.word	0x08005cec
 80036a0:	08005cf0 	.word	0x08005cf0
 80036a4:	08005cf4 	.word	0x08005cf4
 80036a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80036ae:	4553      	cmp	r3, sl
 80036b0:	bfa8      	it	ge
 80036b2:	4653      	movge	r3, sl
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	4699      	mov	r9, r3
 80036b8:	dc36      	bgt.n	8003728 <_printf_float+0x360>
 80036ba:	f04f 0b00 	mov.w	fp, #0
 80036be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036c2:	f104 021a 	add.w	r2, r4, #26
 80036c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036c8:	9306      	str	r3, [sp, #24]
 80036ca:	eba3 0309 	sub.w	r3, r3, r9
 80036ce:	455b      	cmp	r3, fp
 80036d0:	dc31      	bgt.n	8003736 <_printf_float+0x36e>
 80036d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036d4:	459a      	cmp	sl, r3
 80036d6:	dc3a      	bgt.n	800374e <_printf_float+0x386>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	07da      	lsls	r2, r3, #31
 80036dc:	d437      	bmi.n	800374e <_printf_float+0x386>
 80036de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036e0:	ebaa 0903 	sub.w	r9, sl, r3
 80036e4:	9b06      	ldr	r3, [sp, #24]
 80036e6:	ebaa 0303 	sub.w	r3, sl, r3
 80036ea:	4599      	cmp	r9, r3
 80036ec:	bfa8      	it	ge
 80036ee:	4699      	movge	r9, r3
 80036f0:	f1b9 0f00 	cmp.w	r9, #0
 80036f4:	dc33      	bgt.n	800375e <_printf_float+0x396>
 80036f6:	f04f 0800 	mov.w	r8, #0
 80036fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036fe:	f104 0b1a 	add.w	fp, r4, #26
 8003702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003704:	ebaa 0303 	sub.w	r3, sl, r3
 8003708:	eba3 0309 	sub.w	r3, r3, r9
 800370c:	4543      	cmp	r3, r8
 800370e:	f77f af79 	ble.w	8003604 <_printf_float+0x23c>
 8003712:	2301      	movs	r3, #1
 8003714:	465a      	mov	r2, fp
 8003716:	4631      	mov	r1, r6
 8003718:	4628      	mov	r0, r5
 800371a:	47b8      	blx	r7
 800371c:	3001      	adds	r0, #1
 800371e:	f43f aeae 	beq.w	800347e <_printf_float+0xb6>
 8003722:	f108 0801 	add.w	r8, r8, #1
 8003726:	e7ec      	b.n	8003702 <_printf_float+0x33a>
 8003728:	4642      	mov	r2, r8
 800372a:	4631      	mov	r1, r6
 800372c:	4628      	mov	r0, r5
 800372e:	47b8      	blx	r7
 8003730:	3001      	adds	r0, #1
 8003732:	d1c2      	bne.n	80036ba <_printf_float+0x2f2>
 8003734:	e6a3      	b.n	800347e <_printf_float+0xb6>
 8003736:	2301      	movs	r3, #1
 8003738:	4631      	mov	r1, r6
 800373a:	4628      	mov	r0, r5
 800373c:	9206      	str	r2, [sp, #24]
 800373e:	47b8      	blx	r7
 8003740:	3001      	adds	r0, #1
 8003742:	f43f ae9c 	beq.w	800347e <_printf_float+0xb6>
 8003746:	9a06      	ldr	r2, [sp, #24]
 8003748:	f10b 0b01 	add.w	fp, fp, #1
 800374c:	e7bb      	b.n	80036c6 <_printf_float+0x2fe>
 800374e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003752:	4631      	mov	r1, r6
 8003754:	4628      	mov	r0, r5
 8003756:	47b8      	blx	r7
 8003758:	3001      	adds	r0, #1
 800375a:	d1c0      	bne.n	80036de <_printf_float+0x316>
 800375c:	e68f      	b.n	800347e <_printf_float+0xb6>
 800375e:	9a06      	ldr	r2, [sp, #24]
 8003760:	464b      	mov	r3, r9
 8003762:	4442      	add	r2, r8
 8003764:	4631      	mov	r1, r6
 8003766:	4628      	mov	r0, r5
 8003768:	47b8      	blx	r7
 800376a:	3001      	adds	r0, #1
 800376c:	d1c3      	bne.n	80036f6 <_printf_float+0x32e>
 800376e:	e686      	b.n	800347e <_printf_float+0xb6>
 8003770:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003774:	f1ba 0f01 	cmp.w	sl, #1
 8003778:	dc01      	bgt.n	800377e <_printf_float+0x3b6>
 800377a:	07db      	lsls	r3, r3, #31
 800377c:	d536      	bpl.n	80037ec <_printf_float+0x424>
 800377e:	2301      	movs	r3, #1
 8003780:	4642      	mov	r2, r8
 8003782:	4631      	mov	r1, r6
 8003784:	4628      	mov	r0, r5
 8003786:	47b8      	blx	r7
 8003788:	3001      	adds	r0, #1
 800378a:	f43f ae78 	beq.w	800347e <_printf_float+0xb6>
 800378e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003792:	4631      	mov	r1, r6
 8003794:	4628      	mov	r0, r5
 8003796:	47b8      	blx	r7
 8003798:	3001      	adds	r0, #1
 800379a:	f43f ae70 	beq.w	800347e <_printf_float+0xb6>
 800379e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80037a2:	2200      	movs	r2, #0
 80037a4:	2300      	movs	r3, #0
 80037a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80037aa:	f7fd f98d 	bl	8000ac8 <__aeabi_dcmpeq>
 80037ae:	b9c0      	cbnz	r0, 80037e2 <_printf_float+0x41a>
 80037b0:	4653      	mov	r3, sl
 80037b2:	f108 0201 	add.w	r2, r8, #1
 80037b6:	4631      	mov	r1, r6
 80037b8:	4628      	mov	r0, r5
 80037ba:	47b8      	blx	r7
 80037bc:	3001      	adds	r0, #1
 80037be:	d10c      	bne.n	80037da <_printf_float+0x412>
 80037c0:	e65d      	b.n	800347e <_printf_float+0xb6>
 80037c2:	2301      	movs	r3, #1
 80037c4:	465a      	mov	r2, fp
 80037c6:	4631      	mov	r1, r6
 80037c8:	4628      	mov	r0, r5
 80037ca:	47b8      	blx	r7
 80037cc:	3001      	adds	r0, #1
 80037ce:	f43f ae56 	beq.w	800347e <_printf_float+0xb6>
 80037d2:	f108 0801 	add.w	r8, r8, #1
 80037d6:	45d0      	cmp	r8, sl
 80037d8:	dbf3      	blt.n	80037c2 <_printf_float+0x3fa>
 80037da:	464b      	mov	r3, r9
 80037dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80037e0:	e6df      	b.n	80035a2 <_printf_float+0x1da>
 80037e2:	f04f 0800 	mov.w	r8, #0
 80037e6:	f104 0b1a 	add.w	fp, r4, #26
 80037ea:	e7f4      	b.n	80037d6 <_printf_float+0x40e>
 80037ec:	2301      	movs	r3, #1
 80037ee:	4642      	mov	r2, r8
 80037f0:	e7e1      	b.n	80037b6 <_printf_float+0x3ee>
 80037f2:	2301      	movs	r3, #1
 80037f4:	464a      	mov	r2, r9
 80037f6:	4631      	mov	r1, r6
 80037f8:	4628      	mov	r0, r5
 80037fa:	47b8      	blx	r7
 80037fc:	3001      	adds	r0, #1
 80037fe:	f43f ae3e 	beq.w	800347e <_printf_float+0xb6>
 8003802:	f108 0801 	add.w	r8, r8, #1
 8003806:	68e3      	ldr	r3, [r4, #12]
 8003808:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800380a:	1a5b      	subs	r3, r3, r1
 800380c:	4543      	cmp	r3, r8
 800380e:	dcf0      	bgt.n	80037f2 <_printf_float+0x42a>
 8003810:	e6fc      	b.n	800360c <_printf_float+0x244>
 8003812:	f04f 0800 	mov.w	r8, #0
 8003816:	f104 0919 	add.w	r9, r4, #25
 800381a:	e7f4      	b.n	8003806 <_printf_float+0x43e>

0800381c <_printf_common>:
 800381c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003820:	4616      	mov	r6, r2
 8003822:	4698      	mov	r8, r3
 8003824:	688a      	ldr	r2, [r1, #8]
 8003826:	690b      	ldr	r3, [r1, #16]
 8003828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800382c:	4293      	cmp	r3, r2
 800382e:	bfb8      	it	lt
 8003830:	4613      	movlt	r3, r2
 8003832:	6033      	str	r3, [r6, #0]
 8003834:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003838:	4607      	mov	r7, r0
 800383a:	460c      	mov	r4, r1
 800383c:	b10a      	cbz	r2, 8003842 <_printf_common+0x26>
 800383e:	3301      	adds	r3, #1
 8003840:	6033      	str	r3, [r6, #0]
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	0699      	lsls	r1, r3, #26
 8003846:	bf42      	ittt	mi
 8003848:	6833      	ldrmi	r3, [r6, #0]
 800384a:	3302      	addmi	r3, #2
 800384c:	6033      	strmi	r3, [r6, #0]
 800384e:	6825      	ldr	r5, [r4, #0]
 8003850:	f015 0506 	ands.w	r5, r5, #6
 8003854:	d106      	bne.n	8003864 <_printf_common+0x48>
 8003856:	f104 0a19 	add.w	sl, r4, #25
 800385a:	68e3      	ldr	r3, [r4, #12]
 800385c:	6832      	ldr	r2, [r6, #0]
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	42ab      	cmp	r3, r5
 8003862:	dc26      	bgt.n	80038b2 <_printf_common+0x96>
 8003864:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003868:	6822      	ldr	r2, [r4, #0]
 800386a:	3b00      	subs	r3, #0
 800386c:	bf18      	it	ne
 800386e:	2301      	movne	r3, #1
 8003870:	0692      	lsls	r2, r2, #26
 8003872:	d42b      	bmi.n	80038cc <_printf_common+0xb0>
 8003874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003878:	4641      	mov	r1, r8
 800387a:	4638      	mov	r0, r7
 800387c:	47c8      	blx	r9
 800387e:	3001      	adds	r0, #1
 8003880:	d01e      	beq.n	80038c0 <_printf_common+0xa4>
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	6922      	ldr	r2, [r4, #16]
 8003886:	f003 0306 	and.w	r3, r3, #6
 800388a:	2b04      	cmp	r3, #4
 800388c:	bf02      	ittt	eq
 800388e:	68e5      	ldreq	r5, [r4, #12]
 8003890:	6833      	ldreq	r3, [r6, #0]
 8003892:	1aed      	subeq	r5, r5, r3
 8003894:	68a3      	ldr	r3, [r4, #8]
 8003896:	bf0c      	ite	eq
 8003898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800389c:	2500      	movne	r5, #0
 800389e:	4293      	cmp	r3, r2
 80038a0:	bfc4      	itt	gt
 80038a2:	1a9b      	subgt	r3, r3, r2
 80038a4:	18ed      	addgt	r5, r5, r3
 80038a6:	2600      	movs	r6, #0
 80038a8:	341a      	adds	r4, #26
 80038aa:	42b5      	cmp	r5, r6
 80038ac:	d11a      	bne.n	80038e4 <_printf_common+0xc8>
 80038ae:	2000      	movs	r0, #0
 80038b0:	e008      	b.n	80038c4 <_printf_common+0xa8>
 80038b2:	2301      	movs	r3, #1
 80038b4:	4652      	mov	r2, sl
 80038b6:	4641      	mov	r1, r8
 80038b8:	4638      	mov	r0, r7
 80038ba:	47c8      	blx	r9
 80038bc:	3001      	adds	r0, #1
 80038be:	d103      	bne.n	80038c8 <_printf_common+0xac>
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295
 80038c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c8:	3501      	adds	r5, #1
 80038ca:	e7c6      	b.n	800385a <_printf_common+0x3e>
 80038cc:	18e1      	adds	r1, r4, r3
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	2030      	movs	r0, #48	@ 0x30
 80038d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038d6:	4422      	add	r2, r4
 80038d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038e0:	3302      	adds	r3, #2
 80038e2:	e7c7      	b.n	8003874 <_printf_common+0x58>
 80038e4:	2301      	movs	r3, #1
 80038e6:	4622      	mov	r2, r4
 80038e8:	4641      	mov	r1, r8
 80038ea:	4638      	mov	r0, r7
 80038ec:	47c8      	blx	r9
 80038ee:	3001      	adds	r0, #1
 80038f0:	d0e6      	beq.n	80038c0 <_printf_common+0xa4>
 80038f2:	3601      	adds	r6, #1
 80038f4:	e7d9      	b.n	80038aa <_printf_common+0x8e>
	...

080038f8 <_printf_i>:
 80038f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038fc:	7e0f      	ldrb	r7, [r1, #24]
 80038fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003900:	2f78      	cmp	r7, #120	@ 0x78
 8003902:	4691      	mov	r9, r2
 8003904:	4680      	mov	r8, r0
 8003906:	460c      	mov	r4, r1
 8003908:	469a      	mov	sl, r3
 800390a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800390e:	d807      	bhi.n	8003920 <_printf_i+0x28>
 8003910:	2f62      	cmp	r7, #98	@ 0x62
 8003912:	d80a      	bhi.n	800392a <_printf_i+0x32>
 8003914:	2f00      	cmp	r7, #0
 8003916:	f000 80d2 	beq.w	8003abe <_printf_i+0x1c6>
 800391a:	2f58      	cmp	r7, #88	@ 0x58
 800391c:	f000 80b9 	beq.w	8003a92 <_printf_i+0x19a>
 8003920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003924:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003928:	e03a      	b.n	80039a0 <_printf_i+0xa8>
 800392a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800392e:	2b15      	cmp	r3, #21
 8003930:	d8f6      	bhi.n	8003920 <_printf_i+0x28>
 8003932:	a101      	add	r1, pc, #4	@ (adr r1, 8003938 <_printf_i+0x40>)
 8003934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003938:	08003991 	.word	0x08003991
 800393c:	080039a5 	.word	0x080039a5
 8003940:	08003921 	.word	0x08003921
 8003944:	08003921 	.word	0x08003921
 8003948:	08003921 	.word	0x08003921
 800394c:	08003921 	.word	0x08003921
 8003950:	080039a5 	.word	0x080039a5
 8003954:	08003921 	.word	0x08003921
 8003958:	08003921 	.word	0x08003921
 800395c:	08003921 	.word	0x08003921
 8003960:	08003921 	.word	0x08003921
 8003964:	08003aa5 	.word	0x08003aa5
 8003968:	080039cf 	.word	0x080039cf
 800396c:	08003a5f 	.word	0x08003a5f
 8003970:	08003921 	.word	0x08003921
 8003974:	08003921 	.word	0x08003921
 8003978:	08003ac7 	.word	0x08003ac7
 800397c:	08003921 	.word	0x08003921
 8003980:	080039cf 	.word	0x080039cf
 8003984:	08003921 	.word	0x08003921
 8003988:	08003921 	.word	0x08003921
 800398c:	08003a67 	.word	0x08003a67
 8003990:	6833      	ldr	r3, [r6, #0]
 8003992:	1d1a      	adds	r2, r3, #4
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6032      	str	r2, [r6, #0]
 8003998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800399c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039a0:	2301      	movs	r3, #1
 80039a2:	e09d      	b.n	8003ae0 <_printf_i+0x1e8>
 80039a4:	6833      	ldr	r3, [r6, #0]
 80039a6:	6820      	ldr	r0, [r4, #0]
 80039a8:	1d19      	adds	r1, r3, #4
 80039aa:	6031      	str	r1, [r6, #0]
 80039ac:	0606      	lsls	r6, r0, #24
 80039ae:	d501      	bpl.n	80039b4 <_printf_i+0xbc>
 80039b0:	681d      	ldr	r5, [r3, #0]
 80039b2:	e003      	b.n	80039bc <_printf_i+0xc4>
 80039b4:	0645      	lsls	r5, r0, #25
 80039b6:	d5fb      	bpl.n	80039b0 <_printf_i+0xb8>
 80039b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039bc:	2d00      	cmp	r5, #0
 80039be:	da03      	bge.n	80039c8 <_printf_i+0xd0>
 80039c0:	232d      	movs	r3, #45	@ 0x2d
 80039c2:	426d      	negs	r5, r5
 80039c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039c8:	4859      	ldr	r0, [pc, #356]	@ (8003b30 <_printf_i+0x238>)
 80039ca:	230a      	movs	r3, #10
 80039cc:	e011      	b.n	80039f2 <_printf_i+0xfa>
 80039ce:	6821      	ldr	r1, [r4, #0]
 80039d0:	6833      	ldr	r3, [r6, #0]
 80039d2:	0608      	lsls	r0, r1, #24
 80039d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80039d8:	d402      	bmi.n	80039e0 <_printf_i+0xe8>
 80039da:	0649      	lsls	r1, r1, #25
 80039dc:	bf48      	it	mi
 80039de:	b2ad      	uxthmi	r5, r5
 80039e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80039e2:	4853      	ldr	r0, [pc, #332]	@ (8003b30 <_printf_i+0x238>)
 80039e4:	6033      	str	r3, [r6, #0]
 80039e6:	bf14      	ite	ne
 80039e8:	230a      	movne	r3, #10
 80039ea:	2308      	moveq	r3, #8
 80039ec:	2100      	movs	r1, #0
 80039ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80039f2:	6866      	ldr	r6, [r4, #4]
 80039f4:	60a6      	str	r6, [r4, #8]
 80039f6:	2e00      	cmp	r6, #0
 80039f8:	bfa2      	ittt	ge
 80039fa:	6821      	ldrge	r1, [r4, #0]
 80039fc:	f021 0104 	bicge.w	r1, r1, #4
 8003a00:	6021      	strge	r1, [r4, #0]
 8003a02:	b90d      	cbnz	r5, 8003a08 <_printf_i+0x110>
 8003a04:	2e00      	cmp	r6, #0
 8003a06:	d04b      	beq.n	8003aa0 <_printf_i+0x1a8>
 8003a08:	4616      	mov	r6, r2
 8003a0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a0e:	fb03 5711 	mls	r7, r3, r1, r5
 8003a12:	5dc7      	ldrb	r7, [r0, r7]
 8003a14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a18:	462f      	mov	r7, r5
 8003a1a:	42bb      	cmp	r3, r7
 8003a1c:	460d      	mov	r5, r1
 8003a1e:	d9f4      	bls.n	8003a0a <_printf_i+0x112>
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d10b      	bne.n	8003a3c <_printf_i+0x144>
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	07df      	lsls	r7, r3, #31
 8003a28:	d508      	bpl.n	8003a3c <_printf_i+0x144>
 8003a2a:	6923      	ldr	r3, [r4, #16]
 8003a2c:	6861      	ldr	r1, [r4, #4]
 8003a2e:	4299      	cmp	r1, r3
 8003a30:	bfde      	ittt	le
 8003a32:	2330      	movle	r3, #48	@ 0x30
 8003a34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a3c:	1b92      	subs	r2, r2, r6
 8003a3e:	6122      	str	r2, [r4, #16]
 8003a40:	f8cd a000 	str.w	sl, [sp]
 8003a44:	464b      	mov	r3, r9
 8003a46:	aa03      	add	r2, sp, #12
 8003a48:	4621      	mov	r1, r4
 8003a4a:	4640      	mov	r0, r8
 8003a4c:	f7ff fee6 	bl	800381c <_printf_common>
 8003a50:	3001      	adds	r0, #1
 8003a52:	d14a      	bne.n	8003aea <_printf_i+0x1f2>
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	b004      	add	sp, #16
 8003a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	f043 0320 	orr.w	r3, r3, #32
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	4833      	ldr	r0, [pc, #204]	@ (8003b34 <_printf_i+0x23c>)
 8003a68:	2778      	movs	r7, #120	@ 0x78
 8003a6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	6831      	ldr	r1, [r6, #0]
 8003a72:	061f      	lsls	r7, r3, #24
 8003a74:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a78:	d402      	bmi.n	8003a80 <_printf_i+0x188>
 8003a7a:	065f      	lsls	r7, r3, #25
 8003a7c:	bf48      	it	mi
 8003a7e:	b2ad      	uxthmi	r5, r5
 8003a80:	6031      	str	r1, [r6, #0]
 8003a82:	07d9      	lsls	r1, r3, #31
 8003a84:	bf44      	itt	mi
 8003a86:	f043 0320 	orrmi.w	r3, r3, #32
 8003a8a:	6023      	strmi	r3, [r4, #0]
 8003a8c:	b11d      	cbz	r5, 8003a96 <_printf_i+0x19e>
 8003a8e:	2310      	movs	r3, #16
 8003a90:	e7ac      	b.n	80039ec <_printf_i+0xf4>
 8003a92:	4827      	ldr	r0, [pc, #156]	@ (8003b30 <_printf_i+0x238>)
 8003a94:	e7e9      	b.n	8003a6a <_printf_i+0x172>
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	f023 0320 	bic.w	r3, r3, #32
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	e7f6      	b.n	8003a8e <_printf_i+0x196>
 8003aa0:	4616      	mov	r6, r2
 8003aa2:	e7bd      	b.n	8003a20 <_printf_i+0x128>
 8003aa4:	6833      	ldr	r3, [r6, #0]
 8003aa6:	6825      	ldr	r5, [r4, #0]
 8003aa8:	6961      	ldr	r1, [r4, #20]
 8003aaa:	1d18      	adds	r0, r3, #4
 8003aac:	6030      	str	r0, [r6, #0]
 8003aae:	062e      	lsls	r6, r5, #24
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	d501      	bpl.n	8003ab8 <_printf_i+0x1c0>
 8003ab4:	6019      	str	r1, [r3, #0]
 8003ab6:	e002      	b.n	8003abe <_printf_i+0x1c6>
 8003ab8:	0668      	lsls	r0, r5, #25
 8003aba:	d5fb      	bpl.n	8003ab4 <_printf_i+0x1bc>
 8003abc:	8019      	strh	r1, [r3, #0]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	6123      	str	r3, [r4, #16]
 8003ac2:	4616      	mov	r6, r2
 8003ac4:	e7bc      	b.n	8003a40 <_printf_i+0x148>
 8003ac6:	6833      	ldr	r3, [r6, #0]
 8003ac8:	1d1a      	adds	r2, r3, #4
 8003aca:	6032      	str	r2, [r6, #0]
 8003acc:	681e      	ldr	r6, [r3, #0]
 8003ace:	6862      	ldr	r2, [r4, #4]
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	f7fc fb7c 	bl	80001d0 <memchr>
 8003ad8:	b108      	cbz	r0, 8003ade <_printf_i+0x1e6>
 8003ada:	1b80      	subs	r0, r0, r6
 8003adc:	6060      	str	r0, [r4, #4]
 8003ade:	6863      	ldr	r3, [r4, #4]
 8003ae0:	6123      	str	r3, [r4, #16]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ae8:	e7aa      	b.n	8003a40 <_printf_i+0x148>
 8003aea:	6923      	ldr	r3, [r4, #16]
 8003aec:	4632      	mov	r2, r6
 8003aee:	4649      	mov	r1, r9
 8003af0:	4640      	mov	r0, r8
 8003af2:	47d0      	blx	sl
 8003af4:	3001      	adds	r0, #1
 8003af6:	d0ad      	beq.n	8003a54 <_printf_i+0x15c>
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	079b      	lsls	r3, r3, #30
 8003afc:	d413      	bmi.n	8003b26 <_printf_i+0x22e>
 8003afe:	68e0      	ldr	r0, [r4, #12]
 8003b00:	9b03      	ldr	r3, [sp, #12]
 8003b02:	4298      	cmp	r0, r3
 8003b04:	bfb8      	it	lt
 8003b06:	4618      	movlt	r0, r3
 8003b08:	e7a6      	b.n	8003a58 <_printf_i+0x160>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	4632      	mov	r2, r6
 8003b0e:	4649      	mov	r1, r9
 8003b10:	4640      	mov	r0, r8
 8003b12:	47d0      	blx	sl
 8003b14:	3001      	adds	r0, #1
 8003b16:	d09d      	beq.n	8003a54 <_printf_i+0x15c>
 8003b18:	3501      	adds	r5, #1
 8003b1a:	68e3      	ldr	r3, [r4, #12]
 8003b1c:	9903      	ldr	r1, [sp, #12]
 8003b1e:	1a5b      	subs	r3, r3, r1
 8003b20:	42ab      	cmp	r3, r5
 8003b22:	dcf2      	bgt.n	8003b0a <_printf_i+0x212>
 8003b24:	e7eb      	b.n	8003afe <_printf_i+0x206>
 8003b26:	2500      	movs	r5, #0
 8003b28:	f104 0619 	add.w	r6, r4, #25
 8003b2c:	e7f5      	b.n	8003b1a <_printf_i+0x222>
 8003b2e:	bf00      	nop
 8003b30:	08005cf6 	.word	0x08005cf6
 8003b34:	08005d07 	.word	0x08005d07

08003b38 <std>:
 8003b38:	2300      	movs	r3, #0
 8003b3a:	b510      	push	{r4, lr}
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8003b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b46:	6083      	str	r3, [r0, #8]
 8003b48:	8181      	strh	r1, [r0, #12]
 8003b4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b4c:	81c2      	strh	r2, [r0, #14]
 8003b4e:	6183      	str	r3, [r0, #24]
 8003b50:	4619      	mov	r1, r3
 8003b52:	2208      	movs	r2, #8
 8003b54:	305c      	adds	r0, #92	@ 0x5c
 8003b56:	f000 f9f9 	bl	8003f4c <memset>
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b90 <std+0x58>)
 8003b5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <std+0x5c>)
 8003b60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b62:	4b0d      	ldr	r3, [pc, #52]	@ (8003b98 <std+0x60>)
 8003b64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b66:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <std+0x64>)
 8003b68:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba0 <std+0x68>)
 8003b6c:	6224      	str	r4, [r4, #32]
 8003b6e:	429c      	cmp	r4, r3
 8003b70:	d006      	beq.n	8003b80 <std+0x48>
 8003b72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b76:	4294      	cmp	r4, r2
 8003b78:	d002      	beq.n	8003b80 <std+0x48>
 8003b7a:	33d0      	adds	r3, #208	@ 0xd0
 8003b7c:	429c      	cmp	r4, r3
 8003b7e:	d105      	bne.n	8003b8c <std+0x54>
 8003b80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b88:	f000 ba5c 	b.w	8004044 <__retarget_lock_init_recursive>
 8003b8c:	bd10      	pop	{r4, pc}
 8003b8e:	bf00      	nop
 8003b90:	08003d9d 	.word	0x08003d9d
 8003b94:	08003dbf 	.word	0x08003dbf
 8003b98:	08003df7 	.word	0x08003df7
 8003b9c:	08003e1b 	.word	0x08003e1b
 8003ba0:	20000254 	.word	0x20000254

08003ba4 <stdio_exit_handler>:
 8003ba4:	4a02      	ldr	r2, [pc, #8]	@ (8003bb0 <stdio_exit_handler+0xc>)
 8003ba6:	4903      	ldr	r1, [pc, #12]	@ (8003bb4 <stdio_exit_handler+0x10>)
 8003ba8:	4803      	ldr	r0, [pc, #12]	@ (8003bb8 <stdio_exit_handler+0x14>)
 8003baa:	f000 b869 	b.w	8003c80 <_fwalk_sglue>
 8003bae:	bf00      	nop
 8003bb0:	2000000c 	.word	0x2000000c
 8003bb4:	08005979 	.word	0x08005979
 8003bb8:	2000001c 	.word	0x2000001c

08003bbc <cleanup_stdio>:
 8003bbc:	6841      	ldr	r1, [r0, #4]
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf0 <cleanup_stdio+0x34>)
 8003bc0:	4299      	cmp	r1, r3
 8003bc2:	b510      	push	{r4, lr}
 8003bc4:	4604      	mov	r4, r0
 8003bc6:	d001      	beq.n	8003bcc <cleanup_stdio+0x10>
 8003bc8:	f001 fed6 	bl	8005978 <_fflush_r>
 8003bcc:	68a1      	ldr	r1, [r4, #8]
 8003bce:	4b09      	ldr	r3, [pc, #36]	@ (8003bf4 <cleanup_stdio+0x38>)
 8003bd0:	4299      	cmp	r1, r3
 8003bd2:	d002      	beq.n	8003bda <cleanup_stdio+0x1e>
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f001 fecf 	bl	8005978 <_fflush_r>
 8003bda:	68e1      	ldr	r1, [r4, #12]
 8003bdc:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <cleanup_stdio+0x3c>)
 8003bde:	4299      	cmp	r1, r3
 8003be0:	d004      	beq.n	8003bec <cleanup_stdio+0x30>
 8003be2:	4620      	mov	r0, r4
 8003be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003be8:	f001 bec6 	b.w	8005978 <_fflush_r>
 8003bec:	bd10      	pop	{r4, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000254 	.word	0x20000254
 8003bf4:	200002bc 	.word	0x200002bc
 8003bf8:	20000324 	.word	0x20000324

08003bfc <global_stdio_init.part.0>:
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <global_stdio_init.part.0+0x30>)
 8003c00:	4c0b      	ldr	r4, [pc, #44]	@ (8003c30 <global_stdio_init.part.0+0x34>)
 8003c02:	4a0c      	ldr	r2, [pc, #48]	@ (8003c34 <global_stdio_init.part.0+0x38>)
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	4620      	mov	r0, r4
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2104      	movs	r1, #4
 8003c0c:	f7ff ff94 	bl	8003b38 <std>
 8003c10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c14:	2201      	movs	r2, #1
 8003c16:	2109      	movs	r1, #9
 8003c18:	f7ff ff8e 	bl	8003b38 <std>
 8003c1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c20:	2202      	movs	r2, #2
 8003c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c26:	2112      	movs	r1, #18
 8003c28:	f7ff bf86 	b.w	8003b38 <std>
 8003c2c:	2000038c 	.word	0x2000038c
 8003c30:	20000254 	.word	0x20000254
 8003c34:	08003ba5 	.word	0x08003ba5

08003c38 <__sfp_lock_acquire>:
 8003c38:	4801      	ldr	r0, [pc, #4]	@ (8003c40 <__sfp_lock_acquire+0x8>)
 8003c3a:	f000 ba04 	b.w	8004046 <__retarget_lock_acquire_recursive>
 8003c3e:	bf00      	nop
 8003c40:	20000395 	.word	0x20000395

08003c44 <__sfp_lock_release>:
 8003c44:	4801      	ldr	r0, [pc, #4]	@ (8003c4c <__sfp_lock_release+0x8>)
 8003c46:	f000 b9ff 	b.w	8004048 <__retarget_lock_release_recursive>
 8003c4a:	bf00      	nop
 8003c4c:	20000395 	.word	0x20000395

08003c50 <__sinit>:
 8003c50:	b510      	push	{r4, lr}
 8003c52:	4604      	mov	r4, r0
 8003c54:	f7ff fff0 	bl	8003c38 <__sfp_lock_acquire>
 8003c58:	6a23      	ldr	r3, [r4, #32]
 8003c5a:	b11b      	cbz	r3, 8003c64 <__sinit+0x14>
 8003c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c60:	f7ff bff0 	b.w	8003c44 <__sfp_lock_release>
 8003c64:	4b04      	ldr	r3, [pc, #16]	@ (8003c78 <__sinit+0x28>)
 8003c66:	6223      	str	r3, [r4, #32]
 8003c68:	4b04      	ldr	r3, [pc, #16]	@ (8003c7c <__sinit+0x2c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f5      	bne.n	8003c5c <__sinit+0xc>
 8003c70:	f7ff ffc4 	bl	8003bfc <global_stdio_init.part.0>
 8003c74:	e7f2      	b.n	8003c5c <__sinit+0xc>
 8003c76:	bf00      	nop
 8003c78:	08003bbd 	.word	0x08003bbd
 8003c7c:	2000038c 	.word	0x2000038c

08003c80 <_fwalk_sglue>:
 8003c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c84:	4607      	mov	r7, r0
 8003c86:	4688      	mov	r8, r1
 8003c88:	4614      	mov	r4, r2
 8003c8a:	2600      	movs	r6, #0
 8003c8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c90:	f1b9 0901 	subs.w	r9, r9, #1
 8003c94:	d505      	bpl.n	8003ca2 <_fwalk_sglue+0x22>
 8003c96:	6824      	ldr	r4, [r4, #0]
 8003c98:	2c00      	cmp	r4, #0
 8003c9a:	d1f7      	bne.n	8003c8c <_fwalk_sglue+0xc>
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ca2:	89ab      	ldrh	r3, [r5, #12]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d907      	bls.n	8003cb8 <_fwalk_sglue+0x38>
 8003ca8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cac:	3301      	adds	r3, #1
 8003cae:	d003      	beq.n	8003cb8 <_fwalk_sglue+0x38>
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	47c0      	blx	r8
 8003cb6:	4306      	orrs	r6, r0
 8003cb8:	3568      	adds	r5, #104	@ 0x68
 8003cba:	e7e9      	b.n	8003c90 <_fwalk_sglue+0x10>

08003cbc <iprintf>:
 8003cbc:	b40f      	push	{r0, r1, r2, r3}
 8003cbe:	b507      	push	{r0, r1, r2, lr}
 8003cc0:	4906      	ldr	r1, [pc, #24]	@ (8003cdc <iprintf+0x20>)
 8003cc2:	ab04      	add	r3, sp, #16
 8003cc4:	6808      	ldr	r0, [r1, #0]
 8003cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cca:	6881      	ldr	r1, [r0, #8]
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	f001 fcb7 	bl	8005640 <_vfiprintf_r>
 8003cd2:	b003      	add	sp, #12
 8003cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cd8:	b004      	add	sp, #16
 8003cda:	4770      	bx	lr
 8003cdc:	20000018 	.word	0x20000018

08003ce0 <_puts_r>:
 8003ce0:	6a03      	ldr	r3, [r0, #32]
 8003ce2:	b570      	push	{r4, r5, r6, lr}
 8003ce4:	6884      	ldr	r4, [r0, #8]
 8003ce6:	4605      	mov	r5, r0
 8003ce8:	460e      	mov	r6, r1
 8003cea:	b90b      	cbnz	r3, 8003cf0 <_puts_r+0x10>
 8003cec:	f7ff ffb0 	bl	8003c50 <__sinit>
 8003cf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cf2:	07db      	lsls	r3, r3, #31
 8003cf4:	d405      	bmi.n	8003d02 <_puts_r+0x22>
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	0598      	lsls	r0, r3, #22
 8003cfa:	d402      	bmi.n	8003d02 <_puts_r+0x22>
 8003cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cfe:	f000 f9a2 	bl	8004046 <__retarget_lock_acquire_recursive>
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	0719      	lsls	r1, r3, #28
 8003d06:	d502      	bpl.n	8003d0e <_puts_r+0x2e>
 8003d08:	6923      	ldr	r3, [r4, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d135      	bne.n	8003d7a <_puts_r+0x9a>
 8003d0e:	4621      	mov	r1, r4
 8003d10:	4628      	mov	r0, r5
 8003d12:	f000 f8c5 	bl	8003ea0 <__swsetup_r>
 8003d16:	b380      	cbz	r0, 8003d7a <_puts_r+0x9a>
 8003d18:	f04f 35ff 	mov.w	r5, #4294967295
 8003d1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d1e:	07da      	lsls	r2, r3, #31
 8003d20:	d405      	bmi.n	8003d2e <_puts_r+0x4e>
 8003d22:	89a3      	ldrh	r3, [r4, #12]
 8003d24:	059b      	lsls	r3, r3, #22
 8003d26:	d402      	bmi.n	8003d2e <_puts_r+0x4e>
 8003d28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d2a:	f000 f98d 	bl	8004048 <__retarget_lock_release_recursive>
 8003d2e:	4628      	mov	r0, r5
 8003d30:	bd70      	pop	{r4, r5, r6, pc}
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	da04      	bge.n	8003d40 <_puts_r+0x60>
 8003d36:	69a2      	ldr	r2, [r4, #24]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	dc17      	bgt.n	8003d6c <_puts_r+0x8c>
 8003d3c:	290a      	cmp	r1, #10
 8003d3e:	d015      	beq.n	8003d6c <_puts_r+0x8c>
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	6022      	str	r2, [r4, #0]
 8003d46:	7019      	strb	r1, [r3, #0]
 8003d48:	68a3      	ldr	r3, [r4, #8]
 8003d4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	60a3      	str	r3, [r4, #8]
 8003d52:	2900      	cmp	r1, #0
 8003d54:	d1ed      	bne.n	8003d32 <_puts_r+0x52>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	da11      	bge.n	8003d7e <_puts_r+0x9e>
 8003d5a:	4622      	mov	r2, r4
 8003d5c:	210a      	movs	r1, #10
 8003d5e:	4628      	mov	r0, r5
 8003d60:	f000 f85f 	bl	8003e22 <__swbuf_r>
 8003d64:	3001      	adds	r0, #1
 8003d66:	d0d7      	beq.n	8003d18 <_puts_r+0x38>
 8003d68:	250a      	movs	r5, #10
 8003d6a:	e7d7      	b.n	8003d1c <_puts_r+0x3c>
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	4628      	mov	r0, r5
 8003d70:	f000 f857 	bl	8003e22 <__swbuf_r>
 8003d74:	3001      	adds	r0, #1
 8003d76:	d1e7      	bne.n	8003d48 <_puts_r+0x68>
 8003d78:	e7ce      	b.n	8003d18 <_puts_r+0x38>
 8003d7a:	3e01      	subs	r6, #1
 8003d7c:	e7e4      	b.n	8003d48 <_puts_r+0x68>
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	6022      	str	r2, [r4, #0]
 8003d84:	220a      	movs	r2, #10
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	e7ee      	b.n	8003d68 <_puts_r+0x88>
	...

08003d8c <puts>:
 8003d8c:	4b02      	ldr	r3, [pc, #8]	@ (8003d98 <puts+0xc>)
 8003d8e:	4601      	mov	r1, r0
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	f7ff bfa5 	b.w	8003ce0 <_puts_r>
 8003d96:	bf00      	nop
 8003d98:	20000018 	.word	0x20000018

08003d9c <__sread>:
 8003d9c:	b510      	push	{r4, lr}
 8003d9e:	460c      	mov	r4, r1
 8003da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da4:	f000 f900 	bl	8003fa8 <_read_r>
 8003da8:	2800      	cmp	r0, #0
 8003daa:	bfab      	itete	ge
 8003dac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003dae:	89a3      	ldrhlt	r3, [r4, #12]
 8003db0:	181b      	addge	r3, r3, r0
 8003db2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003db6:	bfac      	ite	ge
 8003db8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003dba:	81a3      	strhlt	r3, [r4, #12]
 8003dbc:	bd10      	pop	{r4, pc}

08003dbe <__swrite>:
 8003dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc2:	461f      	mov	r7, r3
 8003dc4:	898b      	ldrh	r3, [r1, #12]
 8003dc6:	05db      	lsls	r3, r3, #23
 8003dc8:	4605      	mov	r5, r0
 8003dca:	460c      	mov	r4, r1
 8003dcc:	4616      	mov	r6, r2
 8003dce:	d505      	bpl.n	8003ddc <__swrite+0x1e>
 8003dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f000 f8d4 	bl	8003f84 <_lseek_r>
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003de2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003de6:	81a3      	strh	r3, [r4, #12]
 8003de8:	4632      	mov	r2, r6
 8003dea:	463b      	mov	r3, r7
 8003dec:	4628      	mov	r0, r5
 8003dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003df2:	f000 b8eb 	b.w	8003fcc <_write_r>

08003df6 <__sseek>:
 8003df6:	b510      	push	{r4, lr}
 8003df8:	460c      	mov	r4, r1
 8003dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dfe:	f000 f8c1 	bl	8003f84 <_lseek_r>
 8003e02:	1c43      	adds	r3, r0, #1
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	bf15      	itete	ne
 8003e08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e12:	81a3      	strheq	r3, [r4, #12]
 8003e14:	bf18      	it	ne
 8003e16:	81a3      	strhne	r3, [r4, #12]
 8003e18:	bd10      	pop	{r4, pc}

08003e1a <__sclose>:
 8003e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1e:	f000 b8a1 	b.w	8003f64 <_close_r>

08003e22 <__swbuf_r>:
 8003e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e24:	460e      	mov	r6, r1
 8003e26:	4614      	mov	r4, r2
 8003e28:	4605      	mov	r5, r0
 8003e2a:	b118      	cbz	r0, 8003e34 <__swbuf_r+0x12>
 8003e2c:	6a03      	ldr	r3, [r0, #32]
 8003e2e:	b90b      	cbnz	r3, 8003e34 <__swbuf_r+0x12>
 8003e30:	f7ff ff0e 	bl	8003c50 <__sinit>
 8003e34:	69a3      	ldr	r3, [r4, #24]
 8003e36:	60a3      	str	r3, [r4, #8]
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	071a      	lsls	r2, r3, #28
 8003e3c:	d501      	bpl.n	8003e42 <__swbuf_r+0x20>
 8003e3e:	6923      	ldr	r3, [r4, #16]
 8003e40:	b943      	cbnz	r3, 8003e54 <__swbuf_r+0x32>
 8003e42:	4621      	mov	r1, r4
 8003e44:	4628      	mov	r0, r5
 8003e46:	f000 f82b 	bl	8003ea0 <__swsetup_r>
 8003e4a:	b118      	cbz	r0, 8003e54 <__swbuf_r+0x32>
 8003e4c:	f04f 37ff 	mov.w	r7, #4294967295
 8003e50:	4638      	mov	r0, r7
 8003e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	6922      	ldr	r2, [r4, #16]
 8003e58:	1a98      	subs	r0, r3, r2
 8003e5a:	6963      	ldr	r3, [r4, #20]
 8003e5c:	b2f6      	uxtb	r6, r6
 8003e5e:	4283      	cmp	r3, r0
 8003e60:	4637      	mov	r7, r6
 8003e62:	dc05      	bgt.n	8003e70 <__swbuf_r+0x4e>
 8003e64:	4621      	mov	r1, r4
 8003e66:	4628      	mov	r0, r5
 8003e68:	f001 fd86 	bl	8005978 <_fflush_r>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d1ed      	bne.n	8003e4c <__swbuf_r+0x2a>
 8003e70:	68a3      	ldr	r3, [r4, #8]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	60a3      	str	r3, [r4, #8]
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	6022      	str	r2, [r4, #0]
 8003e7c:	701e      	strb	r6, [r3, #0]
 8003e7e:	6962      	ldr	r2, [r4, #20]
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d004      	beq.n	8003e90 <__swbuf_r+0x6e>
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	07db      	lsls	r3, r3, #31
 8003e8a:	d5e1      	bpl.n	8003e50 <__swbuf_r+0x2e>
 8003e8c:	2e0a      	cmp	r6, #10
 8003e8e:	d1df      	bne.n	8003e50 <__swbuf_r+0x2e>
 8003e90:	4621      	mov	r1, r4
 8003e92:	4628      	mov	r0, r5
 8003e94:	f001 fd70 	bl	8005978 <_fflush_r>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	d0d9      	beq.n	8003e50 <__swbuf_r+0x2e>
 8003e9c:	e7d6      	b.n	8003e4c <__swbuf_r+0x2a>
	...

08003ea0 <__swsetup_r>:
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	4b29      	ldr	r3, [pc, #164]	@ (8003f48 <__swsetup_r+0xa8>)
 8003ea4:	4605      	mov	r5, r0
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	b118      	cbz	r0, 8003eb4 <__swsetup_r+0x14>
 8003eac:	6a03      	ldr	r3, [r0, #32]
 8003eae:	b90b      	cbnz	r3, 8003eb4 <__swsetup_r+0x14>
 8003eb0:	f7ff fece 	bl	8003c50 <__sinit>
 8003eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eb8:	0719      	lsls	r1, r3, #28
 8003eba:	d422      	bmi.n	8003f02 <__swsetup_r+0x62>
 8003ebc:	06da      	lsls	r2, r3, #27
 8003ebe:	d407      	bmi.n	8003ed0 <__swsetup_r+0x30>
 8003ec0:	2209      	movs	r2, #9
 8003ec2:	602a      	str	r2, [r5, #0]
 8003ec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ec8:	81a3      	strh	r3, [r4, #12]
 8003eca:	f04f 30ff 	mov.w	r0, #4294967295
 8003ece:	e033      	b.n	8003f38 <__swsetup_r+0x98>
 8003ed0:	0758      	lsls	r0, r3, #29
 8003ed2:	d512      	bpl.n	8003efa <__swsetup_r+0x5a>
 8003ed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ed6:	b141      	cbz	r1, 8003eea <__swsetup_r+0x4a>
 8003ed8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003edc:	4299      	cmp	r1, r3
 8003ede:	d002      	beq.n	8003ee6 <__swsetup_r+0x46>
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f000 ff01 	bl	8004ce8 <_free_r>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003eea:	89a3      	ldrh	r3, [r4, #12]
 8003eec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ef0:	81a3      	strh	r3, [r4, #12]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	6063      	str	r3, [r4, #4]
 8003ef6:	6923      	ldr	r3, [r4, #16]
 8003ef8:	6023      	str	r3, [r4, #0]
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	f043 0308 	orr.w	r3, r3, #8
 8003f00:	81a3      	strh	r3, [r4, #12]
 8003f02:	6923      	ldr	r3, [r4, #16]
 8003f04:	b94b      	cbnz	r3, 8003f1a <__swsetup_r+0x7a>
 8003f06:	89a3      	ldrh	r3, [r4, #12]
 8003f08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f10:	d003      	beq.n	8003f1a <__swsetup_r+0x7a>
 8003f12:	4621      	mov	r1, r4
 8003f14:	4628      	mov	r0, r5
 8003f16:	f001 fd7d 	bl	8005a14 <__smakebuf_r>
 8003f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f1e:	f013 0201 	ands.w	r2, r3, #1
 8003f22:	d00a      	beq.n	8003f3a <__swsetup_r+0x9a>
 8003f24:	2200      	movs	r2, #0
 8003f26:	60a2      	str	r2, [r4, #8]
 8003f28:	6962      	ldr	r2, [r4, #20]
 8003f2a:	4252      	negs	r2, r2
 8003f2c:	61a2      	str	r2, [r4, #24]
 8003f2e:	6922      	ldr	r2, [r4, #16]
 8003f30:	b942      	cbnz	r2, 8003f44 <__swsetup_r+0xa4>
 8003f32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f36:	d1c5      	bne.n	8003ec4 <__swsetup_r+0x24>
 8003f38:	bd38      	pop	{r3, r4, r5, pc}
 8003f3a:	0799      	lsls	r1, r3, #30
 8003f3c:	bf58      	it	pl
 8003f3e:	6962      	ldrpl	r2, [r4, #20]
 8003f40:	60a2      	str	r2, [r4, #8]
 8003f42:	e7f4      	b.n	8003f2e <__swsetup_r+0x8e>
 8003f44:	2000      	movs	r0, #0
 8003f46:	e7f7      	b.n	8003f38 <__swsetup_r+0x98>
 8003f48:	20000018 	.word	0x20000018

08003f4c <memset>:
 8003f4c:	4402      	add	r2, r0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d100      	bne.n	8003f56 <memset+0xa>
 8003f54:	4770      	bx	lr
 8003f56:	f803 1b01 	strb.w	r1, [r3], #1
 8003f5a:	e7f9      	b.n	8003f50 <memset+0x4>

08003f5c <_localeconv_r>:
 8003f5c:	4800      	ldr	r0, [pc, #0]	@ (8003f60 <_localeconv_r+0x4>)
 8003f5e:	4770      	bx	lr
 8003f60:	20000158 	.word	0x20000158

08003f64 <_close_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4d06      	ldr	r5, [pc, #24]	@ (8003f80 <_close_r+0x1c>)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	602b      	str	r3, [r5, #0]
 8003f70:	f7fd f99a 	bl	80012a8 <_close>
 8003f74:	1c43      	adds	r3, r0, #1
 8003f76:	d102      	bne.n	8003f7e <_close_r+0x1a>
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	b103      	cbz	r3, 8003f7e <_close_r+0x1a>
 8003f7c:	6023      	str	r3, [r4, #0]
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
 8003f80:	20000390 	.word	0x20000390

08003f84 <_lseek_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4d07      	ldr	r5, [pc, #28]	@ (8003fa4 <_lseek_r+0x20>)
 8003f88:	4604      	mov	r4, r0
 8003f8a:	4608      	mov	r0, r1
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	2200      	movs	r2, #0
 8003f90:	602a      	str	r2, [r5, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	f7fd f9af 	bl	80012f6 <_lseek>
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d102      	bne.n	8003fa2 <_lseek_r+0x1e>
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	b103      	cbz	r3, 8003fa2 <_lseek_r+0x1e>
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
 8003fa4:	20000390 	.word	0x20000390

08003fa8 <_read_r>:
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	4d07      	ldr	r5, [pc, #28]	@ (8003fc8 <_read_r+0x20>)
 8003fac:	4604      	mov	r4, r0
 8003fae:	4608      	mov	r0, r1
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	602a      	str	r2, [r5, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f7fd f959 	bl	800126e <_read>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	d102      	bne.n	8003fc6 <_read_r+0x1e>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	b103      	cbz	r3, 8003fc6 <_read_r+0x1e>
 8003fc4:	6023      	str	r3, [r4, #0]
 8003fc6:	bd38      	pop	{r3, r4, r5, pc}
 8003fc8:	20000390 	.word	0x20000390

08003fcc <_write_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4d07      	ldr	r5, [pc, #28]	@ (8003fec <_write_r+0x20>)
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	4608      	mov	r0, r1
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	602a      	str	r2, [r5, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f7fc fe2b 	bl	8000c36 <_write>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_write_r+0x1e>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_write_r+0x1e>
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	20000390 	.word	0x20000390

08003ff0 <__errno>:
 8003ff0:	4b01      	ldr	r3, [pc, #4]	@ (8003ff8 <__errno+0x8>)
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000018 	.word	0x20000018

08003ffc <__libc_init_array>:
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	4d0d      	ldr	r5, [pc, #52]	@ (8004034 <__libc_init_array+0x38>)
 8004000:	4c0d      	ldr	r4, [pc, #52]	@ (8004038 <__libc_init_array+0x3c>)
 8004002:	1b64      	subs	r4, r4, r5
 8004004:	10a4      	asrs	r4, r4, #2
 8004006:	2600      	movs	r6, #0
 8004008:	42a6      	cmp	r6, r4
 800400a:	d109      	bne.n	8004020 <__libc_init_array+0x24>
 800400c:	4d0b      	ldr	r5, [pc, #44]	@ (800403c <__libc_init_array+0x40>)
 800400e:	4c0c      	ldr	r4, [pc, #48]	@ (8004040 <__libc_init_array+0x44>)
 8004010:	f001 fe2c 	bl	8005c6c <_init>
 8004014:	1b64      	subs	r4, r4, r5
 8004016:	10a4      	asrs	r4, r4, #2
 8004018:	2600      	movs	r6, #0
 800401a:	42a6      	cmp	r6, r4
 800401c:	d105      	bne.n	800402a <__libc_init_array+0x2e>
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	f855 3b04 	ldr.w	r3, [r5], #4
 8004024:	4798      	blx	r3
 8004026:	3601      	adds	r6, #1
 8004028:	e7ee      	b.n	8004008 <__libc_init_array+0xc>
 800402a:	f855 3b04 	ldr.w	r3, [r5], #4
 800402e:	4798      	blx	r3
 8004030:	3601      	adds	r6, #1
 8004032:	e7f2      	b.n	800401a <__libc_init_array+0x1e>
 8004034:	08006060 	.word	0x08006060
 8004038:	08006060 	.word	0x08006060
 800403c:	08006060 	.word	0x08006060
 8004040:	08006064 	.word	0x08006064

08004044 <__retarget_lock_init_recursive>:
 8004044:	4770      	bx	lr

08004046 <__retarget_lock_acquire_recursive>:
 8004046:	4770      	bx	lr

08004048 <__retarget_lock_release_recursive>:
 8004048:	4770      	bx	lr

0800404a <quorem>:
 800404a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404e:	6903      	ldr	r3, [r0, #16]
 8004050:	690c      	ldr	r4, [r1, #16]
 8004052:	42a3      	cmp	r3, r4
 8004054:	4607      	mov	r7, r0
 8004056:	db7e      	blt.n	8004156 <quorem+0x10c>
 8004058:	3c01      	subs	r4, #1
 800405a:	f101 0814 	add.w	r8, r1, #20
 800405e:	00a3      	lsls	r3, r4, #2
 8004060:	f100 0514 	add.w	r5, r0, #20
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800406a:	9301      	str	r3, [sp, #4]
 800406c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004070:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004074:	3301      	adds	r3, #1
 8004076:	429a      	cmp	r2, r3
 8004078:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800407c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004080:	d32e      	bcc.n	80040e0 <quorem+0x96>
 8004082:	f04f 0a00 	mov.w	sl, #0
 8004086:	46c4      	mov	ip, r8
 8004088:	46ae      	mov	lr, r5
 800408a:	46d3      	mov	fp, sl
 800408c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004090:	b298      	uxth	r0, r3
 8004092:	fb06 a000 	mla	r0, r6, r0, sl
 8004096:	0c02      	lsrs	r2, r0, #16
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	fb06 2303 	mla	r3, r6, r3, r2
 800409e:	f8de 2000 	ldr.w	r2, [lr]
 80040a2:	b280      	uxth	r0, r0
 80040a4:	b292      	uxth	r2, r2
 80040a6:	1a12      	subs	r2, r2, r0
 80040a8:	445a      	add	r2, fp
 80040aa:	f8de 0000 	ldr.w	r0, [lr]
 80040ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80040b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80040bc:	b292      	uxth	r2, r2
 80040be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80040c2:	45e1      	cmp	r9, ip
 80040c4:	f84e 2b04 	str.w	r2, [lr], #4
 80040c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80040cc:	d2de      	bcs.n	800408c <quorem+0x42>
 80040ce:	9b00      	ldr	r3, [sp, #0]
 80040d0:	58eb      	ldr	r3, [r5, r3]
 80040d2:	b92b      	cbnz	r3, 80040e0 <quorem+0x96>
 80040d4:	9b01      	ldr	r3, [sp, #4]
 80040d6:	3b04      	subs	r3, #4
 80040d8:	429d      	cmp	r5, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	d32f      	bcc.n	800413e <quorem+0xf4>
 80040de:	613c      	str	r4, [r7, #16]
 80040e0:	4638      	mov	r0, r7
 80040e2:	f001 f97b 	bl	80053dc <__mcmp>
 80040e6:	2800      	cmp	r0, #0
 80040e8:	db25      	blt.n	8004136 <quorem+0xec>
 80040ea:	4629      	mov	r1, r5
 80040ec:	2000      	movs	r0, #0
 80040ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80040f2:	f8d1 c000 	ldr.w	ip, [r1]
 80040f6:	fa1f fe82 	uxth.w	lr, r2
 80040fa:	fa1f f38c 	uxth.w	r3, ip
 80040fe:	eba3 030e 	sub.w	r3, r3, lr
 8004102:	4403      	add	r3, r0
 8004104:	0c12      	lsrs	r2, r2, #16
 8004106:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800410a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800410e:	b29b      	uxth	r3, r3
 8004110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004114:	45c1      	cmp	r9, r8
 8004116:	f841 3b04 	str.w	r3, [r1], #4
 800411a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800411e:	d2e6      	bcs.n	80040ee <quorem+0xa4>
 8004120:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004124:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004128:	b922      	cbnz	r2, 8004134 <quorem+0xea>
 800412a:	3b04      	subs	r3, #4
 800412c:	429d      	cmp	r5, r3
 800412e:	461a      	mov	r2, r3
 8004130:	d30b      	bcc.n	800414a <quorem+0x100>
 8004132:	613c      	str	r4, [r7, #16]
 8004134:	3601      	adds	r6, #1
 8004136:	4630      	mov	r0, r6
 8004138:	b003      	add	sp, #12
 800413a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	3b04      	subs	r3, #4
 8004142:	2a00      	cmp	r2, #0
 8004144:	d1cb      	bne.n	80040de <quorem+0x94>
 8004146:	3c01      	subs	r4, #1
 8004148:	e7c6      	b.n	80040d8 <quorem+0x8e>
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	3b04      	subs	r3, #4
 800414e:	2a00      	cmp	r2, #0
 8004150:	d1ef      	bne.n	8004132 <quorem+0xe8>
 8004152:	3c01      	subs	r4, #1
 8004154:	e7ea      	b.n	800412c <quorem+0xe2>
 8004156:	2000      	movs	r0, #0
 8004158:	e7ee      	b.n	8004138 <quorem+0xee>
 800415a:	0000      	movs	r0, r0
 800415c:	0000      	movs	r0, r0
	...

08004160 <_dtoa_r>:
 8004160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004164:	69c7      	ldr	r7, [r0, #28]
 8004166:	b099      	sub	sp, #100	@ 0x64
 8004168:	ed8d 0b02 	vstr	d0, [sp, #8]
 800416c:	ec55 4b10 	vmov	r4, r5, d0
 8004170:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004172:	9109      	str	r1, [sp, #36]	@ 0x24
 8004174:	4683      	mov	fp, r0
 8004176:	920e      	str	r2, [sp, #56]	@ 0x38
 8004178:	9313      	str	r3, [sp, #76]	@ 0x4c
 800417a:	b97f      	cbnz	r7, 800419c <_dtoa_r+0x3c>
 800417c:	2010      	movs	r0, #16
 800417e:	f000 fdfd 	bl	8004d7c <malloc>
 8004182:	4602      	mov	r2, r0
 8004184:	f8cb 001c 	str.w	r0, [fp, #28]
 8004188:	b920      	cbnz	r0, 8004194 <_dtoa_r+0x34>
 800418a:	4ba7      	ldr	r3, [pc, #668]	@ (8004428 <_dtoa_r+0x2c8>)
 800418c:	21ef      	movs	r1, #239	@ 0xef
 800418e:	48a7      	ldr	r0, [pc, #668]	@ (800442c <_dtoa_r+0x2cc>)
 8004190:	f001 fcbc 	bl	8005b0c <__assert_func>
 8004194:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004198:	6007      	str	r7, [r0, #0]
 800419a:	60c7      	str	r7, [r0, #12]
 800419c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80041a0:	6819      	ldr	r1, [r3, #0]
 80041a2:	b159      	cbz	r1, 80041bc <_dtoa_r+0x5c>
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	604a      	str	r2, [r1, #4]
 80041a8:	2301      	movs	r3, #1
 80041aa:	4093      	lsls	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]
 80041ae:	4658      	mov	r0, fp
 80041b0:	f000 feda 	bl	8004f68 <_Bfree>
 80041b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	1e2b      	subs	r3, r5, #0
 80041be:	bfb9      	ittee	lt
 80041c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80041c4:	9303      	strlt	r3, [sp, #12]
 80041c6:	2300      	movge	r3, #0
 80041c8:	6033      	strge	r3, [r6, #0]
 80041ca:	9f03      	ldr	r7, [sp, #12]
 80041cc:	4b98      	ldr	r3, [pc, #608]	@ (8004430 <_dtoa_r+0x2d0>)
 80041ce:	bfbc      	itt	lt
 80041d0:	2201      	movlt	r2, #1
 80041d2:	6032      	strlt	r2, [r6, #0]
 80041d4:	43bb      	bics	r3, r7
 80041d6:	d112      	bne.n	80041fe <_dtoa_r+0x9e>
 80041d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80041da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80041e4:	4323      	orrs	r3, r4
 80041e6:	f000 854d 	beq.w	8004c84 <_dtoa_r+0xb24>
 80041ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80041ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004444 <_dtoa_r+0x2e4>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 854f 	beq.w	8004c94 <_dtoa_r+0xb34>
 80041f6:	f10a 0303 	add.w	r3, sl, #3
 80041fa:	f000 bd49 	b.w	8004c90 <_dtoa_r+0xb30>
 80041fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004202:	2200      	movs	r2, #0
 8004204:	ec51 0b17 	vmov	r0, r1, d7
 8004208:	2300      	movs	r3, #0
 800420a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800420e:	f7fc fc5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004212:	4680      	mov	r8, r0
 8004214:	b158      	cbz	r0, 800422e <_dtoa_r+0xce>
 8004216:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004218:	2301      	movs	r3, #1
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800421e:	b113      	cbz	r3, 8004226 <_dtoa_r+0xc6>
 8004220:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004222:	4b84      	ldr	r3, [pc, #528]	@ (8004434 <_dtoa_r+0x2d4>)
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004448 <_dtoa_r+0x2e8>
 800422a:	f000 bd33 	b.w	8004c94 <_dtoa_r+0xb34>
 800422e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004232:	aa16      	add	r2, sp, #88	@ 0x58
 8004234:	a917      	add	r1, sp, #92	@ 0x5c
 8004236:	4658      	mov	r0, fp
 8004238:	f001 f980 	bl	800553c <__d2b>
 800423c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004240:	4681      	mov	r9, r0
 8004242:	2e00      	cmp	r6, #0
 8004244:	d077      	beq.n	8004336 <_dtoa_r+0x1d6>
 8004246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004248:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800424c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004254:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004258:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800425c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004260:	4619      	mov	r1, r3
 8004262:	2200      	movs	r2, #0
 8004264:	4b74      	ldr	r3, [pc, #464]	@ (8004438 <_dtoa_r+0x2d8>)
 8004266:	f7fc f80f 	bl	8000288 <__aeabi_dsub>
 800426a:	a369      	add	r3, pc, #420	@ (adr r3, 8004410 <_dtoa_r+0x2b0>)
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	f7fc f9c2 	bl	80005f8 <__aeabi_dmul>
 8004274:	a368      	add	r3, pc, #416	@ (adr r3, 8004418 <_dtoa_r+0x2b8>)
 8004276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427a:	f7fc f807 	bl	800028c <__adddf3>
 800427e:	4604      	mov	r4, r0
 8004280:	4630      	mov	r0, r6
 8004282:	460d      	mov	r5, r1
 8004284:	f7fc f94e 	bl	8000524 <__aeabi_i2d>
 8004288:	a365      	add	r3, pc, #404	@ (adr r3, 8004420 <_dtoa_r+0x2c0>)
 800428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428e:	f7fc f9b3 	bl	80005f8 <__aeabi_dmul>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4620      	mov	r0, r4
 8004298:	4629      	mov	r1, r5
 800429a:	f7fb fff7 	bl	800028c <__adddf3>
 800429e:	4604      	mov	r4, r0
 80042a0:	460d      	mov	r5, r1
 80042a2:	f7fc fc59 	bl	8000b58 <__aeabi_d2iz>
 80042a6:	2200      	movs	r2, #0
 80042a8:	4607      	mov	r7, r0
 80042aa:	2300      	movs	r3, #0
 80042ac:	4620      	mov	r0, r4
 80042ae:	4629      	mov	r1, r5
 80042b0:	f7fc fc14 	bl	8000adc <__aeabi_dcmplt>
 80042b4:	b140      	cbz	r0, 80042c8 <_dtoa_r+0x168>
 80042b6:	4638      	mov	r0, r7
 80042b8:	f7fc f934 	bl	8000524 <__aeabi_i2d>
 80042bc:	4622      	mov	r2, r4
 80042be:	462b      	mov	r3, r5
 80042c0:	f7fc fc02 	bl	8000ac8 <__aeabi_dcmpeq>
 80042c4:	b900      	cbnz	r0, 80042c8 <_dtoa_r+0x168>
 80042c6:	3f01      	subs	r7, #1
 80042c8:	2f16      	cmp	r7, #22
 80042ca:	d851      	bhi.n	8004370 <_dtoa_r+0x210>
 80042cc:	4b5b      	ldr	r3, [pc, #364]	@ (800443c <_dtoa_r+0x2dc>)
 80042ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042da:	f7fc fbff 	bl	8000adc <__aeabi_dcmplt>
 80042de:	2800      	cmp	r0, #0
 80042e0:	d048      	beq.n	8004374 <_dtoa_r+0x214>
 80042e2:	3f01      	subs	r7, #1
 80042e4:	2300      	movs	r3, #0
 80042e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80042e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80042ea:	1b9b      	subs	r3, r3, r6
 80042ec:	1e5a      	subs	r2, r3, #1
 80042ee:	bf44      	itt	mi
 80042f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80042f4:	2300      	movmi	r3, #0
 80042f6:	9208      	str	r2, [sp, #32]
 80042f8:	bf54      	ite	pl
 80042fa:	f04f 0800 	movpl.w	r8, #0
 80042fe:	9308      	strmi	r3, [sp, #32]
 8004300:	2f00      	cmp	r7, #0
 8004302:	db39      	blt.n	8004378 <_dtoa_r+0x218>
 8004304:	9b08      	ldr	r3, [sp, #32]
 8004306:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004308:	443b      	add	r3, r7
 800430a:	9308      	str	r3, [sp, #32]
 800430c:	2300      	movs	r3, #0
 800430e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004312:	2b09      	cmp	r3, #9
 8004314:	d864      	bhi.n	80043e0 <_dtoa_r+0x280>
 8004316:	2b05      	cmp	r3, #5
 8004318:	bfc4      	itt	gt
 800431a:	3b04      	subgt	r3, #4
 800431c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800431e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004320:	f1a3 0302 	sub.w	r3, r3, #2
 8004324:	bfcc      	ite	gt
 8004326:	2400      	movgt	r4, #0
 8004328:	2401      	movle	r4, #1
 800432a:	2b03      	cmp	r3, #3
 800432c:	d863      	bhi.n	80043f6 <_dtoa_r+0x296>
 800432e:	e8df f003 	tbb	[pc, r3]
 8004332:	372a      	.short	0x372a
 8004334:	5535      	.short	0x5535
 8004336:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800433a:	441e      	add	r6, r3
 800433c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004340:	2b20      	cmp	r3, #32
 8004342:	bfc1      	itttt	gt
 8004344:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004348:	409f      	lslgt	r7, r3
 800434a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800434e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004352:	bfd6      	itet	le
 8004354:	f1c3 0320 	rsble	r3, r3, #32
 8004358:	ea47 0003 	orrgt.w	r0, r7, r3
 800435c:	fa04 f003 	lslle.w	r0, r4, r3
 8004360:	f7fc f8d0 	bl	8000504 <__aeabi_ui2d>
 8004364:	2201      	movs	r2, #1
 8004366:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800436a:	3e01      	subs	r6, #1
 800436c:	9214      	str	r2, [sp, #80]	@ 0x50
 800436e:	e777      	b.n	8004260 <_dtoa_r+0x100>
 8004370:	2301      	movs	r3, #1
 8004372:	e7b8      	b.n	80042e6 <_dtoa_r+0x186>
 8004374:	9012      	str	r0, [sp, #72]	@ 0x48
 8004376:	e7b7      	b.n	80042e8 <_dtoa_r+0x188>
 8004378:	427b      	negs	r3, r7
 800437a:	930a      	str	r3, [sp, #40]	@ 0x28
 800437c:	2300      	movs	r3, #0
 800437e:	eba8 0807 	sub.w	r8, r8, r7
 8004382:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004384:	e7c4      	b.n	8004310 <_dtoa_r+0x1b0>
 8004386:	2300      	movs	r3, #0
 8004388:	930b      	str	r3, [sp, #44]	@ 0x2c
 800438a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800438c:	2b00      	cmp	r3, #0
 800438e:	dc35      	bgt.n	80043fc <_dtoa_r+0x29c>
 8004390:	2301      	movs	r3, #1
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	9307      	str	r3, [sp, #28]
 8004396:	461a      	mov	r2, r3
 8004398:	920e      	str	r2, [sp, #56]	@ 0x38
 800439a:	e00b      	b.n	80043b4 <_dtoa_r+0x254>
 800439c:	2301      	movs	r3, #1
 800439e:	e7f3      	b.n	8004388 <_dtoa_r+0x228>
 80043a0:	2300      	movs	r3, #0
 80043a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	3301      	adds	r3, #1
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	9307      	str	r3, [sp, #28]
 80043b0:	bfb8      	it	lt
 80043b2:	2301      	movlt	r3, #1
 80043b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80043b8:	2100      	movs	r1, #0
 80043ba:	2204      	movs	r2, #4
 80043bc:	f102 0514 	add.w	r5, r2, #20
 80043c0:	429d      	cmp	r5, r3
 80043c2:	d91f      	bls.n	8004404 <_dtoa_r+0x2a4>
 80043c4:	6041      	str	r1, [r0, #4]
 80043c6:	4658      	mov	r0, fp
 80043c8:	f000 fd8e 	bl	8004ee8 <_Balloc>
 80043cc:	4682      	mov	sl, r0
 80043ce:	2800      	cmp	r0, #0
 80043d0:	d13c      	bne.n	800444c <_dtoa_r+0x2ec>
 80043d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004440 <_dtoa_r+0x2e0>)
 80043d4:	4602      	mov	r2, r0
 80043d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80043da:	e6d8      	b.n	800418e <_dtoa_r+0x2e>
 80043dc:	2301      	movs	r3, #1
 80043de:	e7e0      	b.n	80043a2 <_dtoa_r+0x242>
 80043e0:	2401      	movs	r4, #1
 80043e2:	2300      	movs	r3, #0
 80043e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80043e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80043e8:	f04f 33ff 	mov.w	r3, #4294967295
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	9307      	str	r3, [sp, #28]
 80043f0:	2200      	movs	r2, #0
 80043f2:	2312      	movs	r3, #18
 80043f4:	e7d0      	b.n	8004398 <_dtoa_r+0x238>
 80043f6:	2301      	movs	r3, #1
 80043f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043fa:	e7f5      	b.n	80043e8 <_dtoa_r+0x288>
 80043fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	9307      	str	r3, [sp, #28]
 8004402:	e7d7      	b.n	80043b4 <_dtoa_r+0x254>
 8004404:	3101      	adds	r1, #1
 8004406:	0052      	lsls	r2, r2, #1
 8004408:	e7d8      	b.n	80043bc <_dtoa_r+0x25c>
 800440a:	bf00      	nop
 800440c:	f3af 8000 	nop.w
 8004410:	636f4361 	.word	0x636f4361
 8004414:	3fd287a7 	.word	0x3fd287a7
 8004418:	8b60c8b3 	.word	0x8b60c8b3
 800441c:	3fc68a28 	.word	0x3fc68a28
 8004420:	509f79fb 	.word	0x509f79fb
 8004424:	3fd34413 	.word	0x3fd34413
 8004428:	08005d25 	.word	0x08005d25
 800442c:	08005d3c 	.word	0x08005d3c
 8004430:	7ff00000 	.word	0x7ff00000
 8004434:	08005cf5 	.word	0x08005cf5
 8004438:	3ff80000 	.word	0x3ff80000
 800443c:	08005e38 	.word	0x08005e38
 8004440:	08005d94 	.word	0x08005d94
 8004444:	08005d21 	.word	0x08005d21
 8004448:	08005cf4 	.word	0x08005cf4
 800444c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004450:	6018      	str	r0, [r3, #0]
 8004452:	9b07      	ldr	r3, [sp, #28]
 8004454:	2b0e      	cmp	r3, #14
 8004456:	f200 80a4 	bhi.w	80045a2 <_dtoa_r+0x442>
 800445a:	2c00      	cmp	r4, #0
 800445c:	f000 80a1 	beq.w	80045a2 <_dtoa_r+0x442>
 8004460:	2f00      	cmp	r7, #0
 8004462:	dd33      	ble.n	80044cc <_dtoa_r+0x36c>
 8004464:	4bad      	ldr	r3, [pc, #692]	@ (800471c <_dtoa_r+0x5bc>)
 8004466:	f007 020f 	and.w	r2, r7, #15
 800446a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800446e:	ed93 7b00 	vldr	d7, [r3]
 8004472:	05f8      	lsls	r0, r7, #23
 8004474:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004478:	ea4f 1427 	mov.w	r4, r7, asr #4
 800447c:	d516      	bpl.n	80044ac <_dtoa_r+0x34c>
 800447e:	4ba8      	ldr	r3, [pc, #672]	@ (8004720 <_dtoa_r+0x5c0>)
 8004480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004484:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004488:	f7fc f9e0 	bl	800084c <__aeabi_ddiv>
 800448c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004490:	f004 040f 	and.w	r4, r4, #15
 8004494:	2603      	movs	r6, #3
 8004496:	4da2      	ldr	r5, [pc, #648]	@ (8004720 <_dtoa_r+0x5c0>)
 8004498:	b954      	cbnz	r4, 80044b0 <_dtoa_r+0x350>
 800449a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800449e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044a2:	f7fc f9d3 	bl	800084c <__aeabi_ddiv>
 80044a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044aa:	e028      	b.n	80044fe <_dtoa_r+0x39e>
 80044ac:	2602      	movs	r6, #2
 80044ae:	e7f2      	b.n	8004496 <_dtoa_r+0x336>
 80044b0:	07e1      	lsls	r1, r4, #31
 80044b2:	d508      	bpl.n	80044c6 <_dtoa_r+0x366>
 80044b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80044bc:	f7fc f89c 	bl	80005f8 <__aeabi_dmul>
 80044c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044c4:	3601      	adds	r6, #1
 80044c6:	1064      	asrs	r4, r4, #1
 80044c8:	3508      	adds	r5, #8
 80044ca:	e7e5      	b.n	8004498 <_dtoa_r+0x338>
 80044cc:	f000 80d2 	beq.w	8004674 <_dtoa_r+0x514>
 80044d0:	427c      	negs	r4, r7
 80044d2:	4b92      	ldr	r3, [pc, #584]	@ (800471c <_dtoa_r+0x5bc>)
 80044d4:	4d92      	ldr	r5, [pc, #584]	@ (8004720 <_dtoa_r+0x5c0>)
 80044d6:	f004 020f 	and.w	r2, r4, #15
 80044da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80044e6:	f7fc f887 	bl	80005f8 <__aeabi_dmul>
 80044ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044ee:	1124      	asrs	r4, r4, #4
 80044f0:	2300      	movs	r3, #0
 80044f2:	2602      	movs	r6, #2
 80044f4:	2c00      	cmp	r4, #0
 80044f6:	f040 80b2 	bne.w	800465e <_dtoa_r+0x4fe>
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1d3      	bne.n	80044a6 <_dtoa_r+0x346>
 80044fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004500:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80b7 	beq.w	8004678 <_dtoa_r+0x518>
 800450a:	4b86      	ldr	r3, [pc, #536]	@ (8004724 <_dtoa_r+0x5c4>)
 800450c:	2200      	movs	r2, #0
 800450e:	4620      	mov	r0, r4
 8004510:	4629      	mov	r1, r5
 8004512:	f7fc fae3 	bl	8000adc <__aeabi_dcmplt>
 8004516:	2800      	cmp	r0, #0
 8004518:	f000 80ae 	beq.w	8004678 <_dtoa_r+0x518>
 800451c:	9b07      	ldr	r3, [sp, #28]
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80aa 	beq.w	8004678 <_dtoa_r+0x518>
 8004524:	9b00      	ldr	r3, [sp, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	dd37      	ble.n	800459a <_dtoa_r+0x43a>
 800452a:	1e7b      	subs	r3, r7, #1
 800452c:	9304      	str	r3, [sp, #16]
 800452e:	4620      	mov	r0, r4
 8004530:	4b7d      	ldr	r3, [pc, #500]	@ (8004728 <_dtoa_r+0x5c8>)
 8004532:	2200      	movs	r2, #0
 8004534:	4629      	mov	r1, r5
 8004536:	f7fc f85f 	bl	80005f8 <__aeabi_dmul>
 800453a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800453e:	9c00      	ldr	r4, [sp, #0]
 8004540:	3601      	adds	r6, #1
 8004542:	4630      	mov	r0, r6
 8004544:	f7fb ffee 	bl	8000524 <__aeabi_i2d>
 8004548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800454c:	f7fc f854 	bl	80005f8 <__aeabi_dmul>
 8004550:	4b76      	ldr	r3, [pc, #472]	@ (800472c <_dtoa_r+0x5cc>)
 8004552:	2200      	movs	r2, #0
 8004554:	f7fb fe9a 	bl	800028c <__adddf3>
 8004558:	4605      	mov	r5, r0
 800455a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800455e:	2c00      	cmp	r4, #0
 8004560:	f040 808d 	bne.w	800467e <_dtoa_r+0x51e>
 8004564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004568:	4b71      	ldr	r3, [pc, #452]	@ (8004730 <_dtoa_r+0x5d0>)
 800456a:	2200      	movs	r2, #0
 800456c:	f7fb fe8c 	bl	8000288 <__aeabi_dsub>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004578:	462a      	mov	r2, r5
 800457a:	4633      	mov	r3, r6
 800457c:	f7fc facc 	bl	8000b18 <__aeabi_dcmpgt>
 8004580:	2800      	cmp	r0, #0
 8004582:	f040 828b 	bne.w	8004a9c <_dtoa_r+0x93c>
 8004586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800458a:	462a      	mov	r2, r5
 800458c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004590:	f7fc faa4 	bl	8000adc <__aeabi_dcmplt>
 8004594:	2800      	cmp	r0, #0
 8004596:	f040 8128 	bne.w	80047ea <_dtoa_r+0x68a>
 800459a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800459e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80045a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f2c0 815a 	blt.w	800485e <_dtoa_r+0x6fe>
 80045aa:	2f0e      	cmp	r7, #14
 80045ac:	f300 8157 	bgt.w	800485e <_dtoa_r+0x6fe>
 80045b0:	4b5a      	ldr	r3, [pc, #360]	@ (800471c <_dtoa_r+0x5bc>)
 80045b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80045b6:	ed93 7b00 	vldr	d7, [r3]
 80045ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80045bc:	2b00      	cmp	r3, #0
 80045be:	ed8d 7b00 	vstr	d7, [sp]
 80045c2:	da03      	bge.n	80045cc <_dtoa_r+0x46c>
 80045c4:	9b07      	ldr	r3, [sp, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f340 8101 	ble.w	80047ce <_dtoa_r+0x66e>
 80045cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80045d0:	4656      	mov	r6, sl
 80045d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045d6:	4620      	mov	r0, r4
 80045d8:	4629      	mov	r1, r5
 80045da:	f7fc f937 	bl	800084c <__aeabi_ddiv>
 80045de:	f7fc fabb 	bl	8000b58 <__aeabi_d2iz>
 80045e2:	4680      	mov	r8, r0
 80045e4:	f7fb ff9e 	bl	8000524 <__aeabi_i2d>
 80045e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045ec:	f7fc f804 	bl	80005f8 <__aeabi_dmul>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4620      	mov	r0, r4
 80045f6:	4629      	mov	r1, r5
 80045f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80045fc:	f7fb fe44 	bl	8000288 <__aeabi_dsub>
 8004600:	f806 4b01 	strb.w	r4, [r6], #1
 8004604:	9d07      	ldr	r5, [sp, #28]
 8004606:	eba6 040a 	sub.w	r4, r6, sl
 800460a:	42a5      	cmp	r5, r4
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	f040 8117 	bne.w	8004842 <_dtoa_r+0x6e2>
 8004614:	f7fb fe3a 	bl	800028c <__adddf3>
 8004618:	e9dd 2300 	ldrd	r2, r3, [sp]
 800461c:	4604      	mov	r4, r0
 800461e:	460d      	mov	r5, r1
 8004620:	f7fc fa7a 	bl	8000b18 <__aeabi_dcmpgt>
 8004624:	2800      	cmp	r0, #0
 8004626:	f040 80f9 	bne.w	800481c <_dtoa_r+0x6bc>
 800462a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800462e:	4620      	mov	r0, r4
 8004630:	4629      	mov	r1, r5
 8004632:	f7fc fa49 	bl	8000ac8 <__aeabi_dcmpeq>
 8004636:	b118      	cbz	r0, 8004640 <_dtoa_r+0x4e0>
 8004638:	f018 0f01 	tst.w	r8, #1
 800463c:	f040 80ee 	bne.w	800481c <_dtoa_r+0x6bc>
 8004640:	4649      	mov	r1, r9
 8004642:	4658      	mov	r0, fp
 8004644:	f000 fc90 	bl	8004f68 <_Bfree>
 8004648:	2300      	movs	r3, #0
 800464a:	7033      	strb	r3, [r6, #0]
 800464c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800464e:	3701      	adds	r7, #1
 8004650:	601f      	str	r7, [r3, #0]
 8004652:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 831d 	beq.w	8004c94 <_dtoa_r+0xb34>
 800465a:	601e      	str	r6, [r3, #0]
 800465c:	e31a      	b.n	8004c94 <_dtoa_r+0xb34>
 800465e:	07e2      	lsls	r2, r4, #31
 8004660:	d505      	bpl.n	800466e <_dtoa_r+0x50e>
 8004662:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004666:	f7fb ffc7 	bl	80005f8 <__aeabi_dmul>
 800466a:	3601      	adds	r6, #1
 800466c:	2301      	movs	r3, #1
 800466e:	1064      	asrs	r4, r4, #1
 8004670:	3508      	adds	r5, #8
 8004672:	e73f      	b.n	80044f4 <_dtoa_r+0x394>
 8004674:	2602      	movs	r6, #2
 8004676:	e742      	b.n	80044fe <_dtoa_r+0x39e>
 8004678:	9c07      	ldr	r4, [sp, #28]
 800467a:	9704      	str	r7, [sp, #16]
 800467c:	e761      	b.n	8004542 <_dtoa_r+0x3e2>
 800467e:	4b27      	ldr	r3, [pc, #156]	@ (800471c <_dtoa_r+0x5bc>)
 8004680:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004682:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004686:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800468a:	4454      	add	r4, sl
 800468c:	2900      	cmp	r1, #0
 800468e:	d053      	beq.n	8004738 <_dtoa_r+0x5d8>
 8004690:	4928      	ldr	r1, [pc, #160]	@ (8004734 <_dtoa_r+0x5d4>)
 8004692:	2000      	movs	r0, #0
 8004694:	f7fc f8da 	bl	800084c <__aeabi_ddiv>
 8004698:	4633      	mov	r3, r6
 800469a:	462a      	mov	r2, r5
 800469c:	f7fb fdf4 	bl	8000288 <__aeabi_dsub>
 80046a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80046a4:	4656      	mov	r6, sl
 80046a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046aa:	f7fc fa55 	bl	8000b58 <__aeabi_d2iz>
 80046ae:	4605      	mov	r5, r0
 80046b0:	f7fb ff38 	bl	8000524 <__aeabi_i2d>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046bc:	f7fb fde4 	bl	8000288 <__aeabi_dsub>
 80046c0:	3530      	adds	r5, #48	@ 0x30
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046ca:	f806 5b01 	strb.w	r5, [r6], #1
 80046ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80046d2:	f7fc fa03 	bl	8000adc <__aeabi_dcmplt>
 80046d6:	2800      	cmp	r0, #0
 80046d8:	d171      	bne.n	80047be <_dtoa_r+0x65e>
 80046da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046de:	4911      	ldr	r1, [pc, #68]	@ (8004724 <_dtoa_r+0x5c4>)
 80046e0:	2000      	movs	r0, #0
 80046e2:	f7fb fdd1 	bl	8000288 <__aeabi_dsub>
 80046e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80046ea:	f7fc f9f7 	bl	8000adc <__aeabi_dcmplt>
 80046ee:	2800      	cmp	r0, #0
 80046f0:	f040 8095 	bne.w	800481e <_dtoa_r+0x6be>
 80046f4:	42a6      	cmp	r6, r4
 80046f6:	f43f af50 	beq.w	800459a <_dtoa_r+0x43a>
 80046fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80046fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004728 <_dtoa_r+0x5c8>)
 8004700:	2200      	movs	r2, #0
 8004702:	f7fb ff79 	bl	80005f8 <__aeabi_dmul>
 8004706:	4b08      	ldr	r3, [pc, #32]	@ (8004728 <_dtoa_r+0x5c8>)
 8004708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800470c:	2200      	movs	r2, #0
 800470e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004712:	f7fb ff71 	bl	80005f8 <__aeabi_dmul>
 8004716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800471a:	e7c4      	b.n	80046a6 <_dtoa_r+0x546>
 800471c:	08005e38 	.word	0x08005e38
 8004720:	08005e10 	.word	0x08005e10
 8004724:	3ff00000 	.word	0x3ff00000
 8004728:	40240000 	.word	0x40240000
 800472c:	401c0000 	.word	0x401c0000
 8004730:	40140000 	.word	0x40140000
 8004734:	3fe00000 	.word	0x3fe00000
 8004738:	4631      	mov	r1, r6
 800473a:	4628      	mov	r0, r5
 800473c:	f7fb ff5c 	bl	80005f8 <__aeabi_dmul>
 8004740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004744:	9415      	str	r4, [sp, #84]	@ 0x54
 8004746:	4656      	mov	r6, sl
 8004748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800474c:	f7fc fa04 	bl	8000b58 <__aeabi_d2iz>
 8004750:	4605      	mov	r5, r0
 8004752:	f7fb fee7 	bl	8000524 <__aeabi_i2d>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800475e:	f7fb fd93 	bl	8000288 <__aeabi_dsub>
 8004762:	3530      	adds	r5, #48	@ 0x30
 8004764:	f806 5b01 	strb.w	r5, [r6], #1
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	42a6      	cmp	r6, r4
 800476e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	d124      	bne.n	80047c2 <_dtoa_r+0x662>
 8004778:	4bac      	ldr	r3, [pc, #688]	@ (8004a2c <_dtoa_r+0x8cc>)
 800477a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800477e:	f7fb fd85 	bl	800028c <__adddf3>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800478a:	f7fc f9c5 	bl	8000b18 <__aeabi_dcmpgt>
 800478e:	2800      	cmp	r0, #0
 8004790:	d145      	bne.n	800481e <_dtoa_r+0x6be>
 8004792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004796:	49a5      	ldr	r1, [pc, #660]	@ (8004a2c <_dtoa_r+0x8cc>)
 8004798:	2000      	movs	r0, #0
 800479a:	f7fb fd75 	bl	8000288 <__aeabi_dsub>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047a6:	f7fc f999 	bl	8000adc <__aeabi_dcmplt>
 80047aa:	2800      	cmp	r0, #0
 80047ac:	f43f aef5 	beq.w	800459a <_dtoa_r+0x43a>
 80047b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80047b2:	1e73      	subs	r3, r6, #1
 80047b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80047b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80047ba:	2b30      	cmp	r3, #48	@ 0x30
 80047bc:	d0f8      	beq.n	80047b0 <_dtoa_r+0x650>
 80047be:	9f04      	ldr	r7, [sp, #16]
 80047c0:	e73e      	b.n	8004640 <_dtoa_r+0x4e0>
 80047c2:	4b9b      	ldr	r3, [pc, #620]	@ (8004a30 <_dtoa_r+0x8d0>)
 80047c4:	f7fb ff18 	bl	80005f8 <__aeabi_dmul>
 80047c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047cc:	e7bc      	b.n	8004748 <_dtoa_r+0x5e8>
 80047ce:	d10c      	bne.n	80047ea <_dtoa_r+0x68a>
 80047d0:	4b98      	ldr	r3, [pc, #608]	@ (8004a34 <_dtoa_r+0x8d4>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047d8:	f7fb ff0e 	bl	80005f8 <__aeabi_dmul>
 80047dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047e0:	f7fc f990 	bl	8000b04 <__aeabi_dcmpge>
 80047e4:	2800      	cmp	r0, #0
 80047e6:	f000 8157 	beq.w	8004a98 <_dtoa_r+0x938>
 80047ea:	2400      	movs	r4, #0
 80047ec:	4625      	mov	r5, r4
 80047ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047f0:	43db      	mvns	r3, r3
 80047f2:	9304      	str	r3, [sp, #16]
 80047f4:	4656      	mov	r6, sl
 80047f6:	2700      	movs	r7, #0
 80047f8:	4621      	mov	r1, r4
 80047fa:	4658      	mov	r0, fp
 80047fc:	f000 fbb4 	bl	8004f68 <_Bfree>
 8004800:	2d00      	cmp	r5, #0
 8004802:	d0dc      	beq.n	80047be <_dtoa_r+0x65e>
 8004804:	b12f      	cbz	r7, 8004812 <_dtoa_r+0x6b2>
 8004806:	42af      	cmp	r7, r5
 8004808:	d003      	beq.n	8004812 <_dtoa_r+0x6b2>
 800480a:	4639      	mov	r1, r7
 800480c:	4658      	mov	r0, fp
 800480e:	f000 fbab 	bl	8004f68 <_Bfree>
 8004812:	4629      	mov	r1, r5
 8004814:	4658      	mov	r0, fp
 8004816:	f000 fba7 	bl	8004f68 <_Bfree>
 800481a:	e7d0      	b.n	80047be <_dtoa_r+0x65e>
 800481c:	9704      	str	r7, [sp, #16]
 800481e:	4633      	mov	r3, r6
 8004820:	461e      	mov	r6, r3
 8004822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004826:	2a39      	cmp	r2, #57	@ 0x39
 8004828:	d107      	bne.n	800483a <_dtoa_r+0x6da>
 800482a:	459a      	cmp	sl, r3
 800482c:	d1f8      	bne.n	8004820 <_dtoa_r+0x6c0>
 800482e:	9a04      	ldr	r2, [sp, #16]
 8004830:	3201      	adds	r2, #1
 8004832:	9204      	str	r2, [sp, #16]
 8004834:	2230      	movs	r2, #48	@ 0x30
 8004836:	f88a 2000 	strb.w	r2, [sl]
 800483a:	781a      	ldrb	r2, [r3, #0]
 800483c:	3201      	adds	r2, #1
 800483e:	701a      	strb	r2, [r3, #0]
 8004840:	e7bd      	b.n	80047be <_dtoa_r+0x65e>
 8004842:	4b7b      	ldr	r3, [pc, #492]	@ (8004a30 <_dtoa_r+0x8d0>)
 8004844:	2200      	movs	r2, #0
 8004846:	f7fb fed7 	bl	80005f8 <__aeabi_dmul>
 800484a:	2200      	movs	r2, #0
 800484c:	2300      	movs	r3, #0
 800484e:	4604      	mov	r4, r0
 8004850:	460d      	mov	r5, r1
 8004852:	f7fc f939 	bl	8000ac8 <__aeabi_dcmpeq>
 8004856:	2800      	cmp	r0, #0
 8004858:	f43f aebb 	beq.w	80045d2 <_dtoa_r+0x472>
 800485c:	e6f0      	b.n	8004640 <_dtoa_r+0x4e0>
 800485e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004860:	2a00      	cmp	r2, #0
 8004862:	f000 80db 	beq.w	8004a1c <_dtoa_r+0x8bc>
 8004866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004868:	2a01      	cmp	r2, #1
 800486a:	f300 80bf 	bgt.w	80049ec <_dtoa_r+0x88c>
 800486e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004870:	2a00      	cmp	r2, #0
 8004872:	f000 80b7 	beq.w	80049e4 <_dtoa_r+0x884>
 8004876:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800487a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800487c:	4646      	mov	r6, r8
 800487e:	9a08      	ldr	r2, [sp, #32]
 8004880:	2101      	movs	r1, #1
 8004882:	441a      	add	r2, r3
 8004884:	4658      	mov	r0, fp
 8004886:	4498      	add	r8, r3
 8004888:	9208      	str	r2, [sp, #32]
 800488a:	f000 fc21 	bl	80050d0 <__i2b>
 800488e:	4605      	mov	r5, r0
 8004890:	b15e      	cbz	r6, 80048aa <_dtoa_r+0x74a>
 8004892:	9b08      	ldr	r3, [sp, #32]
 8004894:	2b00      	cmp	r3, #0
 8004896:	dd08      	ble.n	80048aa <_dtoa_r+0x74a>
 8004898:	42b3      	cmp	r3, r6
 800489a:	9a08      	ldr	r2, [sp, #32]
 800489c:	bfa8      	it	ge
 800489e:	4633      	movge	r3, r6
 80048a0:	eba8 0803 	sub.w	r8, r8, r3
 80048a4:	1af6      	subs	r6, r6, r3
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	9308      	str	r3, [sp, #32]
 80048aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048ac:	b1f3      	cbz	r3, 80048ec <_dtoa_r+0x78c>
 80048ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80b7 	beq.w	8004a24 <_dtoa_r+0x8c4>
 80048b6:	b18c      	cbz	r4, 80048dc <_dtoa_r+0x77c>
 80048b8:	4629      	mov	r1, r5
 80048ba:	4622      	mov	r2, r4
 80048bc:	4658      	mov	r0, fp
 80048be:	f000 fcc7 	bl	8005250 <__pow5mult>
 80048c2:	464a      	mov	r2, r9
 80048c4:	4601      	mov	r1, r0
 80048c6:	4605      	mov	r5, r0
 80048c8:	4658      	mov	r0, fp
 80048ca:	f000 fc17 	bl	80050fc <__multiply>
 80048ce:	4649      	mov	r1, r9
 80048d0:	9004      	str	r0, [sp, #16]
 80048d2:	4658      	mov	r0, fp
 80048d4:	f000 fb48 	bl	8004f68 <_Bfree>
 80048d8:	9b04      	ldr	r3, [sp, #16]
 80048da:	4699      	mov	r9, r3
 80048dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048de:	1b1a      	subs	r2, r3, r4
 80048e0:	d004      	beq.n	80048ec <_dtoa_r+0x78c>
 80048e2:	4649      	mov	r1, r9
 80048e4:	4658      	mov	r0, fp
 80048e6:	f000 fcb3 	bl	8005250 <__pow5mult>
 80048ea:	4681      	mov	r9, r0
 80048ec:	2101      	movs	r1, #1
 80048ee:	4658      	mov	r0, fp
 80048f0:	f000 fbee 	bl	80050d0 <__i2b>
 80048f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80048f6:	4604      	mov	r4, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 81cf 	beq.w	8004c9c <_dtoa_r+0xb3c>
 80048fe:	461a      	mov	r2, r3
 8004900:	4601      	mov	r1, r0
 8004902:	4658      	mov	r0, fp
 8004904:	f000 fca4 	bl	8005250 <__pow5mult>
 8004908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800490a:	2b01      	cmp	r3, #1
 800490c:	4604      	mov	r4, r0
 800490e:	f300 8095 	bgt.w	8004a3c <_dtoa_r+0x8dc>
 8004912:	9b02      	ldr	r3, [sp, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f040 8087 	bne.w	8004a28 <_dtoa_r+0x8c8>
 800491a:	9b03      	ldr	r3, [sp, #12]
 800491c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004920:	2b00      	cmp	r3, #0
 8004922:	f040 8089 	bne.w	8004a38 <_dtoa_r+0x8d8>
 8004926:	9b03      	ldr	r3, [sp, #12]
 8004928:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800492c:	0d1b      	lsrs	r3, r3, #20
 800492e:	051b      	lsls	r3, r3, #20
 8004930:	b12b      	cbz	r3, 800493e <_dtoa_r+0x7de>
 8004932:	9b08      	ldr	r3, [sp, #32]
 8004934:	3301      	adds	r3, #1
 8004936:	9308      	str	r3, [sp, #32]
 8004938:	f108 0801 	add.w	r8, r8, #1
 800493c:	2301      	movs	r3, #1
 800493e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 81b0 	beq.w	8004ca8 <_dtoa_r+0xb48>
 8004948:	6923      	ldr	r3, [r4, #16]
 800494a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800494e:	6918      	ldr	r0, [r3, #16]
 8004950:	f000 fb72 	bl	8005038 <__hi0bits>
 8004954:	f1c0 0020 	rsb	r0, r0, #32
 8004958:	9b08      	ldr	r3, [sp, #32]
 800495a:	4418      	add	r0, r3
 800495c:	f010 001f 	ands.w	r0, r0, #31
 8004960:	d077      	beq.n	8004a52 <_dtoa_r+0x8f2>
 8004962:	f1c0 0320 	rsb	r3, r0, #32
 8004966:	2b04      	cmp	r3, #4
 8004968:	dd6b      	ble.n	8004a42 <_dtoa_r+0x8e2>
 800496a:	9b08      	ldr	r3, [sp, #32]
 800496c:	f1c0 001c 	rsb	r0, r0, #28
 8004970:	4403      	add	r3, r0
 8004972:	4480      	add	r8, r0
 8004974:	4406      	add	r6, r0
 8004976:	9308      	str	r3, [sp, #32]
 8004978:	f1b8 0f00 	cmp.w	r8, #0
 800497c:	dd05      	ble.n	800498a <_dtoa_r+0x82a>
 800497e:	4649      	mov	r1, r9
 8004980:	4642      	mov	r2, r8
 8004982:	4658      	mov	r0, fp
 8004984:	f000 fcbe 	bl	8005304 <__lshift>
 8004988:	4681      	mov	r9, r0
 800498a:	9b08      	ldr	r3, [sp, #32]
 800498c:	2b00      	cmp	r3, #0
 800498e:	dd05      	ble.n	800499c <_dtoa_r+0x83c>
 8004990:	4621      	mov	r1, r4
 8004992:	461a      	mov	r2, r3
 8004994:	4658      	mov	r0, fp
 8004996:	f000 fcb5 	bl	8005304 <__lshift>
 800499a:	4604      	mov	r4, r0
 800499c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d059      	beq.n	8004a56 <_dtoa_r+0x8f6>
 80049a2:	4621      	mov	r1, r4
 80049a4:	4648      	mov	r0, r9
 80049a6:	f000 fd19 	bl	80053dc <__mcmp>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	da53      	bge.n	8004a56 <_dtoa_r+0x8f6>
 80049ae:	1e7b      	subs	r3, r7, #1
 80049b0:	9304      	str	r3, [sp, #16]
 80049b2:	4649      	mov	r1, r9
 80049b4:	2300      	movs	r3, #0
 80049b6:	220a      	movs	r2, #10
 80049b8:	4658      	mov	r0, fp
 80049ba:	f000 faf7 	bl	8004fac <__multadd>
 80049be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049c0:	4681      	mov	r9, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 8172 	beq.w	8004cac <_dtoa_r+0xb4c>
 80049c8:	2300      	movs	r3, #0
 80049ca:	4629      	mov	r1, r5
 80049cc:	220a      	movs	r2, #10
 80049ce:	4658      	mov	r0, fp
 80049d0:	f000 faec 	bl	8004fac <__multadd>
 80049d4:	9b00      	ldr	r3, [sp, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	4605      	mov	r5, r0
 80049da:	dc67      	bgt.n	8004aac <_dtoa_r+0x94c>
 80049dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049de:	2b02      	cmp	r3, #2
 80049e0:	dc41      	bgt.n	8004a66 <_dtoa_r+0x906>
 80049e2:	e063      	b.n	8004aac <_dtoa_r+0x94c>
 80049e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80049e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80049ea:	e746      	b.n	800487a <_dtoa_r+0x71a>
 80049ec:	9b07      	ldr	r3, [sp, #28]
 80049ee:	1e5c      	subs	r4, r3, #1
 80049f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049f2:	42a3      	cmp	r3, r4
 80049f4:	bfbf      	itttt	lt
 80049f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80049f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80049fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80049fc:	1ae3      	sublt	r3, r4, r3
 80049fe:	bfb4      	ite	lt
 8004a00:	18d2      	addlt	r2, r2, r3
 8004a02:	1b1c      	subge	r4, r3, r4
 8004a04:	9b07      	ldr	r3, [sp, #28]
 8004a06:	bfbc      	itt	lt
 8004a08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004a0a:	2400      	movlt	r4, #0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bfb5      	itete	lt
 8004a10:	eba8 0603 	sublt.w	r6, r8, r3
 8004a14:	9b07      	ldrge	r3, [sp, #28]
 8004a16:	2300      	movlt	r3, #0
 8004a18:	4646      	movge	r6, r8
 8004a1a:	e730      	b.n	800487e <_dtoa_r+0x71e>
 8004a1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004a1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004a20:	4646      	mov	r6, r8
 8004a22:	e735      	b.n	8004890 <_dtoa_r+0x730>
 8004a24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a26:	e75c      	b.n	80048e2 <_dtoa_r+0x782>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e788      	b.n	800493e <_dtoa_r+0x7de>
 8004a2c:	3fe00000 	.word	0x3fe00000
 8004a30:	40240000 	.word	0x40240000
 8004a34:	40140000 	.word	0x40140000
 8004a38:	9b02      	ldr	r3, [sp, #8]
 8004a3a:	e780      	b.n	800493e <_dtoa_r+0x7de>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a40:	e782      	b.n	8004948 <_dtoa_r+0x7e8>
 8004a42:	d099      	beq.n	8004978 <_dtoa_r+0x818>
 8004a44:	9a08      	ldr	r2, [sp, #32]
 8004a46:	331c      	adds	r3, #28
 8004a48:	441a      	add	r2, r3
 8004a4a:	4498      	add	r8, r3
 8004a4c:	441e      	add	r6, r3
 8004a4e:	9208      	str	r2, [sp, #32]
 8004a50:	e792      	b.n	8004978 <_dtoa_r+0x818>
 8004a52:	4603      	mov	r3, r0
 8004a54:	e7f6      	b.n	8004a44 <_dtoa_r+0x8e4>
 8004a56:	9b07      	ldr	r3, [sp, #28]
 8004a58:	9704      	str	r7, [sp, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	dc20      	bgt.n	8004aa0 <_dtoa_r+0x940>
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	dd1e      	ble.n	8004aa4 <_dtoa_r+0x944>
 8004a66:	9b00      	ldr	r3, [sp, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f47f aec0 	bne.w	80047ee <_dtoa_r+0x68e>
 8004a6e:	4621      	mov	r1, r4
 8004a70:	2205      	movs	r2, #5
 8004a72:	4658      	mov	r0, fp
 8004a74:	f000 fa9a 	bl	8004fac <__multadd>
 8004a78:	4601      	mov	r1, r0
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	4648      	mov	r0, r9
 8004a7e:	f000 fcad 	bl	80053dc <__mcmp>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	f77f aeb3 	ble.w	80047ee <_dtoa_r+0x68e>
 8004a88:	4656      	mov	r6, sl
 8004a8a:	2331      	movs	r3, #49	@ 0x31
 8004a8c:	f806 3b01 	strb.w	r3, [r6], #1
 8004a90:	9b04      	ldr	r3, [sp, #16]
 8004a92:	3301      	adds	r3, #1
 8004a94:	9304      	str	r3, [sp, #16]
 8004a96:	e6ae      	b.n	80047f6 <_dtoa_r+0x696>
 8004a98:	9c07      	ldr	r4, [sp, #28]
 8004a9a:	9704      	str	r7, [sp, #16]
 8004a9c:	4625      	mov	r5, r4
 8004a9e:	e7f3      	b.n	8004a88 <_dtoa_r+0x928>
 8004aa0:	9b07      	ldr	r3, [sp, #28]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8104 	beq.w	8004cb4 <_dtoa_r+0xb54>
 8004aac:	2e00      	cmp	r6, #0
 8004aae:	dd05      	ble.n	8004abc <_dtoa_r+0x95c>
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	4632      	mov	r2, r6
 8004ab4:	4658      	mov	r0, fp
 8004ab6:	f000 fc25 	bl	8005304 <__lshift>
 8004aba:	4605      	mov	r5, r0
 8004abc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d05a      	beq.n	8004b78 <_dtoa_r+0xa18>
 8004ac2:	6869      	ldr	r1, [r5, #4]
 8004ac4:	4658      	mov	r0, fp
 8004ac6:	f000 fa0f 	bl	8004ee8 <_Balloc>
 8004aca:	4606      	mov	r6, r0
 8004acc:	b928      	cbnz	r0, 8004ada <_dtoa_r+0x97a>
 8004ace:	4b84      	ldr	r3, [pc, #528]	@ (8004ce0 <_dtoa_r+0xb80>)
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004ad6:	f7ff bb5a 	b.w	800418e <_dtoa_r+0x2e>
 8004ada:	692a      	ldr	r2, [r5, #16]
 8004adc:	3202      	adds	r2, #2
 8004ade:	0092      	lsls	r2, r2, #2
 8004ae0:	f105 010c 	add.w	r1, r5, #12
 8004ae4:	300c      	adds	r0, #12
 8004ae6:	f001 f803 	bl	8005af0 <memcpy>
 8004aea:	2201      	movs	r2, #1
 8004aec:	4631      	mov	r1, r6
 8004aee:	4658      	mov	r0, fp
 8004af0:	f000 fc08 	bl	8005304 <__lshift>
 8004af4:	f10a 0301 	add.w	r3, sl, #1
 8004af8:	9307      	str	r3, [sp, #28]
 8004afa:	9b00      	ldr	r3, [sp, #0]
 8004afc:	4453      	add	r3, sl
 8004afe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b00:	9b02      	ldr	r3, [sp, #8]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	462f      	mov	r7, r5
 8004b08:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b0a:	4605      	mov	r5, r0
 8004b0c:	9b07      	ldr	r3, [sp, #28]
 8004b0e:	4621      	mov	r1, r4
 8004b10:	3b01      	subs	r3, #1
 8004b12:	4648      	mov	r0, r9
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	f7ff fa98 	bl	800404a <quorem>
 8004b1a:	4639      	mov	r1, r7
 8004b1c:	9002      	str	r0, [sp, #8]
 8004b1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004b22:	4648      	mov	r0, r9
 8004b24:	f000 fc5a 	bl	80053dc <__mcmp>
 8004b28:	462a      	mov	r2, r5
 8004b2a:	9008      	str	r0, [sp, #32]
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	4658      	mov	r0, fp
 8004b30:	f000 fc70 	bl	8005414 <__mdiff>
 8004b34:	68c2      	ldr	r2, [r0, #12]
 8004b36:	4606      	mov	r6, r0
 8004b38:	bb02      	cbnz	r2, 8004b7c <_dtoa_r+0xa1c>
 8004b3a:	4601      	mov	r1, r0
 8004b3c:	4648      	mov	r0, r9
 8004b3e:	f000 fc4d 	bl	80053dc <__mcmp>
 8004b42:	4602      	mov	r2, r0
 8004b44:	4631      	mov	r1, r6
 8004b46:	4658      	mov	r0, fp
 8004b48:	920e      	str	r2, [sp, #56]	@ 0x38
 8004b4a:	f000 fa0d 	bl	8004f68 <_Bfree>
 8004b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b52:	9e07      	ldr	r6, [sp, #28]
 8004b54:	ea43 0102 	orr.w	r1, r3, r2
 8004b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b5a:	4319      	orrs	r1, r3
 8004b5c:	d110      	bne.n	8004b80 <_dtoa_r+0xa20>
 8004b5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004b62:	d029      	beq.n	8004bb8 <_dtoa_r+0xa58>
 8004b64:	9b08      	ldr	r3, [sp, #32]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	dd02      	ble.n	8004b70 <_dtoa_r+0xa10>
 8004b6a:	9b02      	ldr	r3, [sp, #8]
 8004b6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004b70:	9b00      	ldr	r3, [sp, #0]
 8004b72:	f883 8000 	strb.w	r8, [r3]
 8004b76:	e63f      	b.n	80047f8 <_dtoa_r+0x698>
 8004b78:	4628      	mov	r0, r5
 8004b7a:	e7bb      	b.n	8004af4 <_dtoa_r+0x994>
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	e7e1      	b.n	8004b44 <_dtoa_r+0x9e4>
 8004b80:	9b08      	ldr	r3, [sp, #32]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	db04      	blt.n	8004b90 <_dtoa_r+0xa30>
 8004b86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	d120      	bne.n	8004bd2 <_dtoa_r+0xa72>
 8004b90:	2a00      	cmp	r2, #0
 8004b92:	dded      	ble.n	8004b70 <_dtoa_r+0xa10>
 8004b94:	4649      	mov	r1, r9
 8004b96:	2201      	movs	r2, #1
 8004b98:	4658      	mov	r0, fp
 8004b9a:	f000 fbb3 	bl	8005304 <__lshift>
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	4681      	mov	r9, r0
 8004ba2:	f000 fc1b 	bl	80053dc <__mcmp>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	dc03      	bgt.n	8004bb2 <_dtoa_r+0xa52>
 8004baa:	d1e1      	bne.n	8004b70 <_dtoa_r+0xa10>
 8004bac:	f018 0f01 	tst.w	r8, #1
 8004bb0:	d0de      	beq.n	8004b70 <_dtoa_r+0xa10>
 8004bb2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004bb6:	d1d8      	bne.n	8004b6a <_dtoa_r+0xa0a>
 8004bb8:	9a00      	ldr	r2, [sp, #0]
 8004bba:	2339      	movs	r3, #57	@ 0x39
 8004bbc:	7013      	strb	r3, [r2, #0]
 8004bbe:	4633      	mov	r3, r6
 8004bc0:	461e      	mov	r6, r3
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004bc8:	2a39      	cmp	r2, #57	@ 0x39
 8004bca:	d052      	beq.n	8004c72 <_dtoa_r+0xb12>
 8004bcc:	3201      	adds	r2, #1
 8004bce:	701a      	strb	r2, [r3, #0]
 8004bd0:	e612      	b.n	80047f8 <_dtoa_r+0x698>
 8004bd2:	2a00      	cmp	r2, #0
 8004bd4:	dd07      	ble.n	8004be6 <_dtoa_r+0xa86>
 8004bd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004bda:	d0ed      	beq.n	8004bb8 <_dtoa_r+0xa58>
 8004bdc:	9a00      	ldr	r2, [sp, #0]
 8004bde:	f108 0301 	add.w	r3, r8, #1
 8004be2:	7013      	strb	r3, [r2, #0]
 8004be4:	e608      	b.n	80047f8 <_dtoa_r+0x698>
 8004be6:	9b07      	ldr	r3, [sp, #28]
 8004be8:	9a07      	ldr	r2, [sp, #28]
 8004bea:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004bee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d028      	beq.n	8004c46 <_dtoa_r+0xae6>
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	220a      	movs	r2, #10
 8004bfa:	4658      	mov	r0, fp
 8004bfc:	f000 f9d6 	bl	8004fac <__multadd>
 8004c00:	42af      	cmp	r7, r5
 8004c02:	4681      	mov	r9, r0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	f04f 020a 	mov.w	r2, #10
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	4658      	mov	r0, fp
 8004c10:	d107      	bne.n	8004c22 <_dtoa_r+0xac2>
 8004c12:	f000 f9cb 	bl	8004fac <__multadd>
 8004c16:	4607      	mov	r7, r0
 8004c18:	4605      	mov	r5, r0
 8004c1a:	9b07      	ldr	r3, [sp, #28]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	9307      	str	r3, [sp, #28]
 8004c20:	e774      	b.n	8004b0c <_dtoa_r+0x9ac>
 8004c22:	f000 f9c3 	bl	8004fac <__multadd>
 8004c26:	4629      	mov	r1, r5
 8004c28:	4607      	mov	r7, r0
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	220a      	movs	r2, #10
 8004c2e:	4658      	mov	r0, fp
 8004c30:	f000 f9bc 	bl	8004fac <__multadd>
 8004c34:	4605      	mov	r5, r0
 8004c36:	e7f0      	b.n	8004c1a <_dtoa_r+0xaba>
 8004c38:	9b00      	ldr	r3, [sp, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	bfcc      	ite	gt
 8004c3e:	461e      	movgt	r6, r3
 8004c40:	2601      	movle	r6, #1
 8004c42:	4456      	add	r6, sl
 8004c44:	2700      	movs	r7, #0
 8004c46:	4649      	mov	r1, r9
 8004c48:	2201      	movs	r2, #1
 8004c4a:	4658      	mov	r0, fp
 8004c4c:	f000 fb5a 	bl	8005304 <__lshift>
 8004c50:	4621      	mov	r1, r4
 8004c52:	4681      	mov	r9, r0
 8004c54:	f000 fbc2 	bl	80053dc <__mcmp>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	dcb0      	bgt.n	8004bbe <_dtoa_r+0xa5e>
 8004c5c:	d102      	bne.n	8004c64 <_dtoa_r+0xb04>
 8004c5e:	f018 0f01 	tst.w	r8, #1
 8004c62:	d1ac      	bne.n	8004bbe <_dtoa_r+0xa5e>
 8004c64:	4633      	mov	r3, r6
 8004c66:	461e      	mov	r6, r3
 8004c68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c6c:	2a30      	cmp	r2, #48	@ 0x30
 8004c6e:	d0fa      	beq.n	8004c66 <_dtoa_r+0xb06>
 8004c70:	e5c2      	b.n	80047f8 <_dtoa_r+0x698>
 8004c72:	459a      	cmp	sl, r3
 8004c74:	d1a4      	bne.n	8004bc0 <_dtoa_r+0xa60>
 8004c76:	9b04      	ldr	r3, [sp, #16]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	9304      	str	r3, [sp, #16]
 8004c7c:	2331      	movs	r3, #49	@ 0x31
 8004c7e:	f88a 3000 	strb.w	r3, [sl]
 8004c82:	e5b9      	b.n	80047f8 <_dtoa_r+0x698>
 8004c84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004c86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004ce4 <_dtoa_r+0xb84>
 8004c8a:	b11b      	cbz	r3, 8004c94 <_dtoa_r+0xb34>
 8004c8c:	f10a 0308 	add.w	r3, sl, #8
 8004c90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	4650      	mov	r0, sl
 8004c96:	b019      	add	sp, #100	@ 0x64
 8004c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	f77f ae37 	ble.w	8004912 <_dtoa_r+0x7b2>
 8004ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ca8:	2001      	movs	r0, #1
 8004caa:	e655      	b.n	8004958 <_dtoa_r+0x7f8>
 8004cac:	9b00      	ldr	r3, [sp, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f77f aed6 	ble.w	8004a60 <_dtoa_r+0x900>
 8004cb4:	4656      	mov	r6, sl
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	4648      	mov	r0, r9
 8004cba:	f7ff f9c6 	bl	800404a <quorem>
 8004cbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004cc2:	f806 8b01 	strb.w	r8, [r6], #1
 8004cc6:	9b00      	ldr	r3, [sp, #0]
 8004cc8:	eba6 020a 	sub.w	r2, r6, sl
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	ddb3      	ble.n	8004c38 <_dtoa_r+0xad8>
 8004cd0:	4649      	mov	r1, r9
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	220a      	movs	r2, #10
 8004cd6:	4658      	mov	r0, fp
 8004cd8:	f000 f968 	bl	8004fac <__multadd>
 8004cdc:	4681      	mov	r9, r0
 8004cde:	e7ea      	b.n	8004cb6 <_dtoa_r+0xb56>
 8004ce0:	08005d94 	.word	0x08005d94
 8004ce4:	08005d18 	.word	0x08005d18

08004ce8 <_free_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4605      	mov	r5, r0
 8004cec:	2900      	cmp	r1, #0
 8004cee:	d041      	beq.n	8004d74 <_free_r+0x8c>
 8004cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cf4:	1f0c      	subs	r4, r1, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bfb8      	it	lt
 8004cfa:	18e4      	addlt	r4, r4, r3
 8004cfc:	f000 f8e8 	bl	8004ed0 <__malloc_lock>
 8004d00:	4a1d      	ldr	r2, [pc, #116]	@ (8004d78 <_free_r+0x90>)
 8004d02:	6813      	ldr	r3, [r2, #0]
 8004d04:	b933      	cbnz	r3, 8004d14 <_free_r+0x2c>
 8004d06:	6063      	str	r3, [r4, #4]
 8004d08:	6014      	str	r4, [r2, #0]
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d10:	f000 b8e4 	b.w	8004edc <__malloc_unlock>
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	d908      	bls.n	8004d2a <_free_r+0x42>
 8004d18:	6820      	ldr	r0, [r4, #0]
 8004d1a:	1821      	adds	r1, r4, r0
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	bf01      	itttt	eq
 8004d20:	6819      	ldreq	r1, [r3, #0]
 8004d22:	685b      	ldreq	r3, [r3, #4]
 8004d24:	1809      	addeq	r1, r1, r0
 8004d26:	6021      	streq	r1, [r4, #0]
 8004d28:	e7ed      	b.n	8004d06 <_free_r+0x1e>
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	b10b      	cbz	r3, 8004d34 <_free_r+0x4c>
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	d9fa      	bls.n	8004d2a <_free_r+0x42>
 8004d34:	6811      	ldr	r1, [r2, #0]
 8004d36:	1850      	adds	r0, r2, r1
 8004d38:	42a0      	cmp	r0, r4
 8004d3a:	d10b      	bne.n	8004d54 <_free_r+0x6c>
 8004d3c:	6820      	ldr	r0, [r4, #0]
 8004d3e:	4401      	add	r1, r0
 8004d40:	1850      	adds	r0, r2, r1
 8004d42:	4283      	cmp	r3, r0
 8004d44:	6011      	str	r1, [r2, #0]
 8004d46:	d1e0      	bne.n	8004d0a <_free_r+0x22>
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	6053      	str	r3, [r2, #4]
 8004d4e:	4408      	add	r0, r1
 8004d50:	6010      	str	r0, [r2, #0]
 8004d52:	e7da      	b.n	8004d0a <_free_r+0x22>
 8004d54:	d902      	bls.n	8004d5c <_free_r+0x74>
 8004d56:	230c      	movs	r3, #12
 8004d58:	602b      	str	r3, [r5, #0]
 8004d5a:	e7d6      	b.n	8004d0a <_free_r+0x22>
 8004d5c:	6820      	ldr	r0, [r4, #0]
 8004d5e:	1821      	adds	r1, r4, r0
 8004d60:	428b      	cmp	r3, r1
 8004d62:	bf04      	itt	eq
 8004d64:	6819      	ldreq	r1, [r3, #0]
 8004d66:	685b      	ldreq	r3, [r3, #4]
 8004d68:	6063      	str	r3, [r4, #4]
 8004d6a:	bf04      	itt	eq
 8004d6c:	1809      	addeq	r1, r1, r0
 8004d6e:	6021      	streq	r1, [r4, #0]
 8004d70:	6054      	str	r4, [r2, #4]
 8004d72:	e7ca      	b.n	8004d0a <_free_r+0x22>
 8004d74:	bd38      	pop	{r3, r4, r5, pc}
 8004d76:	bf00      	nop
 8004d78:	2000039c 	.word	0x2000039c

08004d7c <malloc>:
 8004d7c:	4b02      	ldr	r3, [pc, #8]	@ (8004d88 <malloc+0xc>)
 8004d7e:	4601      	mov	r1, r0
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	f000 b825 	b.w	8004dd0 <_malloc_r>
 8004d86:	bf00      	nop
 8004d88:	20000018 	.word	0x20000018

08004d8c <sbrk_aligned>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	4e0f      	ldr	r6, [pc, #60]	@ (8004dcc <sbrk_aligned+0x40>)
 8004d90:	460c      	mov	r4, r1
 8004d92:	6831      	ldr	r1, [r6, #0]
 8004d94:	4605      	mov	r5, r0
 8004d96:	b911      	cbnz	r1, 8004d9e <sbrk_aligned+0x12>
 8004d98:	f000 fe9a 	bl	8005ad0 <_sbrk_r>
 8004d9c:	6030      	str	r0, [r6, #0]
 8004d9e:	4621      	mov	r1, r4
 8004da0:	4628      	mov	r0, r5
 8004da2:	f000 fe95 	bl	8005ad0 <_sbrk_r>
 8004da6:	1c43      	adds	r3, r0, #1
 8004da8:	d103      	bne.n	8004db2 <sbrk_aligned+0x26>
 8004daa:	f04f 34ff 	mov.w	r4, #4294967295
 8004dae:	4620      	mov	r0, r4
 8004db0:	bd70      	pop	{r4, r5, r6, pc}
 8004db2:	1cc4      	adds	r4, r0, #3
 8004db4:	f024 0403 	bic.w	r4, r4, #3
 8004db8:	42a0      	cmp	r0, r4
 8004dba:	d0f8      	beq.n	8004dae <sbrk_aligned+0x22>
 8004dbc:	1a21      	subs	r1, r4, r0
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f000 fe86 	bl	8005ad0 <_sbrk_r>
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d1f2      	bne.n	8004dae <sbrk_aligned+0x22>
 8004dc8:	e7ef      	b.n	8004daa <sbrk_aligned+0x1e>
 8004dca:	bf00      	nop
 8004dcc:	20000398 	.word	0x20000398

08004dd0 <_malloc_r>:
 8004dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dd4:	1ccd      	adds	r5, r1, #3
 8004dd6:	f025 0503 	bic.w	r5, r5, #3
 8004dda:	3508      	adds	r5, #8
 8004ddc:	2d0c      	cmp	r5, #12
 8004dde:	bf38      	it	cc
 8004de0:	250c      	movcc	r5, #12
 8004de2:	2d00      	cmp	r5, #0
 8004de4:	4606      	mov	r6, r0
 8004de6:	db01      	blt.n	8004dec <_malloc_r+0x1c>
 8004de8:	42a9      	cmp	r1, r5
 8004dea:	d904      	bls.n	8004df6 <_malloc_r+0x26>
 8004dec:	230c      	movs	r3, #12
 8004dee:	6033      	str	r3, [r6, #0]
 8004df0:	2000      	movs	r0, #0
 8004df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004df6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ecc <_malloc_r+0xfc>
 8004dfa:	f000 f869 	bl	8004ed0 <__malloc_lock>
 8004dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8004e02:	461c      	mov	r4, r3
 8004e04:	bb44      	cbnz	r4, 8004e58 <_malloc_r+0x88>
 8004e06:	4629      	mov	r1, r5
 8004e08:	4630      	mov	r0, r6
 8004e0a:	f7ff ffbf 	bl	8004d8c <sbrk_aligned>
 8004e0e:	1c43      	adds	r3, r0, #1
 8004e10:	4604      	mov	r4, r0
 8004e12:	d158      	bne.n	8004ec6 <_malloc_r+0xf6>
 8004e14:	f8d8 4000 	ldr.w	r4, [r8]
 8004e18:	4627      	mov	r7, r4
 8004e1a:	2f00      	cmp	r7, #0
 8004e1c:	d143      	bne.n	8004ea6 <_malloc_r+0xd6>
 8004e1e:	2c00      	cmp	r4, #0
 8004e20:	d04b      	beq.n	8004eba <_malloc_r+0xea>
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	4639      	mov	r1, r7
 8004e26:	4630      	mov	r0, r6
 8004e28:	eb04 0903 	add.w	r9, r4, r3
 8004e2c:	f000 fe50 	bl	8005ad0 <_sbrk_r>
 8004e30:	4581      	cmp	r9, r0
 8004e32:	d142      	bne.n	8004eba <_malloc_r+0xea>
 8004e34:	6821      	ldr	r1, [r4, #0]
 8004e36:	1a6d      	subs	r5, r5, r1
 8004e38:	4629      	mov	r1, r5
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	f7ff ffa6 	bl	8004d8c <sbrk_aligned>
 8004e40:	3001      	adds	r0, #1
 8004e42:	d03a      	beq.n	8004eba <_malloc_r+0xea>
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	442b      	add	r3, r5
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	bb62      	cbnz	r2, 8004eac <_malloc_r+0xdc>
 8004e52:	f8c8 7000 	str.w	r7, [r8]
 8004e56:	e00f      	b.n	8004e78 <_malloc_r+0xa8>
 8004e58:	6822      	ldr	r2, [r4, #0]
 8004e5a:	1b52      	subs	r2, r2, r5
 8004e5c:	d420      	bmi.n	8004ea0 <_malloc_r+0xd0>
 8004e5e:	2a0b      	cmp	r2, #11
 8004e60:	d917      	bls.n	8004e92 <_malloc_r+0xc2>
 8004e62:	1961      	adds	r1, r4, r5
 8004e64:	42a3      	cmp	r3, r4
 8004e66:	6025      	str	r5, [r4, #0]
 8004e68:	bf18      	it	ne
 8004e6a:	6059      	strne	r1, [r3, #4]
 8004e6c:	6863      	ldr	r3, [r4, #4]
 8004e6e:	bf08      	it	eq
 8004e70:	f8c8 1000 	streq.w	r1, [r8]
 8004e74:	5162      	str	r2, [r4, r5]
 8004e76:	604b      	str	r3, [r1, #4]
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f000 f82f 	bl	8004edc <__malloc_unlock>
 8004e7e:	f104 000b 	add.w	r0, r4, #11
 8004e82:	1d23      	adds	r3, r4, #4
 8004e84:	f020 0007 	bic.w	r0, r0, #7
 8004e88:	1ac2      	subs	r2, r0, r3
 8004e8a:	bf1c      	itt	ne
 8004e8c:	1a1b      	subne	r3, r3, r0
 8004e8e:	50a3      	strne	r3, [r4, r2]
 8004e90:	e7af      	b.n	8004df2 <_malloc_r+0x22>
 8004e92:	6862      	ldr	r2, [r4, #4]
 8004e94:	42a3      	cmp	r3, r4
 8004e96:	bf0c      	ite	eq
 8004e98:	f8c8 2000 	streq.w	r2, [r8]
 8004e9c:	605a      	strne	r2, [r3, #4]
 8004e9e:	e7eb      	b.n	8004e78 <_malloc_r+0xa8>
 8004ea0:	4623      	mov	r3, r4
 8004ea2:	6864      	ldr	r4, [r4, #4]
 8004ea4:	e7ae      	b.n	8004e04 <_malloc_r+0x34>
 8004ea6:	463c      	mov	r4, r7
 8004ea8:	687f      	ldr	r7, [r7, #4]
 8004eaa:	e7b6      	b.n	8004e1a <_malloc_r+0x4a>
 8004eac:	461a      	mov	r2, r3
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	42a3      	cmp	r3, r4
 8004eb2:	d1fb      	bne.n	8004eac <_malloc_r+0xdc>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	6053      	str	r3, [r2, #4]
 8004eb8:	e7de      	b.n	8004e78 <_malloc_r+0xa8>
 8004eba:	230c      	movs	r3, #12
 8004ebc:	6033      	str	r3, [r6, #0]
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f000 f80c 	bl	8004edc <__malloc_unlock>
 8004ec4:	e794      	b.n	8004df0 <_malloc_r+0x20>
 8004ec6:	6005      	str	r5, [r0, #0]
 8004ec8:	e7d6      	b.n	8004e78 <_malloc_r+0xa8>
 8004eca:	bf00      	nop
 8004ecc:	2000039c 	.word	0x2000039c

08004ed0 <__malloc_lock>:
 8004ed0:	4801      	ldr	r0, [pc, #4]	@ (8004ed8 <__malloc_lock+0x8>)
 8004ed2:	f7ff b8b8 	b.w	8004046 <__retarget_lock_acquire_recursive>
 8004ed6:	bf00      	nop
 8004ed8:	20000394 	.word	0x20000394

08004edc <__malloc_unlock>:
 8004edc:	4801      	ldr	r0, [pc, #4]	@ (8004ee4 <__malloc_unlock+0x8>)
 8004ede:	f7ff b8b3 	b.w	8004048 <__retarget_lock_release_recursive>
 8004ee2:	bf00      	nop
 8004ee4:	20000394 	.word	0x20000394

08004ee8 <_Balloc>:
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	69c6      	ldr	r6, [r0, #28]
 8004eec:	4604      	mov	r4, r0
 8004eee:	460d      	mov	r5, r1
 8004ef0:	b976      	cbnz	r6, 8004f10 <_Balloc+0x28>
 8004ef2:	2010      	movs	r0, #16
 8004ef4:	f7ff ff42 	bl	8004d7c <malloc>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	61e0      	str	r0, [r4, #28]
 8004efc:	b920      	cbnz	r0, 8004f08 <_Balloc+0x20>
 8004efe:	4b18      	ldr	r3, [pc, #96]	@ (8004f60 <_Balloc+0x78>)
 8004f00:	4818      	ldr	r0, [pc, #96]	@ (8004f64 <_Balloc+0x7c>)
 8004f02:	216b      	movs	r1, #107	@ 0x6b
 8004f04:	f000 fe02 	bl	8005b0c <__assert_func>
 8004f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f0c:	6006      	str	r6, [r0, #0]
 8004f0e:	60c6      	str	r6, [r0, #12]
 8004f10:	69e6      	ldr	r6, [r4, #28]
 8004f12:	68f3      	ldr	r3, [r6, #12]
 8004f14:	b183      	cbz	r3, 8004f38 <_Balloc+0x50>
 8004f16:	69e3      	ldr	r3, [r4, #28]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f1e:	b9b8      	cbnz	r0, 8004f50 <_Balloc+0x68>
 8004f20:	2101      	movs	r1, #1
 8004f22:	fa01 f605 	lsl.w	r6, r1, r5
 8004f26:	1d72      	adds	r2, r6, #5
 8004f28:	0092      	lsls	r2, r2, #2
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f000 fe0c 	bl	8005b48 <_calloc_r>
 8004f30:	b160      	cbz	r0, 8004f4c <_Balloc+0x64>
 8004f32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f36:	e00e      	b.n	8004f56 <_Balloc+0x6e>
 8004f38:	2221      	movs	r2, #33	@ 0x21
 8004f3a:	2104      	movs	r1, #4
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f000 fe03 	bl	8005b48 <_calloc_r>
 8004f42:	69e3      	ldr	r3, [r4, #28]
 8004f44:	60f0      	str	r0, [r6, #12]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e4      	bne.n	8004f16 <_Balloc+0x2e>
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	6802      	ldr	r2, [r0, #0]
 8004f52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004f56:	2300      	movs	r3, #0
 8004f58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f5c:	e7f7      	b.n	8004f4e <_Balloc+0x66>
 8004f5e:	bf00      	nop
 8004f60:	08005d25 	.word	0x08005d25
 8004f64:	08005da5 	.word	0x08005da5

08004f68 <_Bfree>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	69c6      	ldr	r6, [r0, #28]
 8004f6c:	4605      	mov	r5, r0
 8004f6e:	460c      	mov	r4, r1
 8004f70:	b976      	cbnz	r6, 8004f90 <_Bfree+0x28>
 8004f72:	2010      	movs	r0, #16
 8004f74:	f7ff ff02 	bl	8004d7c <malloc>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	61e8      	str	r0, [r5, #28]
 8004f7c:	b920      	cbnz	r0, 8004f88 <_Bfree+0x20>
 8004f7e:	4b09      	ldr	r3, [pc, #36]	@ (8004fa4 <_Bfree+0x3c>)
 8004f80:	4809      	ldr	r0, [pc, #36]	@ (8004fa8 <_Bfree+0x40>)
 8004f82:	218f      	movs	r1, #143	@ 0x8f
 8004f84:	f000 fdc2 	bl	8005b0c <__assert_func>
 8004f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f8c:	6006      	str	r6, [r0, #0]
 8004f8e:	60c6      	str	r6, [r0, #12]
 8004f90:	b13c      	cbz	r4, 8004fa2 <_Bfree+0x3a>
 8004f92:	69eb      	ldr	r3, [r5, #28]
 8004f94:	6862      	ldr	r2, [r4, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f9c:	6021      	str	r1, [r4, #0]
 8004f9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
 8004fa4:	08005d25 	.word	0x08005d25
 8004fa8:	08005da5 	.word	0x08005da5

08004fac <__multadd>:
 8004fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb0:	690d      	ldr	r5, [r1, #16]
 8004fb2:	4607      	mov	r7, r0
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	461e      	mov	r6, r3
 8004fb8:	f101 0c14 	add.w	ip, r1, #20
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f8dc 3000 	ldr.w	r3, [ip]
 8004fc2:	b299      	uxth	r1, r3
 8004fc4:	fb02 6101 	mla	r1, r2, r1, r6
 8004fc8:	0c1e      	lsrs	r6, r3, #16
 8004fca:	0c0b      	lsrs	r3, r1, #16
 8004fcc:	fb02 3306 	mla	r3, r2, r6, r3
 8004fd0:	b289      	uxth	r1, r1
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004fd8:	4285      	cmp	r5, r0
 8004fda:	f84c 1b04 	str.w	r1, [ip], #4
 8004fde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004fe2:	dcec      	bgt.n	8004fbe <__multadd+0x12>
 8004fe4:	b30e      	cbz	r6, 800502a <__multadd+0x7e>
 8004fe6:	68a3      	ldr	r3, [r4, #8]
 8004fe8:	42ab      	cmp	r3, r5
 8004fea:	dc19      	bgt.n	8005020 <__multadd+0x74>
 8004fec:	6861      	ldr	r1, [r4, #4]
 8004fee:	4638      	mov	r0, r7
 8004ff0:	3101      	adds	r1, #1
 8004ff2:	f7ff ff79 	bl	8004ee8 <_Balloc>
 8004ff6:	4680      	mov	r8, r0
 8004ff8:	b928      	cbnz	r0, 8005006 <__multadd+0x5a>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8005030 <__multadd+0x84>)
 8004ffe:	480d      	ldr	r0, [pc, #52]	@ (8005034 <__multadd+0x88>)
 8005000:	21ba      	movs	r1, #186	@ 0xba
 8005002:	f000 fd83 	bl	8005b0c <__assert_func>
 8005006:	6922      	ldr	r2, [r4, #16]
 8005008:	3202      	adds	r2, #2
 800500a:	f104 010c 	add.w	r1, r4, #12
 800500e:	0092      	lsls	r2, r2, #2
 8005010:	300c      	adds	r0, #12
 8005012:	f000 fd6d 	bl	8005af0 <memcpy>
 8005016:	4621      	mov	r1, r4
 8005018:	4638      	mov	r0, r7
 800501a:	f7ff ffa5 	bl	8004f68 <_Bfree>
 800501e:	4644      	mov	r4, r8
 8005020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005024:	3501      	adds	r5, #1
 8005026:	615e      	str	r6, [r3, #20]
 8005028:	6125      	str	r5, [r4, #16]
 800502a:	4620      	mov	r0, r4
 800502c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005030:	08005d94 	.word	0x08005d94
 8005034:	08005da5 	.word	0x08005da5

08005038 <__hi0bits>:
 8005038:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800503c:	4603      	mov	r3, r0
 800503e:	bf36      	itet	cc
 8005040:	0403      	lslcc	r3, r0, #16
 8005042:	2000      	movcs	r0, #0
 8005044:	2010      	movcc	r0, #16
 8005046:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800504a:	bf3c      	itt	cc
 800504c:	021b      	lslcc	r3, r3, #8
 800504e:	3008      	addcc	r0, #8
 8005050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005054:	bf3c      	itt	cc
 8005056:	011b      	lslcc	r3, r3, #4
 8005058:	3004      	addcc	r0, #4
 800505a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800505e:	bf3c      	itt	cc
 8005060:	009b      	lslcc	r3, r3, #2
 8005062:	3002      	addcc	r0, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	db05      	blt.n	8005074 <__hi0bits+0x3c>
 8005068:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800506c:	f100 0001 	add.w	r0, r0, #1
 8005070:	bf08      	it	eq
 8005072:	2020      	moveq	r0, #32
 8005074:	4770      	bx	lr

08005076 <__lo0bits>:
 8005076:	6803      	ldr	r3, [r0, #0]
 8005078:	4602      	mov	r2, r0
 800507a:	f013 0007 	ands.w	r0, r3, #7
 800507e:	d00b      	beq.n	8005098 <__lo0bits+0x22>
 8005080:	07d9      	lsls	r1, r3, #31
 8005082:	d421      	bmi.n	80050c8 <__lo0bits+0x52>
 8005084:	0798      	lsls	r0, r3, #30
 8005086:	bf49      	itett	mi
 8005088:	085b      	lsrmi	r3, r3, #1
 800508a:	089b      	lsrpl	r3, r3, #2
 800508c:	2001      	movmi	r0, #1
 800508e:	6013      	strmi	r3, [r2, #0]
 8005090:	bf5c      	itt	pl
 8005092:	6013      	strpl	r3, [r2, #0]
 8005094:	2002      	movpl	r0, #2
 8005096:	4770      	bx	lr
 8005098:	b299      	uxth	r1, r3
 800509a:	b909      	cbnz	r1, 80050a0 <__lo0bits+0x2a>
 800509c:	0c1b      	lsrs	r3, r3, #16
 800509e:	2010      	movs	r0, #16
 80050a0:	b2d9      	uxtb	r1, r3
 80050a2:	b909      	cbnz	r1, 80050a8 <__lo0bits+0x32>
 80050a4:	3008      	adds	r0, #8
 80050a6:	0a1b      	lsrs	r3, r3, #8
 80050a8:	0719      	lsls	r1, r3, #28
 80050aa:	bf04      	itt	eq
 80050ac:	091b      	lsreq	r3, r3, #4
 80050ae:	3004      	addeq	r0, #4
 80050b0:	0799      	lsls	r1, r3, #30
 80050b2:	bf04      	itt	eq
 80050b4:	089b      	lsreq	r3, r3, #2
 80050b6:	3002      	addeq	r0, #2
 80050b8:	07d9      	lsls	r1, r3, #31
 80050ba:	d403      	bmi.n	80050c4 <__lo0bits+0x4e>
 80050bc:	085b      	lsrs	r3, r3, #1
 80050be:	f100 0001 	add.w	r0, r0, #1
 80050c2:	d003      	beq.n	80050cc <__lo0bits+0x56>
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	4770      	bx	lr
 80050c8:	2000      	movs	r0, #0
 80050ca:	4770      	bx	lr
 80050cc:	2020      	movs	r0, #32
 80050ce:	4770      	bx	lr

080050d0 <__i2b>:
 80050d0:	b510      	push	{r4, lr}
 80050d2:	460c      	mov	r4, r1
 80050d4:	2101      	movs	r1, #1
 80050d6:	f7ff ff07 	bl	8004ee8 <_Balloc>
 80050da:	4602      	mov	r2, r0
 80050dc:	b928      	cbnz	r0, 80050ea <__i2b+0x1a>
 80050de:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <__i2b+0x24>)
 80050e0:	4805      	ldr	r0, [pc, #20]	@ (80050f8 <__i2b+0x28>)
 80050e2:	f240 1145 	movw	r1, #325	@ 0x145
 80050e6:	f000 fd11 	bl	8005b0c <__assert_func>
 80050ea:	2301      	movs	r3, #1
 80050ec:	6144      	str	r4, [r0, #20]
 80050ee:	6103      	str	r3, [r0, #16]
 80050f0:	bd10      	pop	{r4, pc}
 80050f2:	bf00      	nop
 80050f4:	08005d94 	.word	0x08005d94
 80050f8:	08005da5 	.word	0x08005da5

080050fc <__multiply>:
 80050fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005100:	4614      	mov	r4, r2
 8005102:	690a      	ldr	r2, [r1, #16]
 8005104:	6923      	ldr	r3, [r4, #16]
 8005106:	429a      	cmp	r2, r3
 8005108:	bfa8      	it	ge
 800510a:	4623      	movge	r3, r4
 800510c:	460f      	mov	r7, r1
 800510e:	bfa4      	itt	ge
 8005110:	460c      	movge	r4, r1
 8005112:	461f      	movge	r7, r3
 8005114:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005118:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800511c:	68a3      	ldr	r3, [r4, #8]
 800511e:	6861      	ldr	r1, [r4, #4]
 8005120:	eb0a 0609 	add.w	r6, sl, r9
 8005124:	42b3      	cmp	r3, r6
 8005126:	b085      	sub	sp, #20
 8005128:	bfb8      	it	lt
 800512a:	3101      	addlt	r1, #1
 800512c:	f7ff fedc 	bl	8004ee8 <_Balloc>
 8005130:	b930      	cbnz	r0, 8005140 <__multiply+0x44>
 8005132:	4602      	mov	r2, r0
 8005134:	4b44      	ldr	r3, [pc, #272]	@ (8005248 <__multiply+0x14c>)
 8005136:	4845      	ldr	r0, [pc, #276]	@ (800524c <__multiply+0x150>)
 8005138:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800513c:	f000 fce6 	bl	8005b0c <__assert_func>
 8005140:	f100 0514 	add.w	r5, r0, #20
 8005144:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005148:	462b      	mov	r3, r5
 800514a:	2200      	movs	r2, #0
 800514c:	4543      	cmp	r3, r8
 800514e:	d321      	bcc.n	8005194 <__multiply+0x98>
 8005150:	f107 0114 	add.w	r1, r7, #20
 8005154:	f104 0214 	add.w	r2, r4, #20
 8005158:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800515c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005160:	9302      	str	r3, [sp, #8]
 8005162:	1b13      	subs	r3, r2, r4
 8005164:	3b15      	subs	r3, #21
 8005166:	f023 0303 	bic.w	r3, r3, #3
 800516a:	3304      	adds	r3, #4
 800516c:	f104 0715 	add.w	r7, r4, #21
 8005170:	42ba      	cmp	r2, r7
 8005172:	bf38      	it	cc
 8005174:	2304      	movcc	r3, #4
 8005176:	9301      	str	r3, [sp, #4]
 8005178:	9b02      	ldr	r3, [sp, #8]
 800517a:	9103      	str	r1, [sp, #12]
 800517c:	428b      	cmp	r3, r1
 800517e:	d80c      	bhi.n	800519a <__multiply+0x9e>
 8005180:	2e00      	cmp	r6, #0
 8005182:	dd03      	ble.n	800518c <__multiply+0x90>
 8005184:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005188:	2b00      	cmp	r3, #0
 800518a:	d05b      	beq.n	8005244 <__multiply+0x148>
 800518c:	6106      	str	r6, [r0, #16]
 800518e:	b005      	add	sp, #20
 8005190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005194:	f843 2b04 	str.w	r2, [r3], #4
 8005198:	e7d8      	b.n	800514c <__multiply+0x50>
 800519a:	f8b1 a000 	ldrh.w	sl, [r1]
 800519e:	f1ba 0f00 	cmp.w	sl, #0
 80051a2:	d024      	beq.n	80051ee <__multiply+0xf2>
 80051a4:	f104 0e14 	add.w	lr, r4, #20
 80051a8:	46a9      	mov	r9, r5
 80051aa:	f04f 0c00 	mov.w	ip, #0
 80051ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80051b2:	f8d9 3000 	ldr.w	r3, [r9]
 80051b6:	fa1f fb87 	uxth.w	fp, r7
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80051c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80051c4:	f8d9 7000 	ldr.w	r7, [r9]
 80051c8:	4463      	add	r3, ip
 80051ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80051ce:	fb0a c70b 	mla	r7, sl, fp, ip
 80051d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80051dc:	4572      	cmp	r2, lr
 80051de:	f849 3b04 	str.w	r3, [r9], #4
 80051e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80051e6:	d8e2      	bhi.n	80051ae <__multiply+0xb2>
 80051e8:	9b01      	ldr	r3, [sp, #4]
 80051ea:	f845 c003 	str.w	ip, [r5, r3]
 80051ee:	9b03      	ldr	r3, [sp, #12]
 80051f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80051f4:	3104      	adds	r1, #4
 80051f6:	f1b9 0f00 	cmp.w	r9, #0
 80051fa:	d021      	beq.n	8005240 <__multiply+0x144>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	f104 0c14 	add.w	ip, r4, #20
 8005202:	46ae      	mov	lr, r5
 8005204:	f04f 0a00 	mov.w	sl, #0
 8005208:	f8bc b000 	ldrh.w	fp, [ip]
 800520c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005210:	fb09 770b 	mla	r7, r9, fp, r7
 8005214:	4457      	add	r7, sl
 8005216:	b29b      	uxth	r3, r3
 8005218:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800521c:	f84e 3b04 	str.w	r3, [lr], #4
 8005220:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005224:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005228:	f8be 3000 	ldrh.w	r3, [lr]
 800522c:	fb09 330a 	mla	r3, r9, sl, r3
 8005230:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005234:	4562      	cmp	r2, ip
 8005236:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800523a:	d8e5      	bhi.n	8005208 <__multiply+0x10c>
 800523c:	9f01      	ldr	r7, [sp, #4]
 800523e:	51eb      	str	r3, [r5, r7]
 8005240:	3504      	adds	r5, #4
 8005242:	e799      	b.n	8005178 <__multiply+0x7c>
 8005244:	3e01      	subs	r6, #1
 8005246:	e79b      	b.n	8005180 <__multiply+0x84>
 8005248:	08005d94 	.word	0x08005d94
 800524c:	08005da5 	.word	0x08005da5

08005250 <__pow5mult>:
 8005250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005254:	4615      	mov	r5, r2
 8005256:	f012 0203 	ands.w	r2, r2, #3
 800525a:	4607      	mov	r7, r0
 800525c:	460e      	mov	r6, r1
 800525e:	d007      	beq.n	8005270 <__pow5mult+0x20>
 8005260:	4c25      	ldr	r4, [pc, #148]	@ (80052f8 <__pow5mult+0xa8>)
 8005262:	3a01      	subs	r2, #1
 8005264:	2300      	movs	r3, #0
 8005266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800526a:	f7ff fe9f 	bl	8004fac <__multadd>
 800526e:	4606      	mov	r6, r0
 8005270:	10ad      	asrs	r5, r5, #2
 8005272:	d03d      	beq.n	80052f0 <__pow5mult+0xa0>
 8005274:	69fc      	ldr	r4, [r7, #28]
 8005276:	b97c      	cbnz	r4, 8005298 <__pow5mult+0x48>
 8005278:	2010      	movs	r0, #16
 800527a:	f7ff fd7f 	bl	8004d7c <malloc>
 800527e:	4602      	mov	r2, r0
 8005280:	61f8      	str	r0, [r7, #28]
 8005282:	b928      	cbnz	r0, 8005290 <__pow5mult+0x40>
 8005284:	4b1d      	ldr	r3, [pc, #116]	@ (80052fc <__pow5mult+0xac>)
 8005286:	481e      	ldr	r0, [pc, #120]	@ (8005300 <__pow5mult+0xb0>)
 8005288:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800528c:	f000 fc3e 	bl	8005b0c <__assert_func>
 8005290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005294:	6004      	str	r4, [r0, #0]
 8005296:	60c4      	str	r4, [r0, #12]
 8005298:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800529c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80052a0:	b94c      	cbnz	r4, 80052b6 <__pow5mult+0x66>
 80052a2:	f240 2171 	movw	r1, #625	@ 0x271
 80052a6:	4638      	mov	r0, r7
 80052a8:	f7ff ff12 	bl	80050d0 <__i2b>
 80052ac:	2300      	movs	r3, #0
 80052ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80052b2:	4604      	mov	r4, r0
 80052b4:	6003      	str	r3, [r0, #0]
 80052b6:	f04f 0900 	mov.w	r9, #0
 80052ba:	07eb      	lsls	r3, r5, #31
 80052bc:	d50a      	bpl.n	80052d4 <__pow5mult+0x84>
 80052be:	4631      	mov	r1, r6
 80052c0:	4622      	mov	r2, r4
 80052c2:	4638      	mov	r0, r7
 80052c4:	f7ff ff1a 	bl	80050fc <__multiply>
 80052c8:	4631      	mov	r1, r6
 80052ca:	4680      	mov	r8, r0
 80052cc:	4638      	mov	r0, r7
 80052ce:	f7ff fe4b 	bl	8004f68 <_Bfree>
 80052d2:	4646      	mov	r6, r8
 80052d4:	106d      	asrs	r5, r5, #1
 80052d6:	d00b      	beq.n	80052f0 <__pow5mult+0xa0>
 80052d8:	6820      	ldr	r0, [r4, #0]
 80052da:	b938      	cbnz	r0, 80052ec <__pow5mult+0x9c>
 80052dc:	4622      	mov	r2, r4
 80052de:	4621      	mov	r1, r4
 80052e0:	4638      	mov	r0, r7
 80052e2:	f7ff ff0b 	bl	80050fc <__multiply>
 80052e6:	6020      	str	r0, [r4, #0]
 80052e8:	f8c0 9000 	str.w	r9, [r0]
 80052ec:	4604      	mov	r4, r0
 80052ee:	e7e4      	b.n	80052ba <__pow5mult+0x6a>
 80052f0:	4630      	mov	r0, r6
 80052f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052f6:	bf00      	nop
 80052f8:	08005e00 	.word	0x08005e00
 80052fc:	08005d25 	.word	0x08005d25
 8005300:	08005da5 	.word	0x08005da5

08005304 <__lshift>:
 8005304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	460c      	mov	r4, r1
 800530a:	6849      	ldr	r1, [r1, #4]
 800530c:	6923      	ldr	r3, [r4, #16]
 800530e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005312:	68a3      	ldr	r3, [r4, #8]
 8005314:	4607      	mov	r7, r0
 8005316:	4691      	mov	r9, r2
 8005318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800531c:	f108 0601 	add.w	r6, r8, #1
 8005320:	42b3      	cmp	r3, r6
 8005322:	db0b      	blt.n	800533c <__lshift+0x38>
 8005324:	4638      	mov	r0, r7
 8005326:	f7ff fddf 	bl	8004ee8 <_Balloc>
 800532a:	4605      	mov	r5, r0
 800532c:	b948      	cbnz	r0, 8005342 <__lshift+0x3e>
 800532e:	4602      	mov	r2, r0
 8005330:	4b28      	ldr	r3, [pc, #160]	@ (80053d4 <__lshift+0xd0>)
 8005332:	4829      	ldr	r0, [pc, #164]	@ (80053d8 <__lshift+0xd4>)
 8005334:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005338:	f000 fbe8 	bl	8005b0c <__assert_func>
 800533c:	3101      	adds	r1, #1
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	e7ee      	b.n	8005320 <__lshift+0x1c>
 8005342:	2300      	movs	r3, #0
 8005344:	f100 0114 	add.w	r1, r0, #20
 8005348:	f100 0210 	add.w	r2, r0, #16
 800534c:	4618      	mov	r0, r3
 800534e:	4553      	cmp	r3, sl
 8005350:	db33      	blt.n	80053ba <__lshift+0xb6>
 8005352:	6920      	ldr	r0, [r4, #16]
 8005354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005358:	f104 0314 	add.w	r3, r4, #20
 800535c:	f019 091f 	ands.w	r9, r9, #31
 8005360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005364:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005368:	d02b      	beq.n	80053c2 <__lshift+0xbe>
 800536a:	f1c9 0e20 	rsb	lr, r9, #32
 800536e:	468a      	mov	sl, r1
 8005370:	2200      	movs	r2, #0
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	fa00 f009 	lsl.w	r0, r0, r9
 8005378:	4310      	orrs	r0, r2
 800537a:	f84a 0b04 	str.w	r0, [sl], #4
 800537e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005382:	459c      	cmp	ip, r3
 8005384:	fa22 f20e 	lsr.w	r2, r2, lr
 8005388:	d8f3      	bhi.n	8005372 <__lshift+0x6e>
 800538a:	ebac 0304 	sub.w	r3, ip, r4
 800538e:	3b15      	subs	r3, #21
 8005390:	f023 0303 	bic.w	r3, r3, #3
 8005394:	3304      	adds	r3, #4
 8005396:	f104 0015 	add.w	r0, r4, #21
 800539a:	4584      	cmp	ip, r0
 800539c:	bf38      	it	cc
 800539e:	2304      	movcc	r3, #4
 80053a0:	50ca      	str	r2, [r1, r3]
 80053a2:	b10a      	cbz	r2, 80053a8 <__lshift+0xa4>
 80053a4:	f108 0602 	add.w	r6, r8, #2
 80053a8:	3e01      	subs	r6, #1
 80053aa:	4638      	mov	r0, r7
 80053ac:	612e      	str	r6, [r5, #16]
 80053ae:	4621      	mov	r1, r4
 80053b0:	f7ff fdda 	bl	8004f68 <_Bfree>
 80053b4:	4628      	mov	r0, r5
 80053b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80053be:	3301      	adds	r3, #1
 80053c0:	e7c5      	b.n	800534e <__lshift+0x4a>
 80053c2:	3904      	subs	r1, #4
 80053c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80053cc:	459c      	cmp	ip, r3
 80053ce:	d8f9      	bhi.n	80053c4 <__lshift+0xc0>
 80053d0:	e7ea      	b.n	80053a8 <__lshift+0xa4>
 80053d2:	bf00      	nop
 80053d4:	08005d94 	.word	0x08005d94
 80053d8:	08005da5 	.word	0x08005da5

080053dc <__mcmp>:
 80053dc:	690a      	ldr	r2, [r1, #16]
 80053de:	4603      	mov	r3, r0
 80053e0:	6900      	ldr	r0, [r0, #16]
 80053e2:	1a80      	subs	r0, r0, r2
 80053e4:	b530      	push	{r4, r5, lr}
 80053e6:	d10e      	bne.n	8005406 <__mcmp+0x2a>
 80053e8:	3314      	adds	r3, #20
 80053ea:	3114      	adds	r1, #20
 80053ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80053f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80053f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80053f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80053fc:	4295      	cmp	r5, r2
 80053fe:	d003      	beq.n	8005408 <__mcmp+0x2c>
 8005400:	d205      	bcs.n	800540e <__mcmp+0x32>
 8005402:	f04f 30ff 	mov.w	r0, #4294967295
 8005406:	bd30      	pop	{r4, r5, pc}
 8005408:	42a3      	cmp	r3, r4
 800540a:	d3f3      	bcc.n	80053f4 <__mcmp+0x18>
 800540c:	e7fb      	b.n	8005406 <__mcmp+0x2a>
 800540e:	2001      	movs	r0, #1
 8005410:	e7f9      	b.n	8005406 <__mcmp+0x2a>
	...

08005414 <__mdiff>:
 8005414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005418:	4689      	mov	r9, r1
 800541a:	4606      	mov	r6, r0
 800541c:	4611      	mov	r1, r2
 800541e:	4648      	mov	r0, r9
 8005420:	4614      	mov	r4, r2
 8005422:	f7ff ffdb 	bl	80053dc <__mcmp>
 8005426:	1e05      	subs	r5, r0, #0
 8005428:	d112      	bne.n	8005450 <__mdiff+0x3c>
 800542a:	4629      	mov	r1, r5
 800542c:	4630      	mov	r0, r6
 800542e:	f7ff fd5b 	bl	8004ee8 <_Balloc>
 8005432:	4602      	mov	r2, r0
 8005434:	b928      	cbnz	r0, 8005442 <__mdiff+0x2e>
 8005436:	4b3f      	ldr	r3, [pc, #252]	@ (8005534 <__mdiff+0x120>)
 8005438:	f240 2137 	movw	r1, #567	@ 0x237
 800543c:	483e      	ldr	r0, [pc, #248]	@ (8005538 <__mdiff+0x124>)
 800543e:	f000 fb65 	bl	8005b0c <__assert_func>
 8005442:	2301      	movs	r3, #1
 8005444:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005448:	4610      	mov	r0, r2
 800544a:	b003      	add	sp, #12
 800544c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005450:	bfbc      	itt	lt
 8005452:	464b      	movlt	r3, r9
 8005454:	46a1      	movlt	r9, r4
 8005456:	4630      	mov	r0, r6
 8005458:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800545c:	bfba      	itte	lt
 800545e:	461c      	movlt	r4, r3
 8005460:	2501      	movlt	r5, #1
 8005462:	2500      	movge	r5, #0
 8005464:	f7ff fd40 	bl	8004ee8 <_Balloc>
 8005468:	4602      	mov	r2, r0
 800546a:	b918      	cbnz	r0, 8005474 <__mdiff+0x60>
 800546c:	4b31      	ldr	r3, [pc, #196]	@ (8005534 <__mdiff+0x120>)
 800546e:	f240 2145 	movw	r1, #581	@ 0x245
 8005472:	e7e3      	b.n	800543c <__mdiff+0x28>
 8005474:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005478:	6926      	ldr	r6, [r4, #16]
 800547a:	60c5      	str	r5, [r0, #12]
 800547c:	f109 0310 	add.w	r3, r9, #16
 8005480:	f109 0514 	add.w	r5, r9, #20
 8005484:	f104 0e14 	add.w	lr, r4, #20
 8005488:	f100 0b14 	add.w	fp, r0, #20
 800548c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005490:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005494:	9301      	str	r3, [sp, #4]
 8005496:	46d9      	mov	r9, fp
 8005498:	f04f 0c00 	mov.w	ip, #0
 800549c:	9b01      	ldr	r3, [sp, #4]
 800549e:	f85e 0b04 	ldr.w	r0, [lr], #4
 80054a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80054a6:	9301      	str	r3, [sp, #4]
 80054a8:	fa1f f38a 	uxth.w	r3, sl
 80054ac:	4619      	mov	r1, r3
 80054ae:	b283      	uxth	r3, r0
 80054b0:	1acb      	subs	r3, r1, r3
 80054b2:	0c00      	lsrs	r0, r0, #16
 80054b4:	4463      	add	r3, ip
 80054b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80054ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80054be:	b29b      	uxth	r3, r3
 80054c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80054c4:	4576      	cmp	r6, lr
 80054c6:	f849 3b04 	str.w	r3, [r9], #4
 80054ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80054ce:	d8e5      	bhi.n	800549c <__mdiff+0x88>
 80054d0:	1b33      	subs	r3, r6, r4
 80054d2:	3b15      	subs	r3, #21
 80054d4:	f023 0303 	bic.w	r3, r3, #3
 80054d8:	3415      	adds	r4, #21
 80054da:	3304      	adds	r3, #4
 80054dc:	42a6      	cmp	r6, r4
 80054de:	bf38      	it	cc
 80054e0:	2304      	movcc	r3, #4
 80054e2:	441d      	add	r5, r3
 80054e4:	445b      	add	r3, fp
 80054e6:	461e      	mov	r6, r3
 80054e8:	462c      	mov	r4, r5
 80054ea:	4544      	cmp	r4, r8
 80054ec:	d30e      	bcc.n	800550c <__mdiff+0xf8>
 80054ee:	f108 0103 	add.w	r1, r8, #3
 80054f2:	1b49      	subs	r1, r1, r5
 80054f4:	f021 0103 	bic.w	r1, r1, #3
 80054f8:	3d03      	subs	r5, #3
 80054fa:	45a8      	cmp	r8, r5
 80054fc:	bf38      	it	cc
 80054fe:	2100      	movcc	r1, #0
 8005500:	440b      	add	r3, r1
 8005502:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005506:	b191      	cbz	r1, 800552e <__mdiff+0x11a>
 8005508:	6117      	str	r7, [r2, #16]
 800550a:	e79d      	b.n	8005448 <__mdiff+0x34>
 800550c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005510:	46e6      	mov	lr, ip
 8005512:	0c08      	lsrs	r0, r1, #16
 8005514:	fa1c fc81 	uxtah	ip, ip, r1
 8005518:	4471      	add	r1, lr
 800551a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800551e:	b289      	uxth	r1, r1
 8005520:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005524:	f846 1b04 	str.w	r1, [r6], #4
 8005528:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800552c:	e7dd      	b.n	80054ea <__mdiff+0xd6>
 800552e:	3f01      	subs	r7, #1
 8005530:	e7e7      	b.n	8005502 <__mdiff+0xee>
 8005532:	bf00      	nop
 8005534:	08005d94 	.word	0x08005d94
 8005538:	08005da5 	.word	0x08005da5

0800553c <__d2b>:
 800553c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005540:	460f      	mov	r7, r1
 8005542:	2101      	movs	r1, #1
 8005544:	ec59 8b10 	vmov	r8, r9, d0
 8005548:	4616      	mov	r6, r2
 800554a:	f7ff fccd 	bl	8004ee8 <_Balloc>
 800554e:	4604      	mov	r4, r0
 8005550:	b930      	cbnz	r0, 8005560 <__d2b+0x24>
 8005552:	4602      	mov	r2, r0
 8005554:	4b23      	ldr	r3, [pc, #140]	@ (80055e4 <__d2b+0xa8>)
 8005556:	4824      	ldr	r0, [pc, #144]	@ (80055e8 <__d2b+0xac>)
 8005558:	f240 310f 	movw	r1, #783	@ 0x30f
 800555c:	f000 fad6 	bl	8005b0c <__assert_func>
 8005560:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005564:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005568:	b10d      	cbz	r5, 800556e <__d2b+0x32>
 800556a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	f1b8 0300 	subs.w	r3, r8, #0
 8005574:	d023      	beq.n	80055be <__d2b+0x82>
 8005576:	4668      	mov	r0, sp
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	f7ff fd7c 	bl	8005076 <__lo0bits>
 800557e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005582:	b1d0      	cbz	r0, 80055ba <__d2b+0x7e>
 8005584:	f1c0 0320 	rsb	r3, r0, #32
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	430b      	orrs	r3, r1
 800558e:	40c2      	lsrs	r2, r0
 8005590:	6163      	str	r3, [r4, #20]
 8005592:	9201      	str	r2, [sp, #4]
 8005594:	9b01      	ldr	r3, [sp, #4]
 8005596:	61a3      	str	r3, [r4, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	bf0c      	ite	eq
 800559c:	2201      	moveq	r2, #1
 800559e:	2202      	movne	r2, #2
 80055a0:	6122      	str	r2, [r4, #16]
 80055a2:	b1a5      	cbz	r5, 80055ce <__d2b+0x92>
 80055a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80055a8:	4405      	add	r5, r0
 80055aa:	603d      	str	r5, [r7, #0]
 80055ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80055b0:	6030      	str	r0, [r6, #0]
 80055b2:	4620      	mov	r0, r4
 80055b4:	b003      	add	sp, #12
 80055b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055ba:	6161      	str	r1, [r4, #20]
 80055bc:	e7ea      	b.n	8005594 <__d2b+0x58>
 80055be:	a801      	add	r0, sp, #4
 80055c0:	f7ff fd59 	bl	8005076 <__lo0bits>
 80055c4:	9b01      	ldr	r3, [sp, #4]
 80055c6:	6163      	str	r3, [r4, #20]
 80055c8:	3020      	adds	r0, #32
 80055ca:	2201      	movs	r2, #1
 80055cc:	e7e8      	b.n	80055a0 <__d2b+0x64>
 80055ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80055d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80055d6:	6038      	str	r0, [r7, #0]
 80055d8:	6918      	ldr	r0, [r3, #16]
 80055da:	f7ff fd2d 	bl	8005038 <__hi0bits>
 80055de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80055e2:	e7e5      	b.n	80055b0 <__d2b+0x74>
 80055e4:	08005d94 	.word	0x08005d94
 80055e8:	08005da5 	.word	0x08005da5

080055ec <__sfputc_r>:
 80055ec:	6893      	ldr	r3, [r2, #8]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	b410      	push	{r4}
 80055f4:	6093      	str	r3, [r2, #8]
 80055f6:	da08      	bge.n	800560a <__sfputc_r+0x1e>
 80055f8:	6994      	ldr	r4, [r2, #24]
 80055fa:	42a3      	cmp	r3, r4
 80055fc:	db01      	blt.n	8005602 <__sfputc_r+0x16>
 80055fe:	290a      	cmp	r1, #10
 8005600:	d103      	bne.n	800560a <__sfputc_r+0x1e>
 8005602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005606:	f7fe bc0c 	b.w	8003e22 <__swbuf_r>
 800560a:	6813      	ldr	r3, [r2, #0]
 800560c:	1c58      	adds	r0, r3, #1
 800560e:	6010      	str	r0, [r2, #0]
 8005610:	7019      	strb	r1, [r3, #0]
 8005612:	4608      	mov	r0, r1
 8005614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005618:	4770      	bx	lr

0800561a <__sfputs_r>:
 800561a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561c:	4606      	mov	r6, r0
 800561e:	460f      	mov	r7, r1
 8005620:	4614      	mov	r4, r2
 8005622:	18d5      	adds	r5, r2, r3
 8005624:	42ac      	cmp	r4, r5
 8005626:	d101      	bne.n	800562c <__sfputs_r+0x12>
 8005628:	2000      	movs	r0, #0
 800562a:	e007      	b.n	800563c <__sfputs_r+0x22>
 800562c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005630:	463a      	mov	r2, r7
 8005632:	4630      	mov	r0, r6
 8005634:	f7ff ffda 	bl	80055ec <__sfputc_r>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d1f3      	bne.n	8005624 <__sfputs_r+0xa>
 800563c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005640 <_vfiprintf_r>:
 8005640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005644:	460d      	mov	r5, r1
 8005646:	b09d      	sub	sp, #116	@ 0x74
 8005648:	4614      	mov	r4, r2
 800564a:	4698      	mov	r8, r3
 800564c:	4606      	mov	r6, r0
 800564e:	b118      	cbz	r0, 8005658 <_vfiprintf_r+0x18>
 8005650:	6a03      	ldr	r3, [r0, #32]
 8005652:	b90b      	cbnz	r3, 8005658 <_vfiprintf_r+0x18>
 8005654:	f7fe fafc 	bl	8003c50 <__sinit>
 8005658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800565a:	07d9      	lsls	r1, r3, #31
 800565c:	d405      	bmi.n	800566a <_vfiprintf_r+0x2a>
 800565e:	89ab      	ldrh	r3, [r5, #12]
 8005660:	059a      	lsls	r2, r3, #22
 8005662:	d402      	bmi.n	800566a <_vfiprintf_r+0x2a>
 8005664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005666:	f7fe fcee 	bl	8004046 <__retarget_lock_acquire_recursive>
 800566a:	89ab      	ldrh	r3, [r5, #12]
 800566c:	071b      	lsls	r3, r3, #28
 800566e:	d501      	bpl.n	8005674 <_vfiprintf_r+0x34>
 8005670:	692b      	ldr	r3, [r5, #16]
 8005672:	b99b      	cbnz	r3, 800569c <_vfiprintf_r+0x5c>
 8005674:	4629      	mov	r1, r5
 8005676:	4630      	mov	r0, r6
 8005678:	f7fe fc12 	bl	8003ea0 <__swsetup_r>
 800567c:	b170      	cbz	r0, 800569c <_vfiprintf_r+0x5c>
 800567e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005680:	07dc      	lsls	r4, r3, #31
 8005682:	d504      	bpl.n	800568e <_vfiprintf_r+0x4e>
 8005684:	f04f 30ff 	mov.w	r0, #4294967295
 8005688:	b01d      	add	sp, #116	@ 0x74
 800568a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568e:	89ab      	ldrh	r3, [r5, #12]
 8005690:	0598      	lsls	r0, r3, #22
 8005692:	d4f7      	bmi.n	8005684 <_vfiprintf_r+0x44>
 8005694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005696:	f7fe fcd7 	bl	8004048 <__retarget_lock_release_recursive>
 800569a:	e7f3      	b.n	8005684 <_vfiprintf_r+0x44>
 800569c:	2300      	movs	r3, #0
 800569e:	9309      	str	r3, [sp, #36]	@ 0x24
 80056a0:	2320      	movs	r3, #32
 80056a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80056aa:	2330      	movs	r3, #48	@ 0x30
 80056ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800585c <_vfiprintf_r+0x21c>
 80056b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056b4:	f04f 0901 	mov.w	r9, #1
 80056b8:	4623      	mov	r3, r4
 80056ba:	469a      	mov	sl, r3
 80056bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056c0:	b10a      	cbz	r2, 80056c6 <_vfiprintf_r+0x86>
 80056c2:	2a25      	cmp	r2, #37	@ 0x25
 80056c4:	d1f9      	bne.n	80056ba <_vfiprintf_r+0x7a>
 80056c6:	ebba 0b04 	subs.w	fp, sl, r4
 80056ca:	d00b      	beq.n	80056e4 <_vfiprintf_r+0xa4>
 80056cc:	465b      	mov	r3, fp
 80056ce:	4622      	mov	r2, r4
 80056d0:	4629      	mov	r1, r5
 80056d2:	4630      	mov	r0, r6
 80056d4:	f7ff ffa1 	bl	800561a <__sfputs_r>
 80056d8:	3001      	adds	r0, #1
 80056da:	f000 80a7 	beq.w	800582c <_vfiprintf_r+0x1ec>
 80056de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056e0:	445a      	add	r2, fp
 80056e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80056e4:	f89a 3000 	ldrb.w	r3, [sl]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 809f 	beq.w	800582c <_vfiprintf_r+0x1ec>
 80056ee:	2300      	movs	r3, #0
 80056f0:	f04f 32ff 	mov.w	r2, #4294967295
 80056f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056f8:	f10a 0a01 	add.w	sl, sl, #1
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	9307      	str	r3, [sp, #28]
 8005700:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005704:	931a      	str	r3, [sp, #104]	@ 0x68
 8005706:	4654      	mov	r4, sl
 8005708:	2205      	movs	r2, #5
 800570a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800570e:	4853      	ldr	r0, [pc, #332]	@ (800585c <_vfiprintf_r+0x21c>)
 8005710:	f7fa fd5e 	bl	80001d0 <memchr>
 8005714:	9a04      	ldr	r2, [sp, #16]
 8005716:	b9d8      	cbnz	r0, 8005750 <_vfiprintf_r+0x110>
 8005718:	06d1      	lsls	r1, r2, #27
 800571a:	bf44      	itt	mi
 800571c:	2320      	movmi	r3, #32
 800571e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005722:	0713      	lsls	r3, r2, #28
 8005724:	bf44      	itt	mi
 8005726:	232b      	movmi	r3, #43	@ 0x2b
 8005728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800572c:	f89a 3000 	ldrb.w	r3, [sl]
 8005730:	2b2a      	cmp	r3, #42	@ 0x2a
 8005732:	d015      	beq.n	8005760 <_vfiprintf_r+0x120>
 8005734:	9a07      	ldr	r2, [sp, #28]
 8005736:	4654      	mov	r4, sl
 8005738:	2000      	movs	r0, #0
 800573a:	f04f 0c0a 	mov.w	ip, #10
 800573e:	4621      	mov	r1, r4
 8005740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005744:	3b30      	subs	r3, #48	@ 0x30
 8005746:	2b09      	cmp	r3, #9
 8005748:	d94b      	bls.n	80057e2 <_vfiprintf_r+0x1a2>
 800574a:	b1b0      	cbz	r0, 800577a <_vfiprintf_r+0x13a>
 800574c:	9207      	str	r2, [sp, #28]
 800574e:	e014      	b.n	800577a <_vfiprintf_r+0x13a>
 8005750:	eba0 0308 	sub.w	r3, r0, r8
 8005754:	fa09 f303 	lsl.w	r3, r9, r3
 8005758:	4313      	orrs	r3, r2
 800575a:	9304      	str	r3, [sp, #16]
 800575c:	46a2      	mov	sl, r4
 800575e:	e7d2      	b.n	8005706 <_vfiprintf_r+0xc6>
 8005760:	9b03      	ldr	r3, [sp, #12]
 8005762:	1d19      	adds	r1, r3, #4
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	9103      	str	r1, [sp, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	bfbb      	ittet	lt
 800576c:	425b      	neglt	r3, r3
 800576e:	f042 0202 	orrlt.w	r2, r2, #2
 8005772:	9307      	strge	r3, [sp, #28]
 8005774:	9307      	strlt	r3, [sp, #28]
 8005776:	bfb8      	it	lt
 8005778:	9204      	strlt	r2, [sp, #16]
 800577a:	7823      	ldrb	r3, [r4, #0]
 800577c:	2b2e      	cmp	r3, #46	@ 0x2e
 800577e:	d10a      	bne.n	8005796 <_vfiprintf_r+0x156>
 8005780:	7863      	ldrb	r3, [r4, #1]
 8005782:	2b2a      	cmp	r3, #42	@ 0x2a
 8005784:	d132      	bne.n	80057ec <_vfiprintf_r+0x1ac>
 8005786:	9b03      	ldr	r3, [sp, #12]
 8005788:	1d1a      	adds	r2, r3, #4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	9203      	str	r2, [sp, #12]
 800578e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005792:	3402      	adds	r4, #2
 8005794:	9305      	str	r3, [sp, #20]
 8005796:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800586c <_vfiprintf_r+0x22c>
 800579a:	7821      	ldrb	r1, [r4, #0]
 800579c:	2203      	movs	r2, #3
 800579e:	4650      	mov	r0, sl
 80057a0:	f7fa fd16 	bl	80001d0 <memchr>
 80057a4:	b138      	cbz	r0, 80057b6 <_vfiprintf_r+0x176>
 80057a6:	9b04      	ldr	r3, [sp, #16]
 80057a8:	eba0 000a 	sub.w	r0, r0, sl
 80057ac:	2240      	movs	r2, #64	@ 0x40
 80057ae:	4082      	lsls	r2, r0
 80057b0:	4313      	orrs	r3, r2
 80057b2:	3401      	adds	r4, #1
 80057b4:	9304      	str	r3, [sp, #16]
 80057b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ba:	4829      	ldr	r0, [pc, #164]	@ (8005860 <_vfiprintf_r+0x220>)
 80057bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057c0:	2206      	movs	r2, #6
 80057c2:	f7fa fd05 	bl	80001d0 <memchr>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d03f      	beq.n	800584a <_vfiprintf_r+0x20a>
 80057ca:	4b26      	ldr	r3, [pc, #152]	@ (8005864 <_vfiprintf_r+0x224>)
 80057cc:	bb1b      	cbnz	r3, 8005816 <_vfiprintf_r+0x1d6>
 80057ce:	9b03      	ldr	r3, [sp, #12]
 80057d0:	3307      	adds	r3, #7
 80057d2:	f023 0307 	bic.w	r3, r3, #7
 80057d6:	3308      	adds	r3, #8
 80057d8:	9303      	str	r3, [sp, #12]
 80057da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057dc:	443b      	add	r3, r7
 80057de:	9309      	str	r3, [sp, #36]	@ 0x24
 80057e0:	e76a      	b.n	80056b8 <_vfiprintf_r+0x78>
 80057e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80057e6:	460c      	mov	r4, r1
 80057e8:	2001      	movs	r0, #1
 80057ea:	e7a8      	b.n	800573e <_vfiprintf_r+0xfe>
 80057ec:	2300      	movs	r3, #0
 80057ee:	3401      	adds	r4, #1
 80057f0:	9305      	str	r3, [sp, #20]
 80057f2:	4619      	mov	r1, r3
 80057f4:	f04f 0c0a 	mov.w	ip, #10
 80057f8:	4620      	mov	r0, r4
 80057fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057fe:	3a30      	subs	r2, #48	@ 0x30
 8005800:	2a09      	cmp	r2, #9
 8005802:	d903      	bls.n	800580c <_vfiprintf_r+0x1cc>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0c6      	beq.n	8005796 <_vfiprintf_r+0x156>
 8005808:	9105      	str	r1, [sp, #20]
 800580a:	e7c4      	b.n	8005796 <_vfiprintf_r+0x156>
 800580c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005810:	4604      	mov	r4, r0
 8005812:	2301      	movs	r3, #1
 8005814:	e7f0      	b.n	80057f8 <_vfiprintf_r+0x1b8>
 8005816:	ab03      	add	r3, sp, #12
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	462a      	mov	r2, r5
 800581c:	4b12      	ldr	r3, [pc, #72]	@ (8005868 <_vfiprintf_r+0x228>)
 800581e:	a904      	add	r1, sp, #16
 8005820:	4630      	mov	r0, r6
 8005822:	f7fd fdd1 	bl	80033c8 <_printf_float>
 8005826:	4607      	mov	r7, r0
 8005828:	1c78      	adds	r0, r7, #1
 800582a:	d1d6      	bne.n	80057da <_vfiprintf_r+0x19a>
 800582c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800582e:	07d9      	lsls	r1, r3, #31
 8005830:	d405      	bmi.n	800583e <_vfiprintf_r+0x1fe>
 8005832:	89ab      	ldrh	r3, [r5, #12]
 8005834:	059a      	lsls	r2, r3, #22
 8005836:	d402      	bmi.n	800583e <_vfiprintf_r+0x1fe>
 8005838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800583a:	f7fe fc05 	bl	8004048 <__retarget_lock_release_recursive>
 800583e:	89ab      	ldrh	r3, [r5, #12]
 8005840:	065b      	lsls	r3, r3, #25
 8005842:	f53f af1f 	bmi.w	8005684 <_vfiprintf_r+0x44>
 8005846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005848:	e71e      	b.n	8005688 <_vfiprintf_r+0x48>
 800584a:	ab03      	add	r3, sp, #12
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	462a      	mov	r2, r5
 8005850:	4b05      	ldr	r3, [pc, #20]	@ (8005868 <_vfiprintf_r+0x228>)
 8005852:	a904      	add	r1, sp, #16
 8005854:	4630      	mov	r0, r6
 8005856:	f7fe f84f 	bl	80038f8 <_printf_i>
 800585a:	e7e4      	b.n	8005826 <_vfiprintf_r+0x1e6>
 800585c:	08005f00 	.word	0x08005f00
 8005860:	08005f0a 	.word	0x08005f0a
 8005864:	080033c9 	.word	0x080033c9
 8005868:	0800561b 	.word	0x0800561b
 800586c:	08005f06 	.word	0x08005f06

08005870 <__sflush_r>:
 8005870:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005878:	0716      	lsls	r6, r2, #28
 800587a:	4605      	mov	r5, r0
 800587c:	460c      	mov	r4, r1
 800587e:	d454      	bmi.n	800592a <__sflush_r+0xba>
 8005880:	684b      	ldr	r3, [r1, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	dc02      	bgt.n	800588c <__sflush_r+0x1c>
 8005886:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005888:	2b00      	cmp	r3, #0
 800588a:	dd48      	ble.n	800591e <__sflush_r+0xae>
 800588c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800588e:	2e00      	cmp	r6, #0
 8005890:	d045      	beq.n	800591e <__sflush_r+0xae>
 8005892:	2300      	movs	r3, #0
 8005894:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005898:	682f      	ldr	r7, [r5, #0]
 800589a:	6a21      	ldr	r1, [r4, #32]
 800589c:	602b      	str	r3, [r5, #0]
 800589e:	d030      	beq.n	8005902 <__sflush_r+0x92>
 80058a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80058a2:	89a3      	ldrh	r3, [r4, #12]
 80058a4:	0759      	lsls	r1, r3, #29
 80058a6:	d505      	bpl.n	80058b4 <__sflush_r+0x44>
 80058a8:	6863      	ldr	r3, [r4, #4]
 80058aa:	1ad2      	subs	r2, r2, r3
 80058ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80058ae:	b10b      	cbz	r3, 80058b4 <__sflush_r+0x44>
 80058b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058b2:	1ad2      	subs	r2, r2, r3
 80058b4:	2300      	movs	r3, #0
 80058b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058b8:	6a21      	ldr	r1, [r4, #32]
 80058ba:	4628      	mov	r0, r5
 80058bc:	47b0      	blx	r6
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	d106      	bne.n	80058d2 <__sflush_r+0x62>
 80058c4:	6829      	ldr	r1, [r5, #0]
 80058c6:	291d      	cmp	r1, #29
 80058c8:	d82b      	bhi.n	8005922 <__sflush_r+0xb2>
 80058ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005974 <__sflush_r+0x104>)
 80058cc:	410a      	asrs	r2, r1
 80058ce:	07d6      	lsls	r6, r2, #31
 80058d0:	d427      	bmi.n	8005922 <__sflush_r+0xb2>
 80058d2:	2200      	movs	r2, #0
 80058d4:	6062      	str	r2, [r4, #4]
 80058d6:	04d9      	lsls	r1, r3, #19
 80058d8:	6922      	ldr	r2, [r4, #16]
 80058da:	6022      	str	r2, [r4, #0]
 80058dc:	d504      	bpl.n	80058e8 <__sflush_r+0x78>
 80058de:	1c42      	adds	r2, r0, #1
 80058e0:	d101      	bne.n	80058e6 <__sflush_r+0x76>
 80058e2:	682b      	ldr	r3, [r5, #0]
 80058e4:	b903      	cbnz	r3, 80058e8 <__sflush_r+0x78>
 80058e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80058e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058ea:	602f      	str	r7, [r5, #0]
 80058ec:	b1b9      	cbz	r1, 800591e <__sflush_r+0xae>
 80058ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058f2:	4299      	cmp	r1, r3
 80058f4:	d002      	beq.n	80058fc <__sflush_r+0x8c>
 80058f6:	4628      	mov	r0, r5
 80058f8:	f7ff f9f6 	bl	8004ce8 <_free_r>
 80058fc:	2300      	movs	r3, #0
 80058fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005900:	e00d      	b.n	800591e <__sflush_r+0xae>
 8005902:	2301      	movs	r3, #1
 8005904:	4628      	mov	r0, r5
 8005906:	47b0      	blx	r6
 8005908:	4602      	mov	r2, r0
 800590a:	1c50      	adds	r0, r2, #1
 800590c:	d1c9      	bne.n	80058a2 <__sflush_r+0x32>
 800590e:	682b      	ldr	r3, [r5, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0c6      	beq.n	80058a2 <__sflush_r+0x32>
 8005914:	2b1d      	cmp	r3, #29
 8005916:	d001      	beq.n	800591c <__sflush_r+0xac>
 8005918:	2b16      	cmp	r3, #22
 800591a:	d11e      	bne.n	800595a <__sflush_r+0xea>
 800591c:	602f      	str	r7, [r5, #0]
 800591e:	2000      	movs	r0, #0
 8005920:	e022      	b.n	8005968 <__sflush_r+0xf8>
 8005922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005926:	b21b      	sxth	r3, r3
 8005928:	e01b      	b.n	8005962 <__sflush_r+0xf2>
 800592a:	690f      	ldr	r7, [r1, #16]
 800592c:	2f00      	cmp	r7, #0
 800592e:	d0f6      	beq.n	800591e <__sflush_r+0xae>
 8005930:	0793      	lsls	r3, r2, #30
 8005932:	680e      	ldr	r6, [r1, #0]
 8005934:	bf08      	it	eq
 8005936:	694b      	ldreq	r3, [r1, #20]
 8005938:	600f      	str	r7, [r1, #0]
 800593a:	bf18      	it	ne
 800593c:	2300      	movne	r3, #0
 800593e:	eba6 0807 	sub.w	r8, r6, r7
 8005942:	608b      	str	r3, [r1, #8]
 8005944:	f1b8 0f00 	cmp.w	r8, #0
 8005948:	dde9      	ble.n	800591e <__sflush_r+0xae>
 800594a:	6a21      	ldr	r1, [r4, #32]
 800594c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800594e:	4643      	mov	r3, r8
 8005950:	463a      	mov	r2, r7
 8005952:	4628      	mov	r0, r5
 8005954:	47b0      	blx	r6
 8005956:	2800      	cmp	r0, #0
 8005958:	dc08      	bgt.n	800596c <__sflush_r+0xfc>
 800595a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800595e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005962:	81a3      	strh	r3, [r4, #12]
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800596c:	4407      	add	r7, r0
 800596e:	eba8 0800 	sub.w	r8, r8, r0
 8005972:	e7e7      	b.n	8005944 <__sflush_r+0xd4>
 8005974:	dfbffffe 	.word	0xdfbffffe

08005978 <_fflush_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	690b      	ldr	r3, [r1, #16]
 800597c:	4605      	mov	r5, r0
 800597e:	460c      	mov	r4, r1
 8005980:	b913      	cbnz	r3, 8005988 <_fflush_r+0x10>
 8005982:	2500      	movs	r5, #0
 8005984:	4628      	mov	r0, r5
 8005986:	bd38      	pop	{r3, r4, r5, pc}
 8005988:	b118      	cbz	r0, 8005992 <_fflush_r+0x1a>
 800598a:	6a03      	ldr	r3, [r0, #32]
 800598c:	b90b      	cbnz	r3, 8005992 <_fflush_r+0x1a>
 800598e:	f7fe f95f 	bl	8003c50 <__sinit>
 8005992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0f3      	beq.n	8005982 <_fflush_r+0xa>
 800599a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800599c:	07d0      	lsls	r0, r2, #31
 800599e:	d404      	bmi.n	80059aa <_fflush_r+0x32>
 80059a0:	0599      	lsls	r1, r3, #22
 80059a2:	d402      	bmi.n	80059aa <_fflush_r+0x32>
 80059a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059a6:	f7fe fb4e 	bl	8004046 <__retarget_lock_acquire_recursive>
 80059aa:	4628      	mov	r0, r5
 80059ac:	4621      	mov	r1, r4
 80059ae:	f7ff ff5f 	bl	8005870 <__sflush_r>
 80059b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059b4:	07da      	lsls	r2, r3, #31
 80059b6:	4605      	mov	r5, r0
 80059b8:	d4e4      	bmi.n	8005984 <_fflush_r+0xc>
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	059b      	lsls	r3, r3, #22
 80059be:	d4e1      	bmi.n	8005984 <_fflush_r+0xc>
 80059c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059c2:	f7fe fb41 	bl	8004048 <__retarget_lock_release_recursive>
 80059c6:	e7dd      	b.n	8005984 <_fflush_r+0xc>

080059c8 <__swhatbuf_r>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	460c      	mov	r4, r1
 80059cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d0:	2900      	cmp	r1, #0
 80059d2:	b096      	sub	sp, #88	@ 0x58
 80059d4:	4615      	mov	r5, r2
 80059d6:	461e      	mov	r6, r3
 80059d8:	da0d      	bge.n	80059f6 <__swhatbuf_r+0x2e>
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80059e0:	f04f 0100 	mov.w	r1, #0
 80059e4:	bf14      	ite	ne
 80059e6:	2340      	movne	r3, #64	@ 0x40
 80059e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80059ec:	2000      	movs	r0, #0
 80059ee:	6031      	str	r1, [r6, #0]
 80059f0:	602b      	str	r3, [r5, #0]
 80059f2:	b016      	add	sp, #88	@ 0x58
 80059f4:	bd70      	pop	{r4, r5, r6, pc}
 80059f6:	466a      	mov	r2, sp
 80059f8:	f000 f848 	bl	8005a8c <_fstat_r>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	dbec      	blt.n	80059da <__swhatbuf_r+0x12>
 8005a00:	9901      	ldr	r1, [sp, #4]
 8005a02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a0a:	4259      	negs	r1, r3
 8005a0c:	4159      	adcs	r1, r3
 8005a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a12:	e7eb      	b.n	80059ec <__swhatbuf_r+0x24>

08005a14 <__smakebuf_r>:
 8005a14:	898b      	ldrh	r3, [r1, #12]
 8005a16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a18:	079d      	lsls	r5, r3, #30
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	d507      	bpl.n	8005a30 <__smakebuf_r+0x1c>
 8005a20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	6123      	str	r3, [r4, #16]
 8005a28:	2301      	movs	r3, #1
 8005a2a:	6163      	str	r3, [r4, #20]
 8005a2c:	b003      	add	sp, #12
 8005a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a30:	ab01      	add	r3, sp, #4
 8005a32:	466a      	mov	r2, sp
 8005a34:	f7ff ffc8 	bl	80059c8 <__swhatbuf_r>
 8005a38:	9f00      	ldr	r7, [sp, #0]
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	4630      	mov	r0, r6
 8005a40:	f7ff f9c6 	bl	8004dd0 <_malloc_r>
 8005a44:	b948      	cbnz	r0, 8005a5a <__smakebuf_r+0x46>
 8005a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a4a:	059a      	lsls	r2, r3, #22
 8005a4c:	d4ee      	bmi.n	8005a2c <__smakebuf_r+0x18>
 8005a4e:	f023 0303 	bic.w	r3, r3, #3
 8005a52:	f043 0302 	orr.w	r3, r3, #2
 8005a56:	81a3      	strh	r3, [r4, #12]
 8005a58:	e7e2      	b.n	8005a20 <__smakebuf_r+0xc>
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	6020      	str	r0, [r4, #0]
 8005a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a62:	81a3      	strh	r3, [r4, #12]
 8005a64:	9b01      	ldr	r3, [sp, #4]
 8005a66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005a6a:	b15b      	cbz	r3, 8005a84 <__smakebuf_r+0x70>
 8005a6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a70:	4630      	mov	r0, r6
 8005a72:	f000 f81d 	bl	8005ab0 <_isatty_r>
 8005a76:	b128      	cbz	r0, 8005a84 <__smakebuf_r+0x70>
 8005a78:	89a3      	ldrh	r3, [r4, #12]
 8005a7a:	f023 0303 	bic.w	r3, r3, #3
 8005a7e:	f043 0301 	orr.w	r3, r3, #1
 8005a82:	81a3      	strh	r3, [r4, #12]
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	431d      	orrs	r5, r3
 8005a88:	81a5      	strh	r5, [r4, #12]
 8005a8a:	e7cf      	b.n	8005a2c <__smakebuf_r+0x18>

08005a8c <_fstat_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	4d07      	ldr	r5, [pc, #28]	@ (8005aac <_fstat_r+0x20>)
 8005a90:	2300      	movs	r3, #0
 8005a92:	4604      	mov	r4, r0
 8005a94:	4608      	mov	r0, r1
 8005a96:	4611      	mov	r1, r2
 8005a98:	602b      	str	r3, [r5, #0]
 8005a9a:	f7fb fc11 	bl	80012c0 <_fstat>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	d102      	bne.n	8005aa8 <_fstat_r+0x1c>
 8005aa2:	682b      	ldr	r3, [r5, #0]
 8005aa4:	b103      	cbz	r3, 8005aa8 <_fstat_r+0x1c>
 8005aa6:	6023      	str	r3, [r4, #0]
 8005aa8:	bd38      	pop	{r3, r4, r5, pc}
 8005aaa:	bf00      	nop
 8005aac:	20000390 	.word	0x20000390

08005ab0 <_isatty_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4d06      	ldr	r5, [pc, #24]	@ (8005acc <_isatty_r+0x1c>)
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	4608      	mov	r0, r1
 8005aba:	602b      	str	r3, [r5, #0]
 8005abc:	f7fb fc10 	bl	80012e0 <_isatty>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d102      	bne.n	8005aca <_isatty_r+0x1a>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	b103      	cbz	r3, 8005aca <_isatty_r+0x1a>
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	20000390 	.word	0x20000390

08005ad0 <_sbrk_r>:
 8005ad0:	b538      	push	{r3, r4, r5, lr}
 8005ad2:	4d06      	ldr	r5, [pc, #24]	@ (8005aec <_sbrk_r+0x1c>)
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	4608      	mov	r0, r1
 8005ada:	602b      	str	r3, [r5, #0]
 8005adc:	f7fb fc18 	bl	8001310 <_sbrk>
 8005ae0:	1c43      	adds	r3, r0, #1
 8005ae2:	d102      	bne.n	8005aea <_sbrk_r+0x1a>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	b103      	cbz	r3, 8005aea <_sbrk_r+0x1a>
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
 8005aec:	20000390 	.word	0x20000390

08005af0 <memcpy>:
 8005af0:	440a      	add	r2, r1
 8005af2:	4291      	cmp	r1, r2
 8005af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005af8:	d100      	bne.n	8005afc <memcpy+0xc>
 8005afa:	4770      	bx	lr
 8005afc:	b510      	push	{r4, lr}
 8005afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b06:	4291      	cmp	r1, r2
 8005b08:	d1f9      	bne.n	8005afe <memcpy+0xe>
 8005b0a:	bd10      	pop	{r4, pc}

08005b0c <__assert_func>:
 8005b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b0e:	4614      	mov	r4, r2
 8005b10:	461a      	mov	r2, r3
 8005b12:	4b09      	ldr	r3, [pc, #36]	@ (8005b38 <__assert_func+0x2c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4605      	mov	r5, r0
 8005b18:	68d8      	ldr	r0, [r3, #12]
 8005b1a:	b954      	cbnz	r4, 8005b32 <__assert_func+0x26>
 8005b1c:	4b07      	ldr	r3, [pc, #28]	@ (8005b3c <__assert_func+0x30>)
 8005b1e:	461c      	mov	r4, r3
 8005b20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b24:	9100      	str	r1, [sp, #0]
 8005b26:	462b      	mov	r3, r5
 8005b28:	4905      	ldr	r1, [pc, #20]	@ (8005b40 <__assert_func+0x34>)
 8005b2a:	f000 f841 	bl	8005bb0 <fiprintf>
 8005b2e:	f000 f851 	bl	8005bd4 <abort>
 8005b32:	4b04      	ldr	r3, [pc, #16]	@ (8005b44 <__assert_func+0x38>)
 8005b34:	e7f4      	b.n	8005b20 <__assert_func+0x14>
 8005b36:	bf00      	nop
 8005b38:	20000018 	.word	0x20000018
 8005b3c:	08005f56 	.word	0x08005f56
 8005b40:	08005f28 	.word	0x08005f28
 8005b44:	08005f1b 	.word	0x08005f1b

08005b48 <_calloc_r>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	fba1 5402 	umull	r5, r4, r1, r2
 8005b4e:	b93c      	cbnz	r4, 8005b60 <_calloc_r+0x18>
 8005b50:	4629      	mov	r1, r5
 8005b52:	f7ff f93d 	bl	8004dd0 <_malloc_r>
 8005b56:	4606      	mov	r6, r0
 8005b58:	b928      	cbnz	r0, 8005b66 <_calloc_r+0x1e>
 8005b5a:	2600      	movs	r6, #0
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	bd70      	pop	{r4, r5, r6, pc}
 8005b60:	220c      	movs	r2, #12
 8005b62:	6002      	str	r2, [r0, #0]
 8005b64:	e7f9      	b.n	8005b5a <_calloc_r+0x12>
 8005b66:	462a      	mov	r2, r5
 8005b68:	4621      	mov	r1, r4
 8005b6a:	f7fe f9ef 	bl	8003f4c <memset>
 8005b6e:	e7f5      	b.n	8005b5c <_calloc_r+0x14>

08005b70 <__ascii_mbtowc>:
 8005b70:	b082      	sub	sp, #8
 8005b72:	b901      	cbnz	r1, 8005b76 <__ascii_mbtowc+0x6>
 8005b74:	a901      	add	r1, sp, #4
 8005b76:	b142      	cbz	r2, 8005b8a <__ascii_mbtowc+0x1a>
 8005b78:	b14b      	cbz	r3, 8005b8e <__ascii_mbtowc+0x1e>
 8005b7a:	7813      	ldrb	r3, [r2, #0]
 8005b7c:	600b      	str	r3, [r1, #0]
 8005b7e:	7812      	ldrb	r2, [r2, #0]
 8005b80:	1e10      	subs	r0, r2, #0
 8005b82:	bf18      	it	ne
 8005b84:	2001      	movne	r0, #1
 8005b86:	b002      	add	sp, #8
 8005b88:	4770      	bx	lr
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	e7fb      	b.n	8005b86 <__ascii_mbtowc+0x16>
 8005b8e:	f06f 0001 	mvn.w	r0, #1
 8005b92:	e7f8      	b.n	8005b86 <__ascii_mbtowc+0x16>

08005b94 <__ascii_wctomb>:
 8005b94:	4603      	mov	r3, r0
 8005b96:	4608      	mov	r0, r1
 8005b98:	b141      	cbz	r1, 8005bac <__ascii_wctomb+0x18>
 8005b9a:	2aff      	cmp	r2, #255	@ 0xff
 8005b9c:	d904      	bls.n	8005ba8 <__ascii_wctomb+0x14>
 8005b9e:	228a      	movs	r2, #138	@ 0x8a
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba6:	4770      	bx	lr
 8005ba8:	700a      	strb	r2, [r1, #0]
 8005baa:	2001      	movs	r0, #1
 8005bac:	4770      	bx	lr
	...

08005bb0 <fiprintf>:
 8005bb0:	b40e      	push	{r1, r2, r3}
 8005bb2:	b503      	push	{r0, r1, lr}
 8005bb4:	4601      	mov	r1, r0
 8005bb6:	ab03      	add	r3, sp, #12
 8005bb8:	4805      	ldr	r0, [pc, #20]	@ (8005bd0 <fiprintf+0x20>)
 8005bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bbe:	6800      	ldr	r0, [r0, #0]
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	f7ff fd3d 	bl	8005640 <_vfiprintf_r>
 8005bc6:	b002      	add	sp, #8
 8005bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bcc:	b003      	add	sp, #12
 8005bce:	4770      	bx	lr
 8005bd0:	20000018 	.word	0x20000018

08005bd4 <abort>:
 8005bd4:	b508      	push	{r3, lr}
 8005bd6:	2006      	movs	r0, #6
 8005bd8:	f000 f82c 	bl	8005c34 <raise>
 8005bdc:	2001      	movs	r0, #1
 8005bde:	f7fb fb3b 	bl	8001258 <_exit>

08005be2 <_raise_r>:
 8005be2:	291f      	cmp	r1, #31
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	4605      	mov	r5, r0
 8005be8:	460c      	mov	r4, r1
 8005bea:	d904      	bls.n	8005bf6 <_raise_r+0x14>
 8005bec:	2316      	movs	r3, #22
 8005bee:	6003      	str	r3, [r0, #0]
 8005bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf4:	bd38      	pop	{r3, r4, r5, pc}
 8005bf6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005bf8:	b112      	cbz	r2, 8005c00 <_raise_r+0x1e>
 8005bfa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005bfe:	b94b      	cbnz	r3, 8005c14 <_raise_r+0x32>
 8005c00:	4628      	mov	r0, r5
 8005c02:	f000 f831 	bl	8005c68 <_getpid_r>
 8005c06:	4622      	mov	r2, r4
 8005c08:	4601      	mov	r1, r0
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c10:	f000 b818 	b.w	8005c44 <_kill_r>
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d00a      	beq.n	8005c2e <_raise_r+0x4c>
 8005c18:	1c59      	adds	r1, r3, #1
 8005c1a:	d103      	bne.n	8005c24 <_raise_r+0x42>
 8005c1c:	2316      	movs	r3, #22
 8005c1e:	6003      	str	r3, [r0, #0]
 8005c20:	2001      	movs	r0, #1
 8005c22:	e7e7      	b.n	8005bf4 <_raise_r+0x12>
 8005c24:	2100      	movs	r1, #0
 8005c26:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	4798      	blx	r3
 8005c2e:	2000      	movs	r0, #0
 8005c30:	e7e0      	b.n	8005bf4 <_raise_r+0x12>
	...

08005c34 <raise>:
 8005c34:	4b02      	ldr	r3, [pc, #8]	@ (8005c40 <raise+0xc>)
 8005c36:	4601      	mov	r1, r0
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	f7ff bfd2 	b.w	8005be2 <_raise_r>
 8005c3e:	bf00      	nop
 8005c40:	20000018 	.word	0x20000018

08005c44 <_kill_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	4d07      	ldr	r5, [pc, #28]	@ (8005c64 <_kill_r+0x20>)
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	4611      	mov	r1, r2
 8005c50:	602b      	str	r3, [r5, #0]
 8005c52:	f7fb faf1 	bl	8001238 <_kill>
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	d102      	bne.n	8005c60 <_kill_r+0x1c>
 8005c5a:	682b      	ldr	r3, [r5, #0]
 8005c5c:	b103      	cbz	r3, 8005c60 <_kill_r+0x1c>
 8005c5e:	6023      	str	r3, [r4, #0]
 8005c60:	bd38      	pop	{r3, r4, r5, pc}
 8005c62:	bf00      	nop
 8005c64:	20000390 	.word	0x20000390

08005c68 <_getpid_r>:
 8005c68:	f7fb bade 	b.w	8001228 <_getpid>

08005c6c <_init>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	bf00      	nop
 8005c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c72:	bc08      	pop	{r3}
 8005c74:	469e      	mov	lr, r3
 8005c76:	4770      	bx	lr

08005c78 <_fini>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	bf00      	nop
 8005c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7e:	bc08      	pop	{r3}
 8005c80:	469e      	mov	lr, r3
 8005c82:	4770      	bx	lr
